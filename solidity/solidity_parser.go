package solidity // SolidityParser

import (
	"fmt"
	"github.com/antlr/antlr4/runtime/Go/antlr"
	"reflect"
)

var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 176, 1283,
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7,
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13,
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9,
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23,
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4,
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34,
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9,
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44,
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4,
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55,
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9,
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65,
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4,
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76,
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9,
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86,
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4,
	92, 9, 92, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2,
	3, 2, 3, 2, 7, 2, 197, 10, 2, 12, 2, 14, 2, 200, 11, 2, 3, 2, 3, 2, 3,
	3, 3, 3, 6, 3, 206, 10, 3, 13, 3, 14, 3, 207, 3, 3, 3, 3, 3, 4, 3, 4, 3,
	4, 3, 4, 5, 4, 216, 10, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3,
	4, 3, 4, 3, 4, 5, 4, 228, 10, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 5, 5, 235,
	10, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 7, 7, 243, 10, 7, 12, 7, 14,
	7, 246, 11, 7, 3, 7, 3, 7, 3, 8, 5, 8, 251, 10, 8, 3, 8, 3, 8, 3, 8, 5,
	8, 256, 10, 8, 3, 8, 3, 8, 7, 8, 260, 10, 8, 12, 8, 14, 8, 263, 11, 8,
	3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 5, 9, 270, 10, 9, 3, 9, 3, 9, 7, 9, 274,
	10, 9, 12, 9, 14, 9, 277, 11, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	7, 10, 285, 10, 10, 12, 10, 14, 10, 288, 11, 10, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 11, 3, 11, 7, 11, 296, 10, 11, 12, 11, 14, 11, 299, 11, 11, 3, 12,
	3, 12, 5, 12, 303, 10, 12, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3,
	13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 5, 13, 317, 10, 13, 3, 14, 3, 14,
	3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 327, 10, 15, 12, 15, 14,
	15, 330, 11, 15, 5, 15, 332, 10, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15,
	338, 10, 15, 12, 15, 14, 15, 341, 11, 15, 5, 15, 343, 10, 15, 3, 15, 5,
	15, 346, 10, 15, 3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 7, 16, 353, 10, 16,
	12, 16, 14, 16, 356, 11, 16, 3, 17, 3, 17, 5, 17, 360, 10, 17, 3, 18, 3,
	18, 3, 19, 3, 19, 3, 19, 7, 19, 367, 10, 19, 12, 19, 14, 19, 370, 11, 19,
	3, 20, 3, 20, 5, 20, 374, 10, 20, 3, 20, 5, 20, 377, 10, 20, 3, 21, 3,
	21, 3, 21, 5, 21, 382, 10, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 21, 3, 21, 3, 21, 3, 21, 3, 21, 7, 21, 395, 10, 21, 12, 21, 14, 21,
	398, 11, 21, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3,
	23, 7, 23, 409, 10, 23, 12, 23, 14, 23, 412, 11, 23, 3, 23, 3, 23, 5, 23,
	416, 10, 23, 3, 24, 3, 24, 3, 24, 3, 24, 5, 24, 422, 10, 24, 3, 24, 3,
	24, 5, 24, 426, 10, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 7,
	24, 445, 10, 24, 12, 24, 14, 24, 448, 11, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 24, 5, 24, 455, 10, 24, 3, 24, 3, 24, 5, 24, 459, 10, 24, 3, 25, 3,
	25, 3, 25, 3, 25, 5, 25, 465, 10, 25, 3, 25, 5, 25, 468, 10, 25, 3, 25,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 7, 25, 477, 10, 25, 12, 25, 14,
	25, 480, 11, 25, 3, 25, 3, 25, 5, 25, 484, 10, 25, 3, 26, 3, 26, 3, 26,
	3, 26, 3, 26, 5, 26, 491, 10, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26,
	7, 26, 509, 10, 26, 12, 26, 14, 26, 512, 11, 26, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 5, 26, 521, 10, 26, 3, 26, 3, 26, 5, 26, 525,
	10, 26, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 3, 27, 7, 27, 544, 10,
	27, 12, 27, 14, 27, 547, 11, 27, 3, 27, 3, 27, 5, 27, 551, 10, 27, 3, 28,
	3, 28, 3, 28, 3, 28, 6, 28, 557, 10, 28, 13, 28, 14, 28, 558, 3, 28, 3,
	28, 3, 29, 3, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30,
	7, 30, 573, 10, 30, 12, 30, 14, 30, 576, 11, 30, 3, 30, 3, 30, 3, 31, 3,
	31, 3, 31, 3, 31, 3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32,
	3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3,
	32, 3, 32, 3, 32, 3, 32, 7, 32, 606, 10, 32, 12, 32, 14, 32, 609, 11, 32,
	3, 32, 3, 32, 3, 32, 5, 32, 614, 10, 32, 3, 32, 3, 32, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 33, 3, 33, 3, 33, 3, 34, 3, 34, 5, 34, 627, 10, 34, 3, 34,
	5, 34, 630, 10, 34, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 3, 35, 7, 35, 638,
	10, 35, 12, 35, 14, 35, 641, 11, 35, 5, 35, 643, 10, 35, 3, 35, 3, 35,
	5, 35, 647, 10, 35, 3, 35, 3, 35, 3, 36, 3, 36, 5, 36, 653, 10, 36, 3,
	37, 3, 37, 3, 37, 3, 37, 3, 37, 3, 37, 7, 37, 661, 10, 37, 12, 37, 14,
	37, 664, 11, 37, 5, 37, 666, 10, 37, 3, 37, 3, 37, 3, 37, 3, 38, 3, 38,
	3, 38, 3, 38, 3, 38, 3, 38, 7, 38, 677, 10, 38, 12, 38, 14, 38, 680, 11,
	38, 3, 38, 3, 38, 5, 38, 684, 10, 38, 3, 38, 3, 38, 3, 38, 5, 38, 689,
	10, 38, 3, 38, 5, 38, 692, 10, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3,
	39, 3, 39, 5, 39, 701, 10, 39, 3, 39, 3, 39, 3, 39, 5, 39, 706, 10, 39,
	3, 39, 7, 39, 709, 10, 39, 12, 39, 14, 39, 712, 11, 39, 3, 40, 3, 40, 3,
	40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 5, 40,
	726, 10, 40, 3, 41, 3, 41, 3, 41, 5, 41, 731, 10, 41, 3, 41, 3, 41, 3,
	41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 7, 41, 742, 10, 41, 12, 41,
	14, 41, 745, 11, 41, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 5, 41, 752, 10,
	41, 3, 42, 3, 42, 5, 42, 756, 10, 42, 3, 42, 3, 42, 3, 43, 3, 43, 3, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 778, 10, 44, 5, 44, 780, 10, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 5, 44, 828, 10, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 5, 44, 834, 10, 44, 3, 44, 3, 44, 5, 44, 838, 10, 44, 3, 44, 3, 44,
	3, 44, 3, 44, 3, 44, 5, 44, 845, 10, 44, 3, 44, 3, 44, 3, 44, 3, 44, 3,
	44, 7, 44, 852, 10, 44, 12, 44, 14, 44, 855, 11, 44, 5, 44, 857, 10, 44,
	3, 44, 3, 44, 3, 44, 3, 44, 3, 44, 7, 44, 864, 10, 44, 12, 44, 14, 44,
	867, 11, 44, 3, 45, 3, 45, 3, 45, 3, 46, 3, 46, 3, 47, 3, 47, 5, 47, 876,
	10, 47, 3, 47, 3, 47, 5, 47, 880, 10, 47, 7, 47, 882, 10, 47, 12, 47, 14,
	47, 885, 11, 47, 3, 47, 3, 47, 3, 48, 3, 48, 3, 48, 3, 48, 7, 48, 893,
	10, 48, 12, 48, 14, 48, 896, 11, 48, 3, 48, 3, 48, 3, 49, 3, 49, 3, 50,
	3, 50, 3, 50, 3, 50, 3, 50, 5, 50, 907, 10, 50, 3, 51, 3, 51, 3, 52, 6,
	52, 912, 10, 52, 13, 52, 14, 52, 913, 3, 53, 6, 53, 917, 10, 53, 13, 53,
	14, 53, 918, 3, 54, 6, 54, 922, 10, 54, 13, 54, 14, 54, 923, 3, 55, 3,
	55, 5, 55, 928, 10, 55, 3, 56, 3, 56, 3, 56, 7, 56, 933, 10, 56, 12, 56,
	14, 56, 936, 11, 56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 3,
	58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58, 3, 58,
	5, 58, 956, 10, 58, 3, 59, 3, 59, 5, 59, 960, 10, 59, 3, 60, 3, 60, 3,
	60, 3, 60, 3, 60, 3, 60, 3, 60, 5, 60, 969, 10, 60, 3, 61, 3, 61, 3, 61,
	3, 61, 5, 61, 975, 10, 61, 3, 61, 3, 61, 5, 61, 979, 10, 61, 3, 61, 5,
	61, 982, 10, 61, 3, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62,
	3, 62, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 63, 3, 64, 3,
	64, 3, 64, 3, 65, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66,
	3, 66, 5, 66, 1014, 10, 66, 3, 66, 3, 66, 6, 66, 1018, 10, 66, 13, 66,
	14, 66, 1019, 3, 67, 3, 67, 5, 67, 1024, 10, 67, 3, 67, 3, 67, 3, 67, 3,
	67, 5, 67, 1030, 10, 67, 3, 67, 3, 67, 3, 68, 3, 68, 5, 68, 1036, 10, 68,
	3, 68, 3, 68, 3, 69, 3, 69, 3, 69, 3, 69, 3, 69, 3, 70, 3, 70, 3, 70, 3,
	70, 3, 70, 3, 71, 3, 71, 5, 71, 1052, 10, 71, 3, 71, 5, 71, 1055, 10, 71,
	3, 71, 3, 71, 7, 71, 1059, 10, 71, 12, 71, 14, 71, 1062, 11, 71, 3, 71,
	3, 71, 3, 72, 3, 72, 3, 72, 3, 72, 7, 72, 1070, 10, 72, 12, 72, 14, 72,
	1073, 11, 72, 3, 72, 3, 72, 3, 73, 3, 73, 3, 73, 7, 73, 1080, 10, 73, 12,
	73, 14, 73, 1083, 11, 73, 3, 74, 3, 74, 7, 74, 1087, 10, 74, 12, 74, 14,
	74, 1090, 11, 74, 3, 74, 3, 74, 3, 74, 3, 74, 5, 74, 1096, 10, 74, 7, 74,
	1098, 10, 74, 12, 74, 14, 74, 1101, 11, 74, 3, 74, 3, 74, 3, 75, 3, 75,
	3, 75, 5, 75, 1108, 10, 75, 3, 75, 3, 75, 3, 75, 3, 75, 5, 75, 1114, 10,
	75, 3, 75, 3, 75, 3, 76, 3, 76, 3, 76, 3, 77, 3, 77, 3, 77, 3, 77, 3, 77,
	3, 77, 3, 77, 3, 78, 3, 78, 5, 78, 1130, 10, 78, 3, 79, 3, 79, 3, 79, 3,
	79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 3, 79, 5, 79, 1143, 10, 79,
	3, 80, 3, 80, 7, 80, 1147, 10, 80, 12, 80, 14, 80, 1150, 11, 80, 3, 80,
	3, 80, 3, 81, 3, 81, 3, 81, 3, 81, 5, 81, 1158, 10, 81, 3, 81, 3, 81, 3,
	81, 3, 81, 7, 81, 1164, 10, 81, 12, 81, 14, 81, 1167, 11, 81, 3, 81, 3,
	81, 5, 81, 1171, 10, 81, 5, 81, 1173, 10, 81, 3, 82, 3, 82, 3, 82, 3, 82,
	3, 82, 3, 82, 3, 82, 6, 82, 1182, 10, 82, 13, 82, 14, 82, 1183, 3, 82,
	3, 82, 3, 82, 5, 82, 1189, 10, 82, 3, 83, 3, 83, 3, 83, 3, 83, 3, 84, 3,
	84, 3, 84, 3, 84, 3, 84, 3, 84, 3, 85, 3, 85, 3, 85, 3, 85, 3, 86, 3, 86,
	3, 86, 6, 86, 1208, 10, 86, 13, 86, 14, 86, 1209, 3, 86, 3, 86, 5, 86,
	1214, 10, 86, 3, 86, 3, 86, 5, 86, 1218, 10, 86, 3, 87, 3, 87, 3, 87, 3,
	87, 3, 87, 3, 87, 7, 87, 1226, 10, 87, 12, 87, 14, 87, 1229, 11, 87, 5,
	87, 1231, 10, 87, 3, 87, 3, 87, 3, 87, 3, 87, 3, 87, 7, 87, 1238, 10, 87,
	12, 87, 14, 87, 1241, 11, 87, 5, 87, 1243, 10, 87, 3, 87, 3, 87, 3, 88,
	3, 88, 3, 88, 7, 88, 1250, 10, 88, 12, 88, 14, 88, 1253, 11, 88, 3, 89,
	3, 89, 3, 89, 3, 89, 3, 89, 7, 89, 1260, 10, 89, 12, 89, 14, 89, 1263,
	11, 89, 5, 89, 1265, 10, 89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 91, 3, 91,
	3, 91, 3, 91, 3, 91, 5, 91, 1276, 10, 91, 3, 92, 3, 92, 3, 92, 5, 92, 1281,
	10, 92, 3, 92, 3, 297, 4, 76, 86, 93, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20,
	22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56,
	58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92,
	94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122,
	124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152,
	154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182,
	2, 19, 5, 2, 27, 27, 42, 42, 52, 53, 5, 2, 51, 51, 54, 54, 69, 69, 5, 2,
	13, 13, 46, 46, 59, 59, 5, 2, 19, 19, 106, 106, 117, 120, 3, 2, 107, 109,
	3, 2, 105, 106, 3, 2, 102, 104, 3, 2, 113, 116, 3, 2, 111, 112, 3, 2, 119,
	120, 3, 2, 84, 95, 6, 2, 24, 25, 31, 31, 35, 35, 129, 129, 4, 2, 29, 29,
	62, 62, 3, 2, 123, 124, 3, 2, 127, 128, 4, 2, 155, 155, 164, 164, 4, 2,
	146, 146, 153, 153, 2, 1427, 2, 198, 3, 2, 2, 2, 4, 203, 3, 2, 2, 2, 6,
	211, 3, 2, 2, 2, 8, 231, 3, 2, 2, 2, 10, 236, 3, 2, 2, 2, 12, 238, 3, 2,
	2, 2, 14, 250, 3, 2, 2, 2, 16, 266, 3, 2, 2, 2, 18, 280, 3, 2, 2, 2, 20,
	291, 3, 2, 2, 2, 22, 300, 3, 2, 2, 2, 24, 316, 3, 2, 2, 2, 26, 318, 3,
	2, 2, 2, 28, 322, 3, 2, 2, 2, 30, 349, 3, 2, 2, 2, 32, 357, 3, 2, 2, 2,
	34, 361, 3, 2, 2, 2, 36, 363, 3, 2, 2, 2, 38, 371, 3, 2, 2, 2, 40, 378,
	3, 2, 2, 2, 42, 401, 3, 2, 2, 2, 44, 403, 3, 2, 2, 2, 46, 417, 3, 2, 2,
	2, 48, 460, 3, 2, 2, 2, 50, 485, 3, 2, 2, 2, 52, 526, 3, 2, 2, 2, 54, 552,
	3, 2, 2, 2, 56, 562, 3, 2, 2, 2, 58, 566, 3, 2, 2, 2, 60, 579, 3, 2, 2,
	2, 62, 585, 3, 2, 2, 2, 64, 617, 3, 2, 2, 2, 66, 624, 3, 2, 2, 2, 68, 631,
	3, 2, 2, 2, 70, 650, 3, 2, 2, 2, 72, 654, 3, 2, 2, 2, 74, 670, 3, 2, 2,
	2, 76, 700, 3, 2, 2, 2, 78, 725, 3, 2, 2, 2, 80, 727, 3, 2, 2, 2, 82, 753,
	3, 2, 2, 2, 84, 759, 3, 2, 2, 2, 86, 779, 3, 2, 2, 2, 88, 868, 3, 2, 2,
	2, 90, 871, 3, 2, 2, 2, 92, 873, 3, 2, 2, 2, 94, 888, 3, 2, 2, 2, 96, 899,
	3, 2, 2, 2, 98, 906, 3, 2, 2, 2, 100, 908, 3, 2, 2, 2, 102, 911, 3, 2,
	2, 2, 104, 916, 3, 2, 2, 2, 106, 921, 3, 2, 2, 2, 108, 925, 3, 2, 2, 2,
	110, 929, 3, 2, 2, 2, 112, 939, 3, 2, 2, 2, 114, 955, 3, 2, 2, 2, 116,
	959, 3, 2, 2, 2, 118, 961, 3, 2, 2, 2, 120, 970, 3, 2, 2, 2, 122, 986,
	3, 2, 2, 2, 124, 992, 3, 2, 2, 2, 126, 1000, 3, 2, 2, 2, 128, 1003, 3,
	2, 2, 2, 130, 1006, 3, 2, 2, 2, 132, 1021, 3, 2, 2, 2, 134, 1033, 3, 2,
	2, 2, 136, 1039, 3, 2, 2, 2, 138, 1044, 3, 2, 2, 2, 140, 1049, 3, 2, 2,
	2, 142, 1065, 3, 2, 2, 2, 144, 1076, 3, 2, 2, 2, 146, 1084, 3, 2, 2, 2,
	148, 1113, 3, 2, 2, 2, 150, 1117, 3, 2, 2, 2, 152, 1120, 3, 2, 2, 2, 154,
	1129, 3, 2, 2, 2, 156, 1142, 3, 2, 2, 2, 158, 1144, 3, 2, 2, 2, 160, 1172,
	3, 2, 2, 2, 162, 1188, 3, 2, 2, 2, 164, 1190, 3, 2, 2, 2, 166, 1194, 3,
	2, 2, 2, 168, 1200, 3, 2, 2, 2, 170, 1204, 3, 2, 2, 2, 172, 1219, 3, 2,
	2, 2, 174, 1246, 3, 2, 2, 2, 176, 1254, 3, 2, 2, 2, 178, 1268, 3, 2, 2,
	2, 180, 1275, 3, 2, 2, 2, 182, 1280, 3, 2, 2, 2, 184, 197, 5, 4, 3, 2,
	185, 197, 5, 6, 4, 2, 186, 197, 5, 74, 38, 2, 187, 197, 5, 14, 8, 2, 188,
	197, 5, 16, 9, 2, 189, 197, 5, 18, 10, 2, 190, 197, 5, 46, 24, 2, 191,
	197, 5, 64, 33, 2, 192, 197, 5, 54, 28, 2, 193, 197, 5, 58, 30, 2, 194,
	197, 5, 60, 31, 2, 195, 197, 5, 72, 37, 2, 196, 184, 3, 2, 2, 2, 196, 185,
	3, 2, 2, 2, 196, 186, 3, 2, 2, 2, 196, 187, 3, 2, 2, 2, 196, 188, 3, 2,
	2, 2, 196, 189, 3, 2, 2, 2, 196, 190, 3, 2, 2, 2, 196, 191, 3, 2, 2, 2,
	196, 192, 3, 2, 2, 2, 196, 193, 3, 2, 2, 2, 196, 194, 3, 2, 2, 2, 196,
	195, 3, 2, 2, 2, 197, 200, 3, 2, 2, 2, 198, 196, 3, 2, 2, 2, 198, 199,
	3, 2, 2, 2, 199, 201, 3, 2, 2, 2, 200, 198, 3, 2, 2, 2, 201, 202, 7, 2,
	2, 3, 202, 3, 3, 2, 2, 2, 203, 205, 7, 4, 2, 2, 204, 206, 7, 172, 2, 2,
	205, 204, 3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 205, 3, 2, 2, 2, 207,
	208, 3, 2, 2, 2, 208, 209, 3, 2, 2, 2, 209, 210, 7, 173, 2, 2, 210, 5,
	3, 2, 2, 2, 211, 227, 7, 39, 2, 2, 212, 215, 5, 10, 6, 2, 213, 214, 7,
	8, 2, 2, 214, 216, 5, 96, 49, 2, 215, 213, 3, 2, 2, 2, 215, 216, 3, 2,
	2, 2, 216, 228, 3, 2, 2, 2, 217, 218, 5, 12, 7, 2, 218, 219, 7, 31, 2,
	2, 219, 220, 5, 10, 6, 2, 220, 228, 3, 2, 2, 2, 221, 222, 7, 107, 2, 2,
	222, 223, 7, 8, 2, 2, 223, 224, 5, 96, 49, 2, 224, 225, 7, 31, 2, 2, 225,
	226, 5, 10, 6, 2, 226, 228, 3, 2, 2, 2, 227, 212, 3, 2, 2, 2, 227, 217,
	3, 2, 2, 2, 227, 221, 3, 2, 2, 2, 228, 229, 3, 2, 2, 2, 229, 230, 7, 79,
	2, 2, 230, 7, 3, 2, 2, 2, 231, 234, 5, 96, 49, 2, 232, 233, 7, 8, 2, 2,
	233, 235, 5, 96, 49, 2, 234, 232, 3, 2, 2, 2, 234, 235, 3, 2, 2, 2, 235,
	9, 3, 2, 2, 2, 236, 237, 7, 123, 2, 2, 237, 11, 3, 2, 2, 2, 238, 239, 7,
	76, 2, 2, 239, 244, 5, 8, 5, 2, 240, 241, 7, 96, 2, 2, 241, 243, 5, 8,
	5, 2, 242, 240, 3, 2, 2, 2, 243, 246, 3, 2, 2, 2, 244, 242, 3, 2, 2, 2,
	244, 245, 3, 2, 2, 2, 245, 247, 3, 2, 2, 2, 246, 244, 3, 2, 2, 2, 247,
	248, 7, 77, 2, 2, 248, 13, 3, 2, 2, 2, 249, 251, 7, 5, 2, 2, 250, 249,
	3, 2, 2, 2, 250, 251, 3, 2, 2, 2, 251, 252, 3, 2, 2, 2, 252, 253, 7, 18,
	2, 2, 253, 255, 5, 96, 49, 2, 254, 256, 5, 20, 11, 2, 255, 254, 3, 2, 2,
	2, 255, 256, 3, 2, 2, 2, 256, 257, 3, 2, 2, 2, 257, 261, 7, 76, 2, 2, 258,
	260, 5, 24, 13, 2, 259, 258, 3, 2, 2, 2, 260, 263, 3, 2, 2, 2, 261, 259,
	3, 2, 2, 2, 261, 262, 3, 2, 2, 2, 262, 264, 3, 2, 2, 2, 263, 261, 3, 2,
	2, 2, 264, 265, 7, 77, 2, 2, 265, 15, 3, 2, 2, 2, 266, 267, 7, 41, 2, 2,
	267, 269, 5, 96, 49, 2, 268, 270, 5, 20, 11, 2, 269, 268, 3, 2, 2, 2, 269,
	270, 3, 2, 2, 2, 270, 271, 3, 2, 2, 2, 271, 275, 7, 76, 2, 2, 272, 274,
	5, 24, 13, 2, 273, 272, 3, 2, 2, 2, 274, 277, 3, 2, 2, 2, 275, 273, 3,
	2, 2, 2, 275, 276, 3, 2, 2, 2, 276, 278, 3, 2, 2, 2, 277, 275, 3, 2, 2,
	2, 278, 279, 7, 77, 2, 2, 279, 17, 3, 2, 2, 2, 280, 281, 7, 44, 2, 2, 281,
	282, 5, 96, 49, 2, 282, 286, 7, 76, 2, 2, 283, 285, 5, 24, 13, 2, 284,
	283, 3, 2, 2, 2, 285, 288, 3, 2, 2, 2, 286, 284, 3, 2, 2, 2, 286, 287,
	3, 2, 2, 2, 287, 289, 3, 2, 2, 2, 288, 286, 3, 2, 2, 2, 289, 290, 7, 77,
	2, 2, 290, 19, 3, 2, 2, 2, 291, 292, 7, 43, 2, 2, 292, 297, 5, 22, 12,
	2, 293, 294, 7, 96, 2, 2, 294, 296, 5, 22, 12, 2, 295, 293, 3, 2, 2, 2,
	296, 299, 3, 2, 2, 2, 297, 298, 3, 2, 2, 2, 297, 295, 3, 2, 2, 2, 298,
	21, 3, 2, 2, 2, 299, 297, 3, 2, 2, 2, 300, 302, 5, 30, 16, 2, 301, 303,
	5, 28, 15, 2, 302, 301, 3, 2, 2, 2, 302, 303, 3, 2, 2, 2, 303, 23, 3, 2,
	2, 2, 304, 317, 5, 40, 21, 2, 305, 317, 5, 46, 24, 2, 306, 317, 5, 48,
	25, 2, 307, 317, 5, 50, 26, 2, 308, 317, 5, 52, 27, 2, 309, 317, 5, 54,
	28, 2, 310, 317, 5, 58, 30, 2, 311, 317, 5, 60, 31, 2, 312, 317, 5, 62,
	32, 2, 313, 317, 5, 68, 35, 2, 314, 317, 5, 72, 37, 2, 315, 317, 5, 74,
	38, 2, 316, 304, 3, 2, 2, 2, 316, 305, 3, 2, 2, 2, 316, 306, 3, 2, 2, 2,
	316, 307, 3, 2, 2, 2, 316, 308, 3, 2, 2, 2, 316, 309, 3, 2, 2, 2, 316,
	310, 3, 2, 2, 2, 316, 311, 3, 2, 2, 2, 316, 312, 3, 2, 2, 2, 316, 313,
	3, 2, 2, 2, 316, 314, 3, 2, 2, 2, 316, 315, 3, 2, 2, 2, 317, 25, 3, 2,
	2, 2, 318, 319, 5, 96, 49, 2, 319, 320, 7, 78, 2, 2, 320, 321, 5, 86, 44,
	2, 321, 27, 3, 2, 2, 2, 322, 345, 7, 72, 2, 2, 323, 328, 5, 86, 44, 2,
	324, 325, 7, 96, 2, 2, 325, 327, 5, 86, 44, 2, 326, 324, 3, 2, 2, 2, 327,
	330, 3, 2, 2, 2, 328, 326, 3, 2, 2, 2, 328, 329, 3, 2, 2, 2, 329, 332,
	3, 2, 2, 2, 330, 328, 3, 2, 2, 2, 331, 323, 3, 2, 2, 2, 331, 332, 3, 2,
	2, 2, 332, 346, 3, 2, 2, 2, 333, 342, 7, 76, 2, 2, 334, 339, 5, 26, 14,
	2, 335, 336, 7, 96, 2, 2, 336, 338, 5, 26, 14, 2, 337, 335, 3, 2, 2, 2,
	338, 341, 3, 2, 2, 2, 339, 337, 3, 2, 2, 2, 339, 340, 3, 2, 2, 2, 340,
	343, 3, 2, 2, 2, 341, 339, 3, 2, 2, 2, 342, 334, 3, 2, 2, 2, 342, 343,
	3, 2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 346, 7, 77, 2, 2, 345, 331, 3, 2,
	2, 2, 345, 333, 3, 2, 2, 2, 346, 347, 3, 2, 2, 2, 347, 348, 7, 73, 2, 2,
	348, 29, 3, 2, 2, 2, 349, 354, 5, 96, 49, 2, 350, 351, 7, 80, 2, 2, 351,
	353, 5, 96, 49, 2, 352, 350, 3, 2, 2, 2, 353, 356, 3, 2, 2, 2, 354, 352,
	3, 2, 2, 2, 354, 355, 3, 2, 2, 2, 355, 31, 3, 2, 2, 2, 356, 354, 3, 2,
	2, 2, 357, 359, 5, 30, 16, 2, 358, 360, 5, 28, 15, 2, 359, 358, 3, 2, 2,
	2, 359, 360, 3, 2, 2, 2, 360, 33, 3, 2, 2, 2, 361, 362, 9, 2, 2, 2, 362,
	35, 3, 2, 2, 2, 363, 368, 5, 38, 20, 2, 364, 365, 7, 96, 2, 2, 365, 367,
	5, 38, 20, 2, 366, 364, 3, 2, 2, 2, 367, 370, 3, 2, 2, 2, 368, 366, 3,
	2, 2, 2, 368, 369, 3, 2, 2, 2, 369, 37, 3, 2, 2, 2, 370, 368, 3, 2, 2,
	2, 371, 373, 5, 76, 39, 2, 372, 374, 5, 84, 43, 2, 373, 372, 3, 2, 2, 2,
	373, 374, 3, 2, 2, 2, 374, 376, 3, 2, 2, 2, 375, 377, 5, 96, 49, 2, 376,
	375, 3, 2, 2, 2, 376, 377, 3, 2, 2, 2, 377, 39, 3, 2, 2, 2, 378, 379, 7,
	16, 2, 2, 379, 381, 7, 72, 2, 2, 380, 382, 5, 36, 19, 2, 381, 380, 3, 2,
	2, 2, 381, 382, 3, 2, 2, 2, 382, 383, 3, 2, 2, 2, 383, 396, 7, 73, 2, 2,
	384, 395, 5, 32, 17, 2, 385, 386, 6, 21, 2, 3, 386, 387, 7, 51, 2, 2, 387,
	395, 8, 21, 1, 2, 388, 389, 6, 21, 3, 3, 389, 390, 7, 42, 2, 2, 390, 395,
	8, 21, 1, 2, 391, 392, 6, 21, 4, 3, 392, 393, 7, 53, 2, 2, 393, 395, 8,
	21, 1, 2, 394, 384, 3, 2, 2, 2, 394, 385, 3, 2, 2, 2, 394, 388, 3, 2, 2,
	2, 394, 391, 3, 2, 2, 2, 395, 398, 3, 2, 2, 2, 396, 394, 3, 2, 2, 2, 396,
	397, 3, 2, 2, 2, 397, 399, 3, 2, 2, 2, 398, 396, 3, 2, 2, 2, 399, 400,
	5, 110, 56, 2, 400, 41, 3, 2, 2, 2, 401, 402, 9, 3, 2, 2, 402, 43, 3, 2,
	2, 2, 403, 415, 7, 50, 2, 2, 404, 405, 7, 72, 2, 2, 405, 410, 5, 30, 16,
	2, 406, 407, 7, 96, 2, 2, 407, 409, 5, 30, 16, 2, 408, 406, 3, 2, 2, 2,
	409, 412, 3, 2, 2, 2, 410, 408, 3, 2, 2, 2, 410, 411, 3, 2, 2, 2, 411,
	413, 3, 2, 2, 2, 412, 410, 3, 2, 2, 2, 413, 414, 7, 73, 2, 2, 414, 416,
	3, 2, 2, 2, 415, 404, 3, 2, 2, 2, 415, 416, 3, 2, 2, 2, 416, 45, 3, 2,
	2, 2, 417, 421, 7, 34, 2, 2, 418, 422, 5, 96, 49, 2, 419, 422, 7, 28, 2,
	2, 420, 422, 7, 55, 2, 2, 421, 418, 3, 2, 2, 2, 421, 419, 3, 2, 2, 2, 421,
	420, 3, 2, 2, 2, 422, 423, 3, 2, 2, 2, 423, 425, 7, 72, 2, 2, 424, 426,
	5, 36, 19, 2, 425, 424, 3, 2, 2, 2, 425, 426, 3, 2, 2, 2, 426, 427, 3,
	2, 2, 2, 427, 446, 7, 73, 2, 2, 428, 429, 6, 24, 5, 3, 429, 430, 5, 34,
	18, 2, 430, 431, 8, 24, 1, 2, 431, 445, 3, 2, 2, 2, 432, 433, 6, 24, 6,
	3, 433, 434, 5, 42, 22, 2, 434, 435, 8, 24, 1, 2, 435, 445, 3, 2, 2, 2,
	436, 445, 5, 32, 17, 2, 437, 438, 6, 24, 7, 3, 438, 439, 7, 70, 2, 2, 439,
	445, 8, 24, 1, 2, 440, 441, 6, 24, 8, 3, 441, 442, 5, 44, 23, 2, 442, 443,
	8, 24, 1, 2, 443, 445, 3, 2, 2, 2, 444, 428, 3, 2, 2, 2, 444, 432, 3, 2,
	2, 2, 444, 436, 3, 2, 2, 2, 444, 437, 3, 2, 2, 2, 444, 440, 3, 2, 2, 2,
	445, 448, 3, 2, 2, 2, 446, 444, 3, 2, 2, 2, 446, 447, 3, 2, 2, 2, 447,
	454, 3, 2, 2, 2, 448, 446, 3, 2, 2, 2, 449, 450, 7, 57, 2, 2, 450, 451,
	7, 72, 2, 2, 451, 452, 5, 36, 19, 2, 452, 453, 7, 73, 2, 2, 453, 455, 3,
	2, 2, 2, 454, 449, 3, 2, 2, 2, 454, 455, 3, 2, 2, 2, 455, 458, 3, 2, 2,
	2, 456, 459, 7, 79, 2, 2, 457, 459, 5, 110, 56, 2, 458, 456, 3, 2, 2, 2,
	458, 457, 3, 2, 2, 2, 459, 47, 3, 2, 2, 2, 460, 461, 7, 47, 2, 2, 461,
	467, 5, 96, 49, 2, 462, 464, 7, 72, 2, 2, 463, 465, 5, 36, 19, 2, 464,
	463, 3, 2, 2, 2, 464, 465, 3, 2, 2, 2, 465, 466, 3, 2, 2, 2, 466, 468,
	7, 73, 2, 2, 467, 462, 3, 2, 2, 2, 467, 468, 3, 2, 2, 2, 468, 478, 3, 2,
	2, 2, 469, 470, 6, 25, 9, 3, 470, 471, 7, 70, 2, 2, 471, 477, 8, 25, 1,
	2, 472, 473, 6, 25, 10, 3, 473, 474, 5, 44, 23, 2, 474, 475, 8, 25, 1,
	2, 475, 477, 3, 2, 2, 2, 476, 469, 3, 2, 2, 2, 476, 472, 3, 2, 2, 2, 477,
	480, 3, 2, 2, 2, 478, 476, 3, 2, 2, 2, 478, 479, 3, 2, 2, 2, 479, 483,
	3, 2, 2, 2, 480, 478, 3, 2, 2, 2, 481, 484, 7, 79, 2, 2, 482, 484, 5, 110,
	56, 2, 483, 481, 3, 2, 2, 2, 483, 482, 3, 2, 2, 2, 484, 49, 3, 2, 2, 2,
	485, 486, 7, 28, 2, 2, 486, 490, 7, 72, 2, 2, 487, 488, 5, 36, 19, 2, 488,
	489, 8, 26, 1, 2, 489, 491, 3, 2, 2, 2, 490, 487, 3, 2, 2, 2, 490, 491,
	3, 2, 2, 2, 491, 492, 3, 2, 2, 2, 492, 510, 7, 73, 2, 2, 493, 494, 6, 26,
	11, 3, 494, 495, 7, 27, 2, 2, 495, 509, 8, 26, 1, 2, 496, 497, 6, 26, 12,
	3, 497, 498, 5, 42, 22, 2, 498, 499, 8, 26, 1, 2, 499, 509, 3, 2, 2, 2,
	500, 509, 5, 32, 17, 2, 501, 502, 6, 26, 13, 3, 502, 503, 7, 70, 2, 2,
	503, 509, 8, 26, 1, 2, 504, 505, 6, 26, 14, 3, 505, 506, 5, 44, 23, 2,
	506, 507, 8, 26, 1, 2, 507, 509, 3, 2, 2, 2, 508, 493, 3, 2, 2, 2, 508,
	496, 3, 2, 2, 2, 508, 500, 3, 2, 2, 2, 508, 501, 3, 2, 2, 2, 508, 504,
	3, 2, 2, 2, 509, 512, 3, 2, 2, 2, 510, 508, 3, 2, 2, 2, 510, 511, 3, 2,
	2, 2, 511, 520, 3, 2, 2, 2, 512, 510, 3, 2, 2, 2, 513, 514, 6, 26, 15,
	3, 514, 515, 7, 57, 2, 2, 515, 516, 7, 72, 2, 2, 516, 517, 5, 36, 19, 2,
	517, 518, 7, 73, 2, 2, 518, 521, 3, 2, 2, 2, 519, 521, 6, 26, 16, 3, 520,
	513, 3, 2, 2, 2, 520, 519, 3, 2, 2, 2, 521, 524, 3, 2, 2, 2, 522, 525,
	7, 79, 2, 2, 523, 525, 5, 110, 56, 2, 524, 522, 3, 2, 2, 2, 524, 523, 3,
	2, 2, 2, 525, 51, 3, 2, 2, 2, 526, 527, 7, 55, 2, 2, 527, 528, 7, 72, 2,
	2, 528, 545, 7, 73, 2, 2, 529, 530, 6, 27, 17, 3, 530, 531, 7, 27, 2, 2,
	531, 544, 8, 27, 1, 2, 532, 533, 6, 27, 18, 3, 533, 534, 7, 51, 2, 2, 534,
	544, 8, 27, 1, 2, 535, 544, 5, 32, 17, 2, 536, 537, 6, 27, 19, 3, 537,
	538, 7, 70, 2, 2, 538, 544, 8, 27, 1, 2, 539, 540, 6, 27, 20, 3, 540, 541,
	5, 44, 23, 2, 541, 542, 8, 27, 1, 2, 542, 544, 3, 2, 2, 2, 543, 529, 3,
	2, 2, 2, 543, 532, 3, 2, 2, 2, 543, 535, 3, 2, 2, 2, 543, 536, 3, 2, 2,
	2, 543, 539, 3, 2, 2, 2, 544, 547, 3, 2, 2, 2, 545, 543, 3, 2, 2, 2, 545,
	546, 3, 2, 2, 2, 546, 550, 3, 2, 2, 2, 547, 545, 3, 2, 2, 2, 548, 551,
	7, 79, 2, 2, 549, 551, 5, 110, 56, 2, 550, 548, 3, 2, 2, 2, 550, 549, 3,
	2, 2, 2, 551, 53, 3, 2, 2, 2, 552, 553, 7, 61, 2, 2, 553, 554, 5, 96, 49,
	2, 554, 556, 7, 76, 2, 2, 555, 557, 5, 56, 29, 2, 556, 555, 3, 2, 2, 2,
	557, 558, 3, 2, 2, 2, 558, 556, 3, 2, 2, 2, 558, 559, 3, 2, 2, 2, 559,
	560, 3, 2, 2, 2, 560, 561, 7, 77, 2, 2, 561, 55, 3, 2, 2, 2, 562, 563,
	5, 76, 39, 2, 563, 564, 5, 96, 49, 2, 564, 565, 7, 79, 2, 2, 565, 57, 3,
	2, 2, 2, 566, 567, 7, 23, 2, 2, 567, 568, 5, 96, 49, 2, 568, 569, 7, 76,
	2, 2, 569, 574, 5, 96, 49, 2, 570, 571, 7, 96, 2, 2, 571, 573, 5, 96, 49,
	2, 572, 570, 3, 2, 2, 2, 573, 576, 3, 2, 2, 2, 574, 572, 3, 2, 2, 2, 574,
	575, 3, 2, 2, 2, 575, 577, 3, 2, 2, 2, 576, 574, 3, 2, 2, 2, 577, 578,
	7, 77, 2, 2, 578, 59, 3, 2, 2, 2, 579, 580, 7, 64, 2, 2, 580, 581, 5, 96,
	49, 2, 581, 582, 7, 43, 2, 2, 582, 583, 5, 78, 40, 2, 583, 584, 7, 79,
	2, 2, 584, 61, 3, 2, 2, 2, 585, 607, 5, 76, 39, 2, 586, 587, 6, 32, 21,
	3, 587, 588, 7, 53, 2, 2, 588, 606, 8, 32, 1, 2, 589, 590, 6, 32, 22, 3,
	590, 591, 7, 52, 2, 2, 591, 606, 8, 32, 1, 2, 592, 593, 6, 32, 23, 3, 593,
	594, 7, 42, 2, 2, 594, 606, 8, 32, 1, 2, 595, 596, 6, 32, 24, 3, 596, 597,
	7, 15, 2, 2, 597, 606, 8, 32, 1, 2, 598, 599, 6, 32, 25, 3, 599, 600, 5,
	44, 23, 2, 600, 601, 8, 32, 1, 2, 601, 606, 3, 2, 2, 2, 602, 603, 6, 32,
	26, 3, 603, 604, 7, 38, 2, 2, 604, 606, 8, 32, 1, 2, 605, 586, 3, 2, 2,
	2, 605, 589, 3, 2, 2, 2, 605, 592, 3, 2, 2, 2, 605, 595, 3, 2, 2, 2, 605,
	598, 3, 2, 2, 2, 605, 602, 3, 2, 2, 2, 606, 609, 3, 2, 2, 2, 607, 605,
	3, 2, 2, 2, 607, 608, 3, 2, 2, 2, 608, 610, 3, 2, 2, 2, 609, 607, 3, 2,
	2, 2, 610, 613, 5, 96, 49, 2, 611, 612, 7, 84, 2, 2, 612, 614, 5, 86, 44,
	2, 613, 611, 3, 2, 2, 2, 613, 614, 3, 2, 2, 2, 614, 615, 3, 2, 2, 2, 615,
	616, 7, 79, 2, 2, 616, 63, 3, 2, 2, 2, 617, 618, 5, 76, 39, 2, 618, 619,
	7, 15, 2, 2, 619, 620, 5, 96, 49, 2, 620, 621, 7, 84, 2, 2, 621, 622, 5,
	86, 44, 2, 622, 623, 7, 79, 2, 2, 623, 65, 3, 2, 2, 2, 624, 626, 5, 76,
	39, 2, 625, 627, 7, 40, 2, 2, 626, 625, 3, 2, 2, 2, 626, 627, 3, 2, 2,
	2, 627, 629, 3, 2, 2, 2, 628, 630, 5, 96, 49, 2, 629, 628, 3, 2, 2, 2,
	629, 630, 3, 2, 2, 2, 630, 67, 3, 2, 2, 2, 631, 632, 7, 26, 2, 2, 632,
	633, 5, 96, 49, 2, 633, 642, 7, 72, 2, 2, 634, 639, 5, 66, 34, 2, 635,
	636, 7, 96, 2, 2, 636, 638, 5, 66, 34, 2, 637, 635, 3, 2, 2, 2, 638, 641,
	3, 2, 2, 2, 639, 637, 3, 2, 2, 2, 639, 640, 3, 2, 2, 2, 640, 643, 3, 2,
	2, 2, 641, 639, 3, 2, 2, 2, 642, 634, 3, 2, 2, 2, 642, 643, 3, 2, 2, 2,
	643, 644, 3, 2, 2, 2, 644, 646, 7, 73, 2, 2, 645, 647, 7, 6, 2, 2, 646,
	645, 3, 2, 2, 2, 646, 647, 3, 2, 2, 2, 647, 648, 3, 2, 2, 2, 648, 649,
	7, 79, 2, 2, 649, 69, 3, 2, 2, 2, 650, 652, 5, 76, 39, 2, 651, 653, 5,
	96, 49, 2, 652, 651, 3, 2, 2, 2, 652, 653, 3, 2, 2, 2, 653, 71, 3, 2, 2,
	2, 654, 655, 7, 24, 2, 2, 655, 656, 5, 96, 49, 2, 656, 665, 7, 72, 2, 2,
	657, 662, 5, 70, 36, 2, 658, 659, 7, 96, 2, 2, 659, 661, 5, 70, 36, 2,
	660, 658, 3, 2, 2, 2, 661, 664, 3, 2, 2, 2, 662, 660, 3, 2, 2, 2, 662,
	663, 3, 2, 2, 2, 663, 666, 3, 2, 2, 2, 664, 662, 3, 2, 2, 2, 665, 657,
	3, 2, 2, 2, 665, 666, 3, 2, 2, 2, 666, 667, 3, 2, 2, 2, 667, 668, 7, 73,
	2, 2, 668, 669, 7, 79, 2, 2, 669, 73, 3, 2, 2, 2, 670, 683, 7, 68, 2, 2,
	671, 684, 5, 30, 16, 2, 672, 673, 7, 76, 2, 2, 673, 678, 5, 30, 16, 2,
	674, 675, 7, 96, 2, 2, 675, 677, 5, 30, 16, 2, 676, 674, 3, 2, 2, 2, 677,
	680, 3, 2, 2, 2, 678, 676, 3, 2, 2, 2, 678, 679, 3, 2, 2, 2, 679, 681,
	3, 2, 2, 2, 680, 678, 3, 2, 2, 2, 681, 682, 7, 77, 2, 2, 682, 684, 3, 2,
	2, 2, 683, 671, 3, 2, 2, 2, 683, 672, 3, 2, 2, 2, 684, 685, 3, 2, 2, 2,
	685, 688, 7, 33, 2, 2, 686, 689, 7, 107, 2, 2, 687, 689, 5, 76, 39, 2,
	688, 686, 3, 2, 2, 2, 688, 687, 3, 2, 2, 2, 689, 691, 3, 2, 2, 2, 690,
	692, 7, 35, 2, 2, 691, 690, 3, 2, 2, 2, 691, 692, 3, 2, 2, 2, 692, 693,
	3, 2, 2, 2, 693, 694, 7, 79, 2, 2, 694, 75, 3, 2, 2, 2, 695, 696, 8, 39,
	1, 2, 696, 701, 5, 78, 40, 2, 697, 701, 5, 80, 41, 2, 698, 701, 5, 152,
	77, 2, 699, 701, 5, 30, 16, 2, 700, 695, 3, 2, 2, 2, 700, 697, 3, 2, 2,
	2, 700, 698, 3, 2, 2, 2, 700, 699, 3, 2, 2, 2, 701, 710, 3, 2, 2, 2, 702,
	703, 12, 3, 2, 2, 703, 705, 7, 74, 2, 2, 704, 706, 5, 86, 44, 2, 705, 704,
	3, 2, 2, 2, 705, 706, 3, 2, 2, 2, 706, 707, 3, 2, 2, 2, 707, 709, 7, 75,
	2, 2, 708, 702, 3, 2, 2, 2, 709, 712, 3, 2, 2, 2, 710, 708, 3, 2, 2, 2,
	710, 711, 3, 2, 2, 2, 711, 77, 3, 2, 2, 2, 712, 710, 3, 2, 2, 2, 713, 726,
	7, 7, 2, 2, 714, 715, 6, 40, 28, 3, 715, 716, 7, 7, 2, 2, 716, 726, 7,
	51, 2, 2, 717, 726, 7, 10, 2, 2, 718, 726, 7, 60, 2, 2, 719, 726, 7, 12,
	2, 2, 720, 726, 7, 58, 2, 2, 721, 726, 7, 67, 2, 2, 722, 726, 7, 32, 2,
	2, 723, 726, 7, 30, 2, 2, 724, 726, 7, 65, 2, 2, 725, 713, 3, 2, 2, 2,
	725, 714, 3, 2, 2, 2, 725, 717, 3, 2, 2, 2, 725, 718, 3, 2, 2, 2, 725,
	719, 3, 2, 2, 2, 725, 720, 3, 2, 2, 2, 725, 721, 3, 2, 2, 2, 725, 722,
	3, 2, 2, 2, 725, 723, 3, 2, 2, 2, 725, 724, 3, 2, 2, 2, 726, 79, 3, 2,
	2, 2, 727, 728, 7, 34, 2, 2, 728, 730, 7, 72, 2, 2, 729, 731, 5, 36, 19,
	2, 730, 729, 3, 2, 2, 2, 730, 731, 3, 2, 2, 2, 731, 732, 3, 2, 2, 2, 732,
	743, 7, 73, 2, 2, 733, 734, 6, 41, 29, 3, 734, 735, 5, 34, 18, 2, 735,
	736, 8, 41, 1, 2, 736, 742, 3, 2, 2, 2, 737, 738, 6, 41, 30, 3, 738, 739,
	5, 42, 22, 2, 739, 740, 8, 41, 1, 2, 740, 742, 3, 2, 2, 2, 741, 733, 3,
	2, 2, 2, 741, 737, 3, 2, 2, 2, 742, 745, 3, 2, 2, 2, 743, 741, 3, 2, 2,
	2, 743, 744, 3, 2, 2, 2, 744, 751, 3, 2, 2, 2, 745, 743, 3, 2, 2, 2, 746,
	747, 7, 57, 2, 2, 747, 748, 7, 72, 2, 2, 748, 749, 5, 36, 19, 2, 749, 750,
	7, 73, 2, 2, 750, 752, 3, 2, 2, 2, 751, 746, 3, 2, 2, 2, 751, 752, 3, 2,
	2, 2, 752, 81, 3, 2, 2, 2, 753, 755, 5, 76, 39, 2, 754, 756, 5, 84, 43,
	2, 755, 754, 3, 2, 2, 2, 755, 756, 3, 2, 2, 2, 756, 757, 3, 2, 2, 2, 757,
	758, 5, 96, 49, 2, 758, 83, 3, 2, 2, 2, 759, 760, 9, 4, 2, 2, 760, 85,
	3, 2, 2, 2, 761, 762, 8, 44, 1, 2, 762, 763, 7, 51, 2, 2, 763, 780, 5,
	28, 15, 2, 764, 765, 7, 64, 2, 2, 765, 766, 7, 72, 2, 2, 766, 767, 5, 76,
	39, 2, 767, 768, 7, 73, 2, 2, 768, 780, 3, 2, 2, 2, 769, 770, 9, 5, 2,
	2, 770, 780, 5, 86, 44, 21, 771, 780, 5, 88, 45, 2, 772, 780, 5, 92, 47,
	2, 773, 780, 5, 94, 48, 2, 774, 778, 5, 96, 49, 2, 775, 778, 5, 98, 50,
	2, 776, 778, 5, 78, 40, 2, 777, 774, 3, 2, 2, 2, 777, 775, 3, 2, 2, 2,
	777, 776, 3, 2, 2, 2, 778, 780, 3, 2, 2, 2, 779, 761, 3, 2, 2, 2, 779,
	764, 3, 2, 2, 2, 779, 769, 3, 2, 2, 2, 779, 771, 3, 2, 2, 2, 779, 772,
	3, 2, 2, 2, 779, 773, 3, 2, 2, 2, 779, 777, 3, 2, 2, 2, 780, 865, 3, 2,
	2, 2, 781, 782, 12, 19, 2, 2, 782, 783, 7, 110, 2, 2, 783, 864, 5, 86,
	44, 19, 784, 785, 12, 18, 2, 2, 785, 786, 9, 6, 2, 2, 786, 864, 5, 86,
	44, 19, 787, 788, 12, 17, 2, 2, 788, 789, 9, 7, 2, 2, 789, 864, 5, 86,
	44, 18, 790, 791, 12, 16, 2, 2, 791, 792, 9, 8, 2, 2, 792, 864, 5, 86,
	44, 17, 793, 794, 12, 15, 2, 2, 794, 795, 7, 101, 2, 2, 795, 864, 5, 86,
	44, 16, 796, 797, 12, 14, 2, 2, 797, 798, 7, 100, 2, 2, 798, 864, 5, 86,
	44, 15, 799, 800, 12, 13, 2, 2, 800, 801, 7, 99, 2, 2, 801, 864, 5, 86,
	44, 14, 802, 803, 12, 12, 2, 2, 803, 804, 9, 9, 2, 2, 804, 864, 5, 86,
	44, 13, 805, 806, 12, 11, 2, 2, 806, 807, 9, 10, 2, 2, 807, 864, 5, 86,
	44, 12, 808, 809, 12, 10, 2, 2, 809, 810, 7, 98, 2, 2, 810, 864, 5, 86,
	44, 11, 811, 812, 12, 9, 2, 2, 812, 813, 7, 97, 2, 2, 813, 864, 5, 86,
	44, 10, 814, 815, 12, 8, 2, 2, 815, 816, 7, 81, 2, 2, 816, 817, 5, 86,
	44, 2, 817, 818, 7, 78, 2, 2, 818, 819, 5, 86, 44, 8, 819, 864, 3, 2, 2,
	2, 820, 821, 12, 7, 2, 2, 821, 822, 5, 90, 46, 2, 822, 823, 5, 86, 44,
	7, 823, 864, 3, 2, 2, 2, 824, 825, 12, 28, 2, 2, 825, 827, 7, 74, 2, 2,
	826, 828, 5, 86, 44, 2, 827, 826, 3, 2, 2, 2, 827, 828, 3, 2, 2, 2, 828,
	829, 3, 2, 2, 2, 829, 864, 7, 75, 2, 2, 830, 831, 12, 27, 2, 2, 831, 833,
	7, 74, 2, 2, 832, 834, 5, 86, 44, 2, 833, 832, 3, 2, 2, 2, 833, 834, 3,
	2, 2, 2, 834, 835, 3, 2, 2, 2, 835, 837, 7, 78, 2, 2, 836, 838, 5, 86,
	44, 2, 837, 836, 3, 2, 2, 2, 837, 838, 3, 2, 2, 2, 838, 839, 3, 2, 2, 2,
	839, 864, 7, 75, 2, 2, 840, 841, 12, 26, 2, 2, 841, 844, 7, 80, 2, 2, 842,
	845, 5, 96, 49, 2, 843, 845, 7, 7, 2, 2, 844, 842, 3, 2, 2, 2, 844, 843,
	3, 2, 2, 2, 845, 864, 3, 2, 2, 2, 846, 847, 12, 25, 2, 2, 847, 856, 7,
	76, 2, 2, 848, 853, 5, 26, 14, 2, 849, 850, 7, 96, 2, 2, 850, 852, 5, 26,
	14, 2, 851, 849, 3, 2, 2, 2, 852, 855, 3, 2, 2, 2, 853, 851, 3, 2, 2, 2,
	853, 854, 3, 2, 2, 2, 854, 857, 3, 2, 2, 2, 855, 853, 3, 2, 2, 2, 856,
	848, 3, 2, 2, 2, 856, 857, 3, 2, 2, 2, 857, 858, 3, 2, 2, 2, 858, 864,
	7, 77, 2, 2, 859, 860, 12, 24, 2, 2, 860, 864, 5, 28, 15, 2, 861, 862,
	12, 20, 2, 2, 862, 864, 9, 11, 2, 2, 863, 781, 3, 2, 2, 2, 863, 784, 3,
	2, 2, 2, 863, 787, 3, 2, 2, 2, 863, 790, 3, 2, 2, 2, 863, 793, 3, 2, 2,
	2, 863, 796, 3, 2, 2, 2, 863, 799, 3, 2, 2, 2, 863, 802, 3, 2, 2, 2, 863,
	805, 3, 2, 2, 2, 863, 808, 3, 2, 2, 2, 863, 811, 3, 2, 2, 2, 863, 814,
	3, 2, 2, 2, 863, 820, 3, 2, 2, 2, 863, 824, 3, 2, 2, 2, 863, 830, 3, 2,
	2, 2, 863, 840, 3, 2, 2, 2, 863, 846, 3, 2, 2, 2, 863, 859, 3, 2, 2, 2,
	863, 861, 3, 2, 2, 2, 864, 867, 3, 2, 2, 2, 865, 863, 3, 2, 2, 2, 865,
	866, 3, 2, 2, 2, 866, 87, 3, 2, 2, 2, 867, 865, 3, 2, 2, 2, 868, 869, 7,
	48, 2, 2, 869, 870, 5, 76, 39, 2, 870, 89, 3, 2, 2, 2, 871, 872, 9, 12,
	2, 2, 872, 91, 3, 2, 2, 2, 873, 875, 7, 72, 2, 2, 874, 876, 5, 86, 44,
	2, 875, 874, 3, 2, 2, 2, 875, 876, 3, 2, 2, 2, 876, 883, 3, 2, 2, 2, 877,
	879, 7, 96, 2, 2, 878, 880, 5, 86, 44, 2, 879, 878, 3, 2, 2, 2, 879, 880,
	3, 2, 2, 2, 880, 882, 3, 2, 2, 2, 881, 877, 3, 2, 2, 2, 882, 885, 3, 2,
	2, 2, 883, 881, 3, 2, 2, 2, 883, 884, 3, 2, 2, 2, 884, 886, 3, 2, 2, 2,
	885, 883, 3, 2, 2, 2, 886, 887, 7, 73, 2, 2, 887, 93, 3, 2, 2, 2, 888,
	889, 7, 74, 2, 2, 889, 894, 5, 86, 44, 2, 890, 891, 7, 96, 2, 2, 891, 893,
	5, 86, 44, 2, 892, 890, 3, 2, 2, 2, 893, 896, 3, 2, 2, 2, 894, 892, 3,
	2, 2, 2, 894, 895, 3, 2, 2, 2, 895, 897, 3, 2, 2, 2, 896, 894, 3, 2, 2,
	2, 897, 898, 7, 75, 2, 2, 898, 95, 3, 2, 2, 2, 899, 900, 9, 13, 2, 2, 900,
	97, 3, 2, 2, 2, 901, 907, 5, 102, 52, 2, 902, 907, 5, 108, 55, 2, 903,
	907, 5, 100, 51, 2, 904, 907, 5, 104, 53, 2, 905, 907, 5, 106, 54, 2, 906,
	901, 3, 2, 2, 2, 906, 902, 3, 2, 2, 2, 906, 903, 3, 2, 2, 2, 906, 904,
	3, 2, 2, 2, 906, 905, 3, 2, 2, 2, 907, 99, 3, 2, 2, 2, 908, 909, 9, 14,
	2, 2, 909, 101, 3, 2, 2, 2, 910, 912, 9, 15, 2, 2, 911, 910, 3, 2, 2, 2,
	912, 913, 3, 2, 2, 2, 913, 911, 3, 2, 2, 2, 913, 914, 3, 2, 2, 2, 914,
	103, 3, 2, 2, 2, 915, 917, 7, 126, 2, 2, 916, 915, 3, 2, 2, 2, 917, 918,
	3, 2, 2, 2, 918, 916, 3, 2, 2, 2, 918, 919, 3, 2, 2, 2, 919, 105, 3, 2,
	2, 2, 920, 922, 7, 125, 2, 2, 921, 920, 3, 2, 2, 2, 922, 923, 3, 2, 2,
	2, 923, 921, 3, 2, 2, 2, 923, 924, 3, 2, 2, 2, 924, 107, 3, 2, 2, 2, 925,
	927, 9, 16, 2, 2, 926, 928, 7, 49, 2, 2, 927, 926, 3, 2, 2, 2, 927, 928,
	3, 2, 2, 2, 928, 109, 3, 2, 2, 2, 929, 934, 7, 76, 2, 2, 930, 933, 5, 114,
	58, 2, 931, 933, 5, 112, 57, 2, 932, 930, 3, 2, 2, 2, 932, 931, 3, 2, 2,
	2, 933, 936, 3, 2, 2, 2, 934, 932, 3, 2, 2, 2, 934, 935, 3, 2, 2, 2, 935,
	937, 3, 2, 2, 2, 936, 934, 3, 2, 2, 2, 937, 938, 7, 77, 2, 2, 938, 111,
	3, 2, 2, 2, 939, 940, 7, 66, 2, 2, 940, 941, 5, 110, 56, 2, 941, 113, 3,
	2, 2, 2, 942, 956, 5, 110, 56, 2, 943, 956, 5, 116, 59, 2, 944, 956, 5,
	118, 60, 2, 945, 956, 5, 120, 61, 2, 946, 956, 5, 122, 62, 2, 947, 956,
	5, 124, 63, 2, 948, 956, 5, 126, 64, 2, 949, 956, 5, 128, 65, 2, 950, 956,
	5, 130, 66, 2, 951, 956, 5, 134, 68, 2, 952, 956, 5, 136, 69, 2, 953, 956,
	5, 138, 70, 2, 954, 956, 5, 140, 71, 2, 955, 942, 3, 2, 2, 2, 955, 943,
	3, 2, 2, 2, 955, 944, 3, 2, 2, 2, 955, 945, 3, 2, 2, 2, 955, 946, 3, 2,
	2, 2, 955, 947, 3, 2, 2, 2, 955, 948, 3, 2, 2, 2, 955, 949, 3, 2, 2, 2,
	955, 950, 3, 2, 2, 2, 955, 951, 3, 2, 2, 2, 955, 952, 3, 2, 2, 2, 955,
	953, 3, 2, 2, 2, 955, 954, 3, 2, 2, 2, 956, 115, 3, 2, 2, 2, 957, 960,
	5, 148, 75, 2, 958, 960, 5, 150, 76, 2, 959, 957, 3, 2, 2, 2, 959, 958,
	3, 2, 2, 2, 960, 117, 3, 2, 2, 2, 961, 962, 7, 37, 2, 2, 962, 963, 7, 72,
	2, 2, 963, 964, 5, 86, 44, 2, 964, 965, 7, 73, 2, 2, 965, 968, 5, 114,
	58, 2, 966, 967, 7, 21, 2, 2, 967, 969, 5, 114, 58, 2, 968, 966, 3, 2,
	2, 2, 968, 969, 3, 2, 2, 2, 969, 119, 3, 2, 2, 2, 970, 971, 7, 33, 2, 2,
	971, 974, 7, 72, 2, 2, 972, 975, 5, 116, 59, 2, 973, 975, 7, 79, 2, 2,
	974, 972, 3, 2, 2, 2, 974, 973, 3, 2, 2, 2, 975, 978, 3, 2, 2, 2, 976,
	979, 5, 150, 76, 2, 977, 979, 7, 79, 2, 2, 978, 976, 3, 2, 2, 2, 978, 977,
	3, 2, 2, 2, 979, 981, 3, 2, 2, 2, 980, 982, 5, 86, 44, 2, 981, 980, 3,
	2, 2, 2, 981, 982, 3, 2, 2, 2, 982, 983, 3, 2, 2, 2, 983, 984, 7, 73, 2,
	2, 984, 985, 5, 114, 58, 2, 985, 121, 3, 2, 2, 2, 986, 987, 7, 71, 2, 2,
	987, 988, 7, 72, 2, 2, 988, 989, 5, 86, 44, 2, 989, 990, 7, 73, 2, 2, 990,
	991, 5, 114, 58, 2, 991, 123, 3, 2, 2, 2, 992, 993, 7, 20, 2, 2, 993, 994,
	5, 114, 58, 2, 994, 995, 7, 71, 2, 2, 995, 996, 7, 72, 2, 2, 996, 997,
	5, 86, 44, 2, 997, 998, 7, 73, 2, 2, 998, 999, 7, 79, 2, 2, 999, 125, 3,
	2, 2, 2, 1000, 1001, 7, 17, 2, 2, 1001, 1002, 7, 79, 2, 2, 1002, 127, 3,
	2, 2, 2, 1003, 1004, 7, 11, 2, 2, 1004, 1005, 7, 79, 2, 2, 1005, 129, 3,
	2, 2, 2, 1006, 1007, 7, 63, 2, 2, 1007, 1013, 5, 86, 44, 2, 1008, 1009,
	7, 57, 2, 2, 1009, 1010, 7, 72, 2, 2, 1010, 1011, 5, 36, 19, 2, 1011, 1012,
	7, 73, 2, 2, 1012, 1014, 3, 2, 2, 2, 1013, 1008, 3, 2, 2, 2, 1013, 1014,
	3, 2, 2, 2, 1014, 1015, 3, 2, 2, 2, 1015, 1017, 5, 110, 56, 2, 1016, 1018,
	5, 132, 67, 2, 1017, 1016, 3, 2, 2, 2, 1018, 1019, 3, 2, 2, 2, 1019, 1017,
	3, 2, 2, 2, 1019, 1020, 3, 2, 2, 2, 1020, 131, 3, 2, 2, 2, 1021, 1029,
	7, 14, 2, 2, 1022, 1024, 5, 96, 49, 2, 1023, 1022, 3, 2, 2, 2, 1023, 1024,
	3, 2, 2, 2, 1024, 1025, 3, 2, 2, 2, 1025, 1026, 7, 72, 2, 2, 1026, 1027,
	5, 36, 19, 2, 1027, 1028, 7, 73, 2, 2, 1028, 1030, 3, 2, 2, 2, 1029, 1023,
	3, 2, 2, 2, 1029, 1030, 3, 2, 2, 2, 1030, 1031, 3, 2, 2, 2, 1031, 1032,
	5, 110, 56, 2, 1032, 133, 3, 2, 2, 2, 1033, 1035, 7, 56, 2, 2, 1034, 1036,
	5, 86, 44, 2, 1035, 1034, 3, 2, 2, 2, 1035, 1036, 3, 2, 2, 2, 1036, 1037,
	3, 2, 2, 2, 1037, 1038, 7, 79, 2, 2, 1038, 135, 3, 2, 2, 2, 1039, 1040,
	7, 22, 2, 2, 1040, 1041, 5, 86, 44, 2, 1041, 1042, 5, 28, 15, 2, 1042,
	1043, 7, 79, 2, 2, 1043, 137, 3, 2, 2, 2, 1044, 1045, 7, 25, 2, 2, 1045,
	1046, 5, 86, 44, 2, 1046, 1047, 5, 28, 15, 2, 1047, 1048, 7, 79, 2, 2,
	1048, 139, 3, 2, 2, 2, 1049, 1051, 7, 9, 2, 2, 1050, 1052, 7, 133, 2, 2,
	1051, 1050, 3, 2, 2, 2, 1051, 1052, 3, 2, 2, 2, 1052, 1054, 3, 2, 2, 2,
	1053, 1055, 5, 142, 72, 2, 1054, 1053, 3, 2, 2, 2, 1054, 1055, 3, 2, 2,
	2, 1055, 1056, 3, 2, 2, 2, 1056, 1060, 7, 134, 2, 2, 1057, 1059, 5, 156,
	79, 2, 1058, 1057, 3, 2, 2, 2, 1059, 1062, 3, 2, 2, 2, 1060, 1058, 3, 2,
	2, 2, 1060, 1061, 3, 2, 2, 2, 1061, 1063, 3, 2, 2, 2, 1062, 1060, 3, 2,
	2, 2, 1063, 1064, 7, 157, 2, 2, 1064, 141, 3, 2, 2, 2, 1065, 1066, 7, 136,
	2, 2, 1066, 1071, 7, 135, 2, 2, 1067, 1068, 7, 138, 2, 2, 1068, 1070, 7,
	135, 2, 2, 1069, 1067, 3, 2, 2, 2, 1070, 1073, 3, 2, 2, 2, 1071, 1069,
	3, 2, 2, 2, 1071, 1072, 3, 2, 2, 2, 1072, 1074, 3, 2, 2, 2, 1073, 1071,
	3, 2, 2, 2, 1074, 1075, 7, 137, 2, 2, 1075, 143, 3, 2, 2, 2, 1076, 1081,
	5, 82, 42, 2, 1077, 1078, 7, 96, 2, 2, 1078, 1080, 5, 82, 42, 2, 1079,
	1077, 3, 2, 2, 2, 1080, 1083, 3, 2, 2, 2, 1081, 1079, 3, 2, 2, 2, 1081,
	1082, 3, 2, 2, 2, 1082, 145, 3, 2, 2, 2, 1083, 1081, 3, 2, 2, 2, 1084,
	1088, 7, 72, 2, 2, 1085, 1087, 7, 96, 2, 2, 1086, 1085, 3, 2, 2, 2, 1087,
	1090, 3, 2, 2, 2, 1088, 1086, 3, 2, 2, 2, 1088, 1089, 3, 2, 2, 2, 1089,
	1091, 3, 2, 2, 2, 1090, 1088, 3, 2, 2, 2, 1091, 1092, 5, 82, 42, 2, 1092,
	1099, 3, 2, 2, 2, 1093, 1095, 7, 96, 2, 2, 1094, 1096, 5, 82, 42, 2, 1095,
	1094, 3, 2, 2, 2, 1095, 1096, 3, 2, 2, 2, 1096, 1098, 3, 2, 2, 2, 1097,
	1093, 3, 2, 2, 2, 1098, 1101, 3, 2, 2, 2, 1099, 1097, 3, 2, 2, 2, 1099,
	1100, 3, 2, 2, 2, 1100, 1102, 3, 2, 2, 2, 1101, 1099, 3, 2, 2, 2, 1102,
	1103, 7, 73, 2, 2, 1103, 147, 3, 2, 2, 2, 1104, 1107, 5, 82, 42, 2, 1105,
	1106, 7, 84, 2, 2, 1106, 1108, 5, 86, 44, 2, 1107, 1105, 3, 2, 2, 2, 1107,
	1108, 3, 2, 2, 2, 1108, 1114, 3, 2, 2, 2, 1109, 1110, 5, 146, 74, 2, 1110,
	1111, 7, 84, 2, 2, 1111, 1112, 5, 86, 44, 2, 1112, 1114, 3, 2, 2, 2, 1113,
	1104, 3, 2, 2, 2, 1113, 1109, 3, 2, 2, 2, 1114, 1115, 3, 2, 2, 2, 1115,
	1116, 7, 79, 2, 2, 1116, 149, 3, 2, 2, 2, 1117, 1118, 5, 86, 44, 2, 1118,
	1119, 7, 79, 2, 2, 1119, 151, 3, 2, 2, 2, 1120, 1121, 7, 45, 2, 2, 1121,
	1122, 7, 72, 2, 2, 1122, 1123, 5, 154, 78, 2, 1123, 1124, 7, 82, 2, 2,
	1124, 1125, 5, 76, 39, 2, 1125, 1126, 7, 73, 2, 2, 1126, 153, 3, 2, 2,
	2, 1127, 1130, 5, 78, 40, 2, 1128, 1130, 5, 30, 16, 2, 1129, 1127, 3, 2,
	2, 2, 1129, 1128, 3, 2, 2, 2, 1130, 155, 3, 2, 2, 2, 1131, 1143, 5, 158,
	80, 2, 1132, 1143, 5, 160, 81, 2, 1133, 1143, 5, 162, 82, 2, 1134, 1143,
	5, 176, 89, 2, 1135, 1143, 5, 164, 83, 2, 1136, 1143, 5, 166, 84, 2, 1137,
	1143, 5, 170, 86, 2, 1138, 1143, 7, 150, 2, 2, 1139, 1143, 7, 142, 2, 2,
	1140, 1143, 7, 144, 2, 2, 1141, 1143, 5, 172, 87, 2, 1142, 1131, 3, 2,
	2, 2, 1142, 1132, 3, 2, 2, 2, 1142, 1133, 3, 2, 2, 2, 1142, 1134, 3, 2,
	2, 2, 1142, 1135, 3, 2, 2, 2, 1142, 1136, 3, 2, 2, 2, 1142, 1137, 3, 2,
	2, 2, 1142, 1138, 3, 2, 2, 2, 1142, 1139, 3, 2, 2, 2, 1142, 1140, 3, 2,
	2, 2, 1142, 1141, 3, 2, 2, 2, 1143, 157, 3, 2, 2, 2, 1144, 1148, 7, 156,
	2, 2, 1145, 1147, 5, 156, 79, 2, 1146, 1145, 3, 2, 2, 2, 1147, 1150, 3,
	2, 2, 2, 1148, 1146, 3, 2, 2, 2, 1148, 1149, 3, 2, 2, 2, 1149, 1151, 3,
	2, 2, 2, 1150, 1148, 3, 2, 2, 2, 1151, 1152, 7, 157, 2, 2, 1152, 159, 3,
	2, 2, 2, 1153, 1154, 7, 151, 2, 2, 1154, 1157, 7, 164, 2, 2, 1155, 1156,
	7, 160, 2, 2, 1156, 1158, 5, 182, 92, 2, 1157, 1155, 3, 2, 2, 2, 1157,
	1158, 3, 2, 2, 2, 1158, 1173, 3, 2, 2, 2, 1159, 1160, 7, 151, 2, 2, 1160,
	1165, 7, 164, 2, 2, 1161, 1162, 7, 162, 2, 2, 1162, 1164, 7, 164, 2, 2,
	1163, 1161, 3, 2, 2, 2, 1164, 1167, 3, 2, 2, 2, 1165, 1163, 3, 2, 2, 2,
	1165, 1166, 3, 2, 2, 2, 1166, 1170, 3, 2, 2, 2, 1167, 1165, 3, 2, 2, 2,
	1168, 1169, 7, 160, 2, 2, 1169, 1171, 5, 176, 89, 2, 1170, 1168, 3, 2,
	2, 2, 1170, 1171, 3, 2, 2, 2, 1171, 1173, 3, 2, 2, 2, 1172, 1153, 3, 2,
	2, 2, 1172, 1159, 3, 2, 2, 2, 1173, 161, 3, 2, 2, 2, 1174, 1175, 5, 174,
	88, 2, 1175, 1176, 7, 160, 2, 2, 1176, 1177, 5, 182, 92, 2, 1177, 1189,
	3, 2, 2, 2, 1178, 1181, 5, 174, 88, 2, 1179, 1180, 7, 162, 2, 2, 1180,
	1182, 5, 174, 88, 2, 1181, 1179, 3, 2, 2, 2, 1182, 1183, 3, 2, 2, 2, 1183,
	1181, 3, 2, 2, 2, 1183, 1184, 3, 2, 2, 2, 1184, 1185, 3, 2, 2, 2, 1185,
	1186, 7, 160, 2, 2, 1186, 1187, 5, 176, 89, 2, 1187, 1189, 3, 2, 2, 2,
	1188, 1174, 3, 2, 2, 2, 1188, 1178, 3, 2, 2, 2, 1189, 163, 3, 2, 2, 2,
	1190, 1191, 7, 149, 2, 2, 1191, 1192, 5, 182, 92, 2, 1192, 1193, 5, 158,
	80, 2, 1193, 165, 3, 2, 2, 2, 1194, 1195, 7, 147, 2, 2, 1195, 1196, 5,
	158, 80, 2, 1196, 1197, 5, 182, 92, 2, 1197, 1198, 5, 158, 80, 2, 1198,
	1199, 5, 158, 80, 2, 1199, 167, 3, 2, 2, 2, 1200, 1201, 7, 143, 2, 2, 1201,
	1202, 5, 180, 91, 2, 1202, 1203, 5, 158, 80, 2, 1203, 169, 3, 2, 2, 2,
	1204, 1205, 7, 152, 2, 2, 1205, 1217, 5, 182, 92, 2, 1206, 1208, 5, 168,
	85, 2, 1207, 1206, 3, 2, 2, 2, 1208, 1209, 3, 2, 2, 2, 1209, 1207, 3, 2,
	2, 2, 1209, 1210, 3, 2, 2, 2, 1210, 1213, 3, 2, 2, 2, 1211, 1212, 7, 145,
	2, 2, 1212, 1214, 5, 158, 80, 2, 1213, 1211, 3, 2, 2, 2, 1213, 1214, 3,
	2, 2, 2, 1214, 1218, 3, 2, 2, 2, 1215, 1216, 7, 145, 2, 2, 1216, 1218,
	5, 158, 80, 2, 1217, 1207, 3, 2, 2, 2, 1217, 1215, 3, 2, 2, 2, 1218, 171,
	3, 2, 2, 2, 1219, 1220, 7, 148, 2, 2, 1220, 1221, 7, 164, 2, 2, 1221, 1230,
	7, 158, 2, 2, 1222, 1227, 7, 164, 2, 2, 1223, 1224, 7, 162, 2, 2, 1224,
	1226, 7, 164, 2, 2, 1225, 1223, 3, 2, 2, 2, 1226, 1229, 3, 2, 2, 2, 1227,
	1225, 3, 2, 2, 2, 1227, 1228, 3, 2, 2, 2, 1228, 1231, 3, 2, 2, 2, 1229,
	1227, 3, 2, 2, 2, 1230, 1222, 3, 2, 2, 2, 1230, 1231, 3, 2, 2, 2, 1231,
	1232, 3, 2, 2, 2, 1232, 1242, 7, 159, 2, 2, 1233, 1234, 7, 163, 2, 2, 1234,
	1239, 7, 164, 2, 2, 1235, 1236, 7, 162, 2, 2, 1236, 1238, 7, 164, 2, 2,
	1237, 1235, 3, 2, 2, 2, 1238, 1241, 3, 2, 2, 2, 1239, 1237, 3, 2, 2, 2,
	1239, 1240, 3, 2, 2, 2, 1240, 1243, 3, 2, 2, 2, 1241, 1239, 3, 2, 2, 2,
	1242, 1233, 3, 2, 2, 2, 1242, 1243, 3, 2, 2, 2, 1243, 1244, 3, 2, 2, 2,
	1244, 1245, 5, 158, 80, 2, 1245, 173, 3, 2, 2, 2, 1246, 1251, 7, 164, 2,
	2, 1247, 1248, 7, 161, 2, 2, 1248, 1250, 9, 17, 2, 2, 1249, 1247, 3, 2,
	2, 2, 1250, 1253, 3, 2, 2, 2, 1251, 1249, 3, 2, 2, 2, 1251, 1252, 3, 2,
	2, 2, 1252, 175, 3, 2, 2, 2, 1253, 1251, 3, 2, 2, 2, 1254, 1255, 9, 17,
	2, 2, 1255, 1264, 7, 158, 2, 2, 1256, 1261, 5, 182, 92, 2, 1257, 1258,
	7, 162, 2, 2, 1258, 1260, 5, 182, 92, 2, 1259, 1257, 3, 2, 2, 2, 1260,
	1263, 3, 2, 2, 2, 1261, 1259, 3, 2, 2, 2, 1261, 1262, 3, 2, 2, 2, 1262,
	1265, 3, 2, 2, 2, 1263, 1261, 3, 2, 2, 2, 1264, 1256, 3, 2, 2, 2, 1264,
	1265, 3, 2, 2, 2, 1265, 1266, 3, 2, 2, 2, 1266, 1267, 7, 159, 2, 2, 1267,
	177, 3, 2, 2, 2, 1268, 1269, 9, 18, 2, 2, 1269, 179, 3, 2, 2, 2, 1270,
	1276, 7, 166, 2, 2, 1271, 1276, 7, 167, 2, 2, 1272, 1276, 7, 165, 2, 2,
	1273, 1276, 5, 178, 90, 2, 1274, 1276, 7, 168, 2, 2, 1275, 1270, 3, 2,
	2, 2, 1275, 1271, 3, 2, 2, 2, 1275, 1272, 3, 2, 2, 2, 1275, 1273, 3, 2,
	2, 2, 1275, 1274, 3, 2, 2, 2, 1276, 181, 3, 2, 2, 2, 1277, 1281, 5, 174,
	88, 2, 1278, 1281, 5, 176, 89, 2, 1279, 1281, 5, 180, 91, 2, 1280, 1277,
	3, 2, 2, 2, 1280, 1278, 3, 2, 2, 2, 1280, 1279, 3, 2, 2, 2, 1281, 183,
	3, 2, 2, 2, 141, 196, 198, 207, 215, 227, 234, 244, 250, 255, 261, 269,
	275, 286, 297, 302, 316, 328, 331, 339, 342, 345, 354, 359, 368, 373, 376,
	381, 394, 396, 410, 415, 421, 425, 444, 446, 454, 458, 464, 467, 476, 478,
	483, 490, 508, 510, 520, 524, 543, 545, 550, 558, 574, 605, 607, 613, 626,
	629, 639, 642, 646, 652, 662, 665, 678, 683, 688, 691, 700, 705, 710, 725,
	730, 741, 743, 751, 755, 777, 779, 827, 833, 837, 844, 853, 856, 863, 865,
	875, 879, 883, 894, 906, 913, 918, 923, 927, 932, 934, 955, 959, 968, 974,
	978, 981, 1013, 1019, 1023, 1029, 1035, 1051, 1054, 1060, 1071, 1081, 1088,
	1095, 1099, 1107, 1113, 1129, 1142, 1148, 1157, 1165, 1170, 1172, 1183,
	1188, 1209, 1213, 1217, 1227, 1230, 1239, 1242, 1251, 1261, 1264, 1275,
	1280,
}
var literalNames = []string{
	"", "", "'pragma'", "'abstract'", "'anonymous'", "'address'", "'as'", "'assembly'",
	"'bool'", "", "'bytes'", "'calldata'", "'catch'", "'constant'", "'constructor'",
	"", "'contract'", "'delete'", "'do'", "'else'", "'emit'", "'enum'", "'error'",
	"'revert'", "'event'", "'external'", "'fallback'", "", "", "'from'", "",
	"", "", "'global'", "", "", "'immutable'", "'import'", "'indexed'", "'interface'",
	"'internal'", "'is'", "'library'", "'mapping'", "'memory'", "'modifier'",
	"'new'", "", "'override'", "'payable'", "'private'", "'public'", "'pure'",
	"'receive'", "'return'", "'returns'", "", "'storage'", "'string'", "'struct'",
	"", "'try'", "'type'", "", "'unchecked'", "", "'using'", "'view'", "'virtual'",
	"'while'", "", "", "'['", "']'", "", "", "':'", "", "", "'?'", "'=>'",
	"", "'='", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'>>>='", "'+='",
	"'-='", "'*='", "'/='", "'%='", "", "'||'", "'&&'", "'|'", "'^'", "'&'",
	"'<<'", "'>>'", "'>>>'", "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'=='",
	"'!='", "'<'", "'>'", "'<='", "'>='", "'!'", "'~'", "'++'", "'--'", "'\"'",
	"'''", "", "", "", "", "", "", "", "", "", "", "'\"evmasm\"'", "", "",
	"", "", "", "", "", "", "", "'case'", "", "'default'", "", "", "", "",
	"'leave'", "'let'", "'switch'", "", "", "", "", "", "", "", "':='",
}
var symbolicNames = []string{
	"", "ReservedKeywords", "Pragma", "Abstract", "Anonymous", "Address", "As",
	"Assembly", "Bool", "Break", "Bytes", "Calldata", "Catch", "Constant",
	"Constructor", "Continue", "Contract", "Delete", "Do", "Else", "Emit",
	"Enum", "Error", "Revert", "Event", "External", "Fallback", "False", "Fixed",
	"From", "FixedBytes", "For", "Function", "Global", "Hex", "If", "Immutable",
	"Import", "Indexed", "Interface", "Internal", "Is", "Library", "Mapping",
	"Memory", "Modifier", "New", "NumberUnit", "Override", "Payable", "Private",
	"Public", "Pure", "Receive", "Return", "Returns", "SignedIntegerType",
	"Storage", "StringLiteral", "Struct", "True", "Try", "Type", "Ufixed",
	"Unchecked", "UnsignedIntegerType", "Using", "View", "Virtual", "While",
	"LParen", "RParen", "LBrack", "RBrack", "LBrace", "RBrace", "Colon", "Semicolon",
	"Period", "Conditional", "DoubleArrow", "RightArrow", "Assign", "AssignBitOr",
	"AssignBitXor", "AssignBitAnd", "AssignShl", "AssignSar", "AssignShr",
	"AssignAdd", "AssignSub", "AssignMul", "AssignDiv", "AssignMod", "Comma",
	"Or", "And", "BitOr", "BitXor", "BitAnd", "Shl", "Sar", "Shr", "Add", "Sub",
	"Mul", "Div", "Mod", "Exp", "Equal", "NotEqual", "LessThan", "GreaterThan",
	"LessThanOrEqual", "GreaterThanOrEqual", "Not", "BitNot", "Inc", "Dec",
	"DoubleQuote", "SingleQuote", "NonEmptyStringLiteral", "EmptyStringLiteral",
	"UnicodeStringLiteral", "HexString", "HexNumber", "DecimalNumber", "Identifier",
	"WS", "COMMENT", "LINE_COMMENT", "AssemblyDialect", "AssemblyLBrace", "AssemblyFlagString",
	"AssemblyBlockLParen", "AssemblyBlockRParen", "AssemblyBlockComma", "AssemblyBlockWS",
	"AssemblyBlockCOMMENT", "AssemblyBlockLINE_COMMENT", "YulBreak", "YulCase",
	"YulContinue", "YulDefault", "YulFalse", "YulFor", "YulFunction", "YulIf",
	"YulLeave", "YulLet", "YulSwitch", "YulTrue", "YulHex", "YulEVMBuiltin",
	"YulLBrace", "YulRBrace", "YulLParen", "YulRParen", "YulAssign", "YulPeriod",
	"YulComma", "YulArrow", "YulIdentifier", "YulHexNumber", "YulDecimalNumber",
	"YulStringLiteral", "YulHexStringLiteral", "YulWS", "YulCOMMENT", "YulLINE_COMMENT",
	"PragmaToken", "PragmaSemicolon", "PragmaWS", "PragmaCOMMENT", "PragmaLINE_COMMENT",
}

var ruleNames = []string{
	"sourceUnit", "pragmaDirective", "importDirective", "importAliases", "path",
	"symbolAliases", "contractDefinition", "interfaceDefinition", "libraryDefinition",
	"inheritanceSpecifierList", "inheritanceSpecifier", "contractBodyElement",
	"namedArgument", "callArgumentList", "identifierPath", "modifierInvocation",
	"visibility", "parameterList", "parameterDeclaration", "constructorDefinition",
	"stateMutability", "overrideSpecifier", "functionDefinition", "modifierDefinition",
	"fallbackFunctionDefinition", "receiveFunctionDefinition", "structDefinition",
	"structMember", "enumDefinition", "userDefinedValueTypeDefinition", "stateVariableDeclaration",
	"constantVariableDeclaration", "eventParameter", "eventDefinition", "errorParameter",
	"errorDefinition", "usingDirective", "typeName", "elementaryTypeName",
	"functionTypeName", "variableDeclaration", "dataLocation", "expression",
	"createNewExpressionContext", "assignOp", "tupleExpression", "inlineArrayExpression",
	"identifier", "literal", "booleanLiteral", "stringLiteral", "hexStringLiteral",
	"unicodeStringLiteral", "numberLiteral", "block", "uncheckedBlock", "statement",
	"simpleStatement", "ifStatement", "forStatement", "whileStatement", "doWhileStatement",
	"continueStatement", "breakStatement", "tryStatement", "catchClause", "returnStatement",
	"emitStatement", "revertStatement", "assemblyStatement", "assemblyFlags",
	"variableDeclarationList", "variableDeclarationTuple", "variableDeclarationStatement",
	"expressionStatement", "mappingType", "mappingKeyType", "yulStatement",
	"yulBlock", "yulVariableDeclaration", "yulAssignment", "yulIfStatement",
	"yulForStatement", "yulSwitchCase", "yulSwitchStatement", "yulFunctionDefinition",
	"yulPath", "yulFunctionCall", "yulBoolean", "yulLiteral", "yulExpression",
}

type SolidityParser struct {
	*antlr.BaseParser
}

// NewSolidityParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SolidityParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSolidityParser(input antlr.TokenStream) *SolidityParser {
	this := new(SolidityParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "SolidityParser.g4"

	return this
}

// SolidityParser tokens.
const (
	SolidityParserEOF                       = antlr.TokenEOF
	SolidityParserReservedKeywords          = 1
	SolidityParserPragma                    = 2
	SolidityParserAbstract                  = 3
	SolidityParserAnonymous                 = 4
	SolidityParserAddress                   = 5
	SolidityParserAs                        = 6
	SolidityParserAssembly                  = 7
	SolidityParserBool                      = 8
	SolidityParserBreak                     = 9
	SolidityParserBytes                     = 10
	SolidityParserCalldata                  = 11
	SolidityParserCatch                     = 12
	SolidityParserConstant                  = 13
	SolidityParserConstructor               = 14
	SolidityParserContinue                  = 15
	SolidityParserContract                  = 16
	SolidityParserDelete                    = 17
	SolidityParserDo                        = 18
	SolidityParserElse                      = 19
	SolidityParserEmit                      = 20
	SolidityParserEnum                      = 21
	SolidityParserError                     = 22
	SolidityParserRevert                    = 23
	SolidityParserEvent                     = 24
	SolidityParserExternal                  = 25
	SolidityParserFallback                  = 26
	SolidityParserFalse                     = 27
	SolidityParserFixed                     = 28
	SolidityParserFrom                      = 29
	SolidityParserFixedBytes                = 30
	SolidityParserFor                       = 31
	SolidityParserFunction                  = 32
	SolidityParserGlobal                    = 33
	SolidityParserHex                       = 34
	SolidityParserIf                        = 35
	SolidityParserImmutable                 = 36
	SolidityParserImport                    = 37
	SolidityParserIndexed                   = 38
	SolidityParserInterface                 = 39
	SolidityParserInternal                  = 40
	SolidityParserIs                        = 41
	SolidityParserLibrary                   = 42
	SolidityParserMapping                   = 43
	SolidityParserMemory                    = 44
	SolidityParserModifier                  = 45
	SolidityParserNew                       = 46
	SolidityParserNumberUnit                = 47
	SolidityParserOverride                  = 48
	SolidityParserPayable                   = 49
	SolidityParserPrivate                   = 50
	SolidityParserPublic                    = 51
	SolidityParserPure                      = 52
	SolidityParserReceive                   = 53
	SolidityParserReturn                    = 54
	SolidityParserReturns                   = 55
	SolidityParserSignedIntegerType         = 56
	SolidityParserStorage                   = 57
	SolidityParserStringLiteral             = 58
	SolidityParserStruct                    = 59
	SolidityParserTrue                      = 60
	SolidityParserTry                       = 61
	SolidityParserType                      = 62
	SolidityParserUfixed                    = 63
	SolidityParserUnchecked                 = 64
	SolidityParserUnsignedIntegerType       = 65
	SolidityParserUsing                     = 66
	SolidityParserView                      = 67
	SolidityParserVirtual                   = 68
	SolidityParserWhile                     = 69
	SolidityParserLParen                    = 70
	SolidityParserRParen                    = 71
	SolidityParserLBrack                    = 72
	SolidityParserRBrack                    = 73
	SolidityParserLBrace                    = 74
	SolidityParserRBrace                    = 75
	SolidityParserColon                     = 76
	SolidityParserSemicolon                 = 77
	SolidityParserPeriod                    = 78
	SolidityParserConditional               = 79
	SolidityParserDoubleArrow               = 80
	SolidityParserRightArrow                = 81
	SolidityParserAssign                    = 82
	SolidityParserAssignBitOr               = 83
	SolidityParserAssignBitXor              = 84
	SolidityParserAssignBitAnd              = 85
	SolidityParserAssignShl                 = 86
	SolidityParserAssignSar                 = 87
	SolidityParserAssignShr                 = 88
	SolidityParserAssignAdd                 = 89
	SolidityParserAssignSub                 = 90
	SolidityParserAssignMul                 = 91
	SolidityParserAssignDiv                 = 92
	SolidityParserAssignMod                 = 93
	SolidityParserComma                     = 94
	SolidityParserOr                        = 95
	SolidityParserAnd                       = 96
	SolidityParserBitOr                     = 97
	SolidityParserBitXor                    = 98
	SolidityParserBitAnd                    = 99
	SolidityParserShl                       = 100
	SolidityParserSar                       = 101
	SolidityParserShr                       = 102
	SolidityParserAdd                       = 103
	SolidityParserSub                       = 104
	SolidityParserMul                       = 105
	SolidityParserDiv                       = 106
	SolidityParserMod                       = 107
	SolidityParserExp                       = 108
	SolidityParserEqual                     = 109
	SolidityParserNotEqual                  = 110
	SolidityParserLessThan                  = 111
	SolidityParserGreaterThan               = 112
	SolidityParserLessThanOrEqual           = 113
	SolidityParserGreaterThanOrEqual        = 114
	SolidityParserNot                       = 115
	SolidityParserBitNot                    = 116
	SolidityParserInc                       = 117
	SolidityParserDec                       = 118
	SolidityParserDoubleQuote               = 119
	SolidityParserSingleQuote               = 120
	SolidityParserNonEmptyStringLiteral     = 121
	SolidityParserEmptyStringLiteral        = 122
	SolidityParserUnicodeStringLiteral      = 123
	SolidityParserHexString                 = 124
	SolidityParserHexNumber                 = 125
	SolidityParserDecimalNumber             = 126
	SolidityParserIdentifier                = 127
	SolidityParserWS                        = 128
	SolidityParserCOMMENT                   = 129
	SolidityParserLINE_COMMENT              = 130
	SolidityParserAssemblyDialect           = 131
	SolidityParserAssemblyLBrace            = 132
	SolidityParserAssemblyFlagString        = 133
	SolidityParserAssemblyBlockLParen       = 134
	SolidityParserAssemblyBlockRParen       = 135
	SolidityParserAssemblyBlockComma        = 136
	SolidityParserAssemblyBlockWS           = 137
	SolidityParserAssemblyBlockCOMMENT      = 138
	SolidityParserAssemblyBlockLINE_COMMENT = 139
	SolidityParserYulBreak                  = 140
	SolidityParserYulCase                   = 141
	SolidityParserYulContinue               = 142
	SolidityParserYulDefault                = 143
	SolidityParserYulFalse                  = 144
	SolidityParserYulFor                    = 145
	SolidityParserYulFunction               = 146
	SolidityParserYulIf                     = 147
	SolidityParserYulLeave                  = 148
	SolidityParserYulLet                    = 149
	SolidityParserYulSwitch                 = 150
	SolidityParserYulTrue                   = 151
	SolidityParserYulHex                    = 152
	SolidityParserYulEVMBuiltin             = 153
	SolidityParserYulLBrace                 = 154
	SolidityParserYulRBrace                 = 155
	SolidityParserYulLParen                 = 156
	SolidityParserYulRParen                 = 157
	SolidityParserYulAssign                 = 158
	SolidityParserYulPeriod                 = 159
	SolidityParserYulComma                  = 160
	SolidityParserYulArrow                  = 161
	SolidityParserYulIdentifier             = 162
	SolidityParserYulHexNumber              = 163
	SolidityParserYulDecimalNumber          = 164
	SolidityParserYulStringLiteral          = 165
	SolidityParserYulHexStringLiteral       = 166
	SolidityParserYulWS                     = 167
	SolidityParserYulCOMMENT                = 168
	SolidityParserYulLINE_COMMENT           = 169
	SolidityParserPragmaToken               = 170
	SolidityParserPragmaSemicolon           = 171
	SolidityParserPragmaWS                  = 172
	SolidityParserPragmaCOMMENT             = 173
	SolidityParserPragmaLINE_COMMENT        = 174
)

// SolidityParser rules.
const (
	SolidityParserRULE_sourceUnit                     = 0
	SolidityParserRULE_pragmaDirective                = 1
	SolidityParserRULE_importDirective                = 2
	SolidityParserRULE_importAliases                  = 3
	SolidityParserRULE_path                           = 4
	SolidityParserRULE_symbolAliases                  = 5
	SolidityParserRULE_contractDefinition             = 6
	SolidityParserRULE_interfaceDefinition            = 7
	SolidityParserRULE_libraryDefinition              = 8
	SolidityParserRULE_inheritanceSpecifierList       = 9
	SolidityParserRULE_inheritanceSpecifier           = 10
	SolidityParserRULE_contractBodyElement            = 11
	SolidityParserRULE_namedArgument                  = 12
	SolidityParserRULE_callArgumentList               = 13
	SolidityParserRULE_identifierPath                 = 14
	SolidityParserRULE_modifierInvocation             = 15
	SolidityParserRULE_visibility                     = 16
	SolidityParserRULE_parameterList                  = 17
	SolidityParserRULE_parameterDeclaration           = 18
	SolidityParserRULE_constructorDefinition          = 19
	SolidityParserRULE_stateMutability                = 20
	SolidityParserRULE_overrideSpecifier              = 21
	SolidityParserRULE_functionDefinition             = 22
	SolidityParserRULE_modifierDefinition             = 23
	SolidityParserRULE_fallbackFunctionDefinition     = 24
	SolidityParserRULE_receiveFunctionDefinition      = 25
	SolidityParserRULE_structDefinition               = 26
	SolidityParserRULE_structMember                   = 27
	SolidityParserRULE_enumDefinition                 = 28
	SolidityParserRULE_userDefinedValueTypeDefinition = 29
	SolidityParserRULE_stateVariableDeclaration       = 30
	SolidityParserRULE_constantVariableDeclaration    = 31
	SolidityParserRULE_eventParameter                 = 32
	SolidityParserRULE_eventDefinition                = 33
	SolidityParserRULE_errorParameter                 = 34
	SolidityParserRULE_errorDefinition                = 35
	SolidityParserRULE_usingDirective                 = 36
	SolidityParserRULE_typeName                       = 37
	SolidityParserRULE_elementaryTypeName             = 38
	SolidityParserRULE_functionTypeName               = 39
	SolidityParserRULE_variableDeclaration            = 40
	SolidityParserRULE_dataLocation                   = 41
	SolidityParserRULE_expression                     = 42
	SolidityParserRULE_createNewExpressionContext     = 43
	SolidityParserRULE_assignOp                       = 44
	SolidityParserRULE_tupleExpression                = 45
	SolidityParserRULE_inlineArrayExpression          = 46
	SolidityParserRULE_identifier                     = 47
	SolidityParserRULE_literal                        = 48
	SolidityParserRULE_booleanLiteral                 = 49
	SolidityParserRULE_stringLiteral                  = 50
	SolidityParserRULE_hexStringLiteral               = 51
	SolidityParserRULE_unicodeStringLiteral           = 52
	SolidityParserRULE_numberLiteral                  = 53
	SolidityParserRULE_block                          = 54
	SolidityParserRULE_uncheckedBlock                 = 55
	SolidityParserRULE_statement                      = 56
	SolidityParserRULE_simpleStatement                = 57
	SolidityParserRULE_ifStatement                    = 58
	SolidityParserRULE_forStatement                   = 59
	SolidityParserRULE_whileStatement                 = 60
	SolidityParserRULE_doWhileStatement               = 61
	SolidityParserRULE_continueStatement              = 62
	SolidityParserRULE_breakStatement                 = 63
	SolidityParserRULE_tryStatement                   = 64
	SolidityParserRULE_catchClause                    = 65
	SolidityParserRULE_returnStatement                = 66
	SolidityParserRULE_emitStatement                  = 67
	SolidityParserRULE_revertStatement                = 68
	SolidityParserRULE_assemblyStatement              = 69
	SolidityParserRULE_assemblyFlags                  = 70
	SolidityParserRULE_variableDeclarationList        = 71
	SolidityParserRULE_variableDeclarationTuple       = 72
	SolidityParserRULE_variableDeclarationStatement   = 73
	SolidityParserRULE_expressionStatement            = 74
	SolidityParserRULE_mappingType                    = 75
	SolidityParserRULE_mappingKeyType                 = 76
	SolidityParserRULE_yulStatement                   = 77
	SolidityParserRULE_yulBlock                       = 78
	SolidityParserRULE_yulVariableDeclaration         = 79
	SolidityParserRULE_yulAssignment                  = 80
	SolidityParserRULE_yulIfStatement                 = 81
	SolidityParserRULE_yulForStatement                = 82
	SolidityParserRULE_yulSwitchCase                  = 83
	SolidityParserRULE_yulSwitchStatement             = 84
	SolidityParserRULE_yulFunctionDefinition          = 85
	SolidityParserRULE_yulPath                        = 86
	SolidityParserRULE_yulFunctionCall                = 87
	SolidityParserRULE_yulBoolean                     = 88
	SolidityParserRULE_yulLiteral                     = 89
	SolidityParserRULE_yulExpression                  = 90
)

// ISourceUnitContext is an interface to support dynamic dispatch.
type ISourceUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceUnitContext differentiates from other interfaces.
	IsSourceUnitContext()
}

type SourceUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceUnitContext() *SourceUnitContext {
	var p = new(SourceUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_sourceUnit
	return p
}

func (*SourceUnitContext) IsSourceUnitContext() {}

func NewSourceUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceUnitContext {
	var p = new(SourceUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_sourceUnit

	return p
}

func (s *SourceUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(SolidityParserEOF, 0)
}

func (s *SourceUnitContext) AllPragmaDirective() []IPragmaDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem())
	var tst = make([]IPragmaDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPragmaDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) PragmaDirective(i int) IPragmaDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPragmaDirectiveContext)
}

func (s *SourceUnitContext) AllImportDirective() []IImportDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem())
	var tst = make([]IImportDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ImportDirective(i int) IImportDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDirectiveContext)
}

func (s *SourceUnitContext) AllUsingDirective() []IUsingDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUsingDirectiveContext)(nil)).Elem())
	var tst = make([]IUsingDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUsingDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) UsingDirective(i int) IUsingDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUsingDirectiveContext)
}

func (s *SourceUnitContext) AllContractDefinition() []IContractDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem())
	var tst = make([]IContractDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ContractDefinition(i int) IContractDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractDefinitionContext)
}

func (s *SourceUnitContext) AllInterfaceDefinition() []IInterfaceDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInterfaceDefinitionContext)(nil)).Elem())
	var tst = make([]IInterfaceDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInterfaceDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) InterfaceDefinition(i int) IInterfaceDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInterfaceDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInterfaceDefinitionContext)
}

func (s *SourceUnitContext) AllLibraryDefinition() []ILibraryDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ILibraryDefinitionContext)(nil)).Elem())
	var tst = make([]ILibraryDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ILibraryDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) LibraryDefinition(i int) ILibraryDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILibraryDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ILibraryDefinitionContext)
}

func (s *SourceUnitContext) AllFunctionDefinition() []IFunctionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem())
	var tst = make([]IFunctionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) FunctionDefinition(i int) IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *SourceUnitContext) AllConstantVariableDeclaration() []IConstantVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IConstantVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IConstantVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IConstantVariableDeclarationContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ConstantVariableDeclaration(i int) IConstantVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstantVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IConstantVariableDeclarationContext)
}

func (s *SourceUnitContext) AllStructDefinition() []IStructDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem())
	var tst = make([]IStructDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStructDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) StructDefinition(i int) IStructDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStructDefinitionContext)
}

func (s *SourceUnitContext) AllEnumDefinition() []IEnumDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem())
	var tst = make([]IEnumDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) EnumDefinition(i int) IEnumDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumDefinitionContext)
}

func (s *SourceUnitContext) AllUserDefinedValueTypeDefinition() []IUserDefinedValueTypeDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserDefinedValueTypeDefinitionContext)(nil)).Elem())
	var tst = make([]IUserDefinedValueTypeDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserDefinedValueTypeDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) UserDefinedValueTypeDefinition(i int) IUserDefinedValueTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedValueTypeDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedValueTypeDefinitionContext)
}

func (s *SourceUnitContext) AllErrorDefinition() []IErrorDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IErrorDefinitionContext)(nil)).Elem())
	var tst = make([]IErrorDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IErrorDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ErrorDefinition(i int) IErrorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IErrorDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IErrorDefinitionContext)
}

func (s *SourceUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SourceUnitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterSourceUnit(s)
	}
}

func (s *SourceUnitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitSourceUnit(s)
	}
}

func (s *SourceUnitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitSourceUnit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) SourceUnit() (localctx ISourceUnitContext) {
	this := p
	_ = this

	localctx = NewSourceUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SolidityParserRULE_sourceUnit)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(196)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(194)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(182)
					p.PragmaDirective()
				}

			case 2:
				{
					p.SetState(183)
					p.ImportDirective()
				}

			case 3:
				{
					p.SetState(184)
					p.UsingDirective()
				}

			case 4:
				{
					p.SetState(185)
					p.ContractDefinition()
				}

			case 5:
				{
					p.SetState(186)
					p.InterfaceDefinition()
				}

			case 6:
				{
					p.SetState(187)
					p.LibraryDefinition()
				}

			case 7:
				{
					p.SetState(188)
					p.FunctionDefinition()
				}

			case 8:
				{
					p.SetState(189)
					p.ConstantVariableDeclaration()
				}

			case 9:
				{
					p.SetState(190)
					p.StructDefinition()
				}

			case 10:
				{
					p.SetState(191)
					p.EnumDefinition()
				}

			case 11:
				{
					p.SetState(192)
					p.UserDefinedValueTypeDefinition()
				}

			case 12:
				{
					p.SetState(193)
					p.ErrorDefinition()
				}

			}

		}
		p.SetState(198)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 1, p.GetParserRuleContext())
	}
	{
		p.SetState(199)
		p.Match(SolidityParserEOF)
	}

	return localctx
}

// IPragmaDirectiveContext is an interface to support dynamic dispatch.
type IPragmaDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaDirectiveContext differentiates from other interfaces.
	IsPragmaDirectiveContext()
}

type PragmaDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaDirectiveContext() *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaDirective
	return p
}

func (*PragmaDirectiveContext) IsPragmaDirectiveContext() {}

func NewPragmaDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaDirective

	return p
}

func (s *PragmaDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaDirectiveContext) Pragma() antlr.TerminalNode {
	return s.GetToken(SolidityParserPragma, 0)
}

func (s *PragmaDirectiveContext) PragmaSemicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserPragmaSemicolon, 0)
}

func (s *PragmaDirectiveContext) AllPragmaToken() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPragmaToken)
}

func (s *PragmaDirectiveContext) PragmaToken(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPragmaToken, i)
}

func (s *PragmaDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PragmaDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterPragmaDirective(s)
	}
}

func (s *PragmaDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitPragmaDirective(s)
	}
}

func (s *PragmaDirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitPragmaDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) PragmaDirective() (localctx IPragmaDirectiveContext) {
	this := p
	_ = this

	localctx = NewPragmaDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SolidityParserRULE_pragmaDirective)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(201)
		p.Match(SolidityParserPragma)
	}
	p.SetState(203)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ok := true; ok; ok = _la == SolidityParserPragmaToken {
		{
			p.SetState(202)
			p.Match(SolidityParserPragmaToken)
		}

		p.SetState(205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(207)
		p.Match(SolidityParserPragmaSemicolon)
	}

	return localctx
}

// IImportDirectiveContext is an interface to support dynamic dispatch.
type IImportDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetUnitAlias returns the unitAlias rule contexts.
	GetUnitAlias() IIdentifierContext

	// SetUnitAlias sets the unitAlias rule contexts.
	SetUnitAlias(IIdentifierContext)

	// IsImportDirectiveContext differentiates from other interfaces.
	IsImportDirectiveContext()
}

type ImportDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	unitAlias IIdentifierContext
}

func NewEmptyImportDirectiveContext() *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDirective
	return p
}

func (*ImportDirectiveContext) IsImportDirectiveContext() {}

func NewImportDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDirective

	return p
}

func (s *ImportDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDirectiveContext) GetUnitAlias() IIdentifierContext { return s.unitAlias }

func (s *ImportDirectiveContext) SetUnitAlias(v IIdentifierContext) { s.unitAlias = v }

func (s *ImportDirectiveContext) Import() antlr.TerminalNode {
	return s.GetToken(SolidityParserImport, 0)
}

func (s *ImportDirectiveContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ImportDirectiveContext) Path() IPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPathContext)
}

func (s *ImportDirectiveContext) SymbolAliases() ISymbolAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISymbolAliasesContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISymbolAliasesContext)
}

func (s *ImportDirectiveContext) From() antlr.TerminalNode {
	return s.GetToken(SolidityParserFrom, 0)
}

func (s *ImportDirectiveContext) Mul() antlr.TerminalNode {
	return s.GetToken(SolidityParserMul, 0)
}

func (s *ImportDirectiveContext) As() antlr.TerminalNode {
	return s.GetToken(SolidityParserAs, 0)
}

func (s *ImportDirectiveContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterImportDirective(s)
	}
}

func (s *ImportDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitImportDirective(s)
	}
}

func (s *ImportDirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitImportDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ImportDirective() (localctx IImportDirectiveContext) {
	this := p
	_ = this

	localctx = NewImportDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SolidityParserRULE_importDirective)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(209)
		p.Match(SolidityParserImport)
	}
	p.SetState(225)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserNonEmptyStringLiteral:
		{
			p.SetState(210)
			p.Path()
		}
		p.SetState(213)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserAs {
			{
				p.SetState(211)
				p.Match(SolidityParserAs)
			}
			{
				p.SetState(212)

				var _x = p.Identifier()

				localctx.(*ImportDirectiveContext).unitAlias = _x
			}

		}

	case SolidityParserLBrace:
		{
			p.SetState(215)
			p.SymbolAliases()
		}
		{
			p.SetState(216)
			p.Match(SolidityParserFrom)
		}
		{
			p.SetState(217)
			p.Path()
		}

	case SolidityParserMul:
		{
			p.SetState(219)
			p.Match(SolidityParserMul)
		}
		{
			p.SetState(220)
			p.Match(SolidityParserAs)
		}
		{
			p.SetState(221)

			var _x = p.Identifier()

			localctx.(*ImportDirectiveContext).unitAlias = _x
		}
		{
			p.SetState(222)
			p.Match(SolidityParserFrom)
		}
		{
			p.SetState(223)
			p.Path()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(227)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IImportAliasesContext is an interface to support dynamic dispatch.
type IImportAliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetSymbol returns the symbol rule contexts.
	GetSymbol() IIdentifierContext

	// GetAlias returns the alias rule contexts.
	GetAlias() IIdentifierContext

	// SetSymbol sets the symbol rule contexts.
	SetSymbol(IIdentifierContext)

	// SetAlias sets the alias rule contexts.
	SetAlias(IIdentifierContext)

	// IsImportAliasesContext differentiates from other interfaces.
	IsImportAliasesContext()
}

type ImportAliasesContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	symbol IIdentifierContext
	alias  IIdentifierContext
}

func NewEmptyImportAliasesContext() *ImportAliasesContext {
	var p = new(ImportAliasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importAliases
	return p
}

func (*ImportAliasesContext) IsImportAliasesContext() {}

func NewImportAliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportAliasesContext {
	var p = new(ImportAliasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importAliases

	return p
}

func (s *ImportAliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportAliasesContext) GetSymbol() IIdentifierContext { return s.symbol }

func (s *ImportAliasesContext) GetAlias() IIdentifierContext { return s.alias }

func (s *ImportAliasesContext) SetSymbol(v IIdentifierContext) { s.symbol = v }

func (s *ImportAliasesContext) SetAlias(v IIdentifierContext) { s.alias = v }

func (s *ImportAliasesContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportAliasesContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportAliasesContext) As() antlr.TerminalNode {
	return s.GetToken(SolidityParserAs, 0)
}

func (s *ImportAliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportAliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportAliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterImportAliases(s)
	}
}

func (s *ImportAliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitImportAliases(s)
	}
}

func (s *ImportAliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitImportAliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ImportAliases() (localctx IImportAliasesContext) {
	this := p
	_ = this

	localctx = NewImportAliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SolidityParserRULE_importAliases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(229)

		var _x = p.Identifier()

		localctx.(*ImportAliasesContext).symbol = _x
	}
	p.SetState(232)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAs {
		{
			p.SetState(230)
			p.Match(SolidityParserAs)
		}
		{
			p.SetState(231)

			var _x = p.Identifier()

			localctx.(*ImportAliasesContext).alias = _x
		}

	}

	return localctx
}

// IPathContext is an interface to support dynamic dispatch.
type IPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPathContext differentiates from other interfaces.
	IsPathContext()
}

type PathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPathContext() *PathContext {
	var p = new(PathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_path
	return p
}

func (*PathContext) IsPathContext() {}

func NewPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PathContext {
	var p = new(PathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_path

	return p
}

func (s *PathContext) GetParser() antlr.Parser { return s.parser }

func (s *PathContext) NonEmptyStringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserNonEmptyStringLiteral, 0)
}

func (s *PathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterPath(s)
	}
}

func (s *PathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitPath(s)
	}
}

func (s *PathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Path() (localctx IPathContext) {
	this := p
	_ = this

	localctx = NewPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SolidityParserRULE_path)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(234)
		p.Match(SolidityParserNonEmptyStringLiteral)
	}

	return localctx
}

// ISymbolAliasesContext is an interface to support dynamic dispatch.
type ISymbolAliasesContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_importAliases returns the _importAliases rule contexts.
	Get_importAliases() IImportAliasesContext

	// Set_importAliases sets the _importAliases rule contexts.
	Set_importAliases(IImportAliasesContext)

	// GetAliases returns the aliases rule context list.
	GetAliases() []IImportAliasesContext

	// SetAliases sets the aliases rule context list.
	SetAliases([]IImportAliasesContext)

	// IsSymbolAliasesContext differentiates from other interfaces.
	IsSymbolAliasesContext()
}

type SymbolAliasesContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	_importAliases IImportAliasesContext
	aliases        []IImportAliasesContext
}

func NewEmptySymbolAliasesContext() *SymbolAliasesContext {
	var p = new(SymbolAliasesContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_symbolAliases
	return p
}

func (*SymbolAliasesContext) IsSymbolAliasesContext() {}

func NewSymbolAliasesContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SymbolAliasesContext {
	var p = new(SymbolAliasesContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_symbolAliases

	return p
}

func (s *SymbolAliasesContext) GetParser() antlr.Parser { return s.parser }

func (s *SymbolAliasesContext) Get_importAliases() IImportAliasesContext { return s._importAliases }

func (s *SymbolAliasesContext) Set_importAliases(v IImportAliasesContext) { s._importAliases = v }

func (s *SymbolAliasesContext) GetAliases() []IImportAliasesContext { return s.aliases }

func (s *SymbolAliasesContext) SetAliases(v []IImportAliasesContext) { s.aliases = v }

func (s *SymbolAliasesContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *SymbolAliasesContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *SymbolAliasesContext) AllImportAliases() []IImportAliasesContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportAliasesContext)(nil)).Elem())
	var tst = make([]IImportAliasesContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportAliasesContext)
		}
	}

	return tst
}

func (s *SymbolAliasesContext) ImportAliases(i int) IImportAliasesContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportAliasesContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportAliasesContext)
}

func (s *SymbolAliasesContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *SymbolAliasesContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *SymbolAliasesContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SymbolAliasesContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SymbolAliasesContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterSymbolAliases(s)
	}
}

func (s *SymbolAliasesContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitSymbolAliases(s)
	}
}

func (s *SymbolAliasesContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitSymbolAliases(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) SymbolAliases() (localctx ISymbolAliasesContext) {
	this := p
	_ = this

	localctx = NewSymbolAliasesContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SolidityParserRULE_symbolAliases)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(236)
		p.Match(SolidityParserLBrace)
	}
	{
		p.SetState(237)

		var _x = p.ImportAliases()

		localctx.(*SymbolAliasesContext)._importAliases = _x
	}
	localctx.(*SymbolAliasesContext).aliases = append(localctx.(*SymbolAliasesContext).aliases, localctx.(*SymbolAliasesContext)._importAliases)
	p.SetState(242)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(238)
			p.Match(SolidityParserComma)
		}
		{
			p.SetState(239)

			var _x = p.ImportAliases()

			localctx.(*SymbolAliasesContext)._importAliases = _x
		}
		localctx.(*SymbolAliasesContext).aliases = append(localctx.(*SymbolAliasesContext).aliases, localctx.(*SymbolAliasesContext)._importAliases)

		p.SetState(244)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(245)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// IContractDefinitionContext is an interface to support dynamic dispatch.
type IContractDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsContractDefinitionContext differentiates from other interfaces.
	IsContractDefinitionContext()
}

type ContractDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyContractDefinitionContext() *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractDefinition
	return p
}

func (*ContractDefinitionContext) IsContractDefinitionContext() {}

func NewContractDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractDefinition

	return p
}

func (s *ContractDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *ContractDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *ContractDefinitionContext) Contract() antlr.TerminalNode {
	return s.GetToken(SolidityParserContract, 0)
}

func (s *ContractDefinitionContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *ContractDefinitionContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *ContractDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ContractDefinitionContext) Abstract() antlr.TerminalNode {
	return s.GetToken(SolidityParserAbstract, 0)
}

func (s *ContractDefinitionContext) InheritanceSpecifierList() IInheritanceSpecifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceSpecifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInheritanceSpecifierListContext)
}

func (s *ContractDefinitionContext) AllContractBodyElement() []IContractBodyElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractBodyElementContext)(nil)).Elem())
	var tst = make([]IContractBodyElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractBodyElementContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) ContractBodyElement(i int) IContractBodyElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractBodyElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractBodyElementContext)
}

func (s *ContractDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContractDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterContractDefinition(s)
	}
}

func (s *ContractDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitContractDefinition(s)
	}
}

func (s *ContractDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitContractDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ContractDefinition() (localctx IContractDefinitionContext) {
	this := p
	_ = this

	localctx = NewContractDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SolidityParserRULE_contractDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(248)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAbstract {
		{
			p.SetState(247)
			p.Match(SolidityParserAbstract)
		}

	}
	{
		p.SetState(250)
		p.Match(SolidityParserContract)
	}
	{
		p.SetState(251)

		var _x = p.Identifier()

		localctx.(*ContractDefinitionContext).name = _x
	}
	p.SetState(253)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserIs {
		{
			p.SetState(252)
			p.InheritanceSpecifierList()
		}

	}
	{
		p.SetState(255)
		p.Match(SolidityParserLBrace)
	}
	p.SetState(259)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(256)
				p.ContractBodyElement()
			}

		}
		p.SetState(261)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 9, p.GetParserRuleContext())
	}
	{
		p.SetState(262)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// IInterfaceDefinitionContext is an interface to support dynamic dispatch.
type IInterfaceDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsInterfaceDefinitionContext differentiates from other interfaces.
	IsInterfaceDefinitionContext()
}

type InterfaceDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyInterfaceDefinitionContext() *InterfaceDefinitionContext {
	var p = new(InterfaceDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_interfaceDefinition
	return p
}

func (*InterfaceDefinitionContext) IsInterfaceDefinitionContext() {}

func NewInterfaceDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDefinitionContext {
	var p = new(InterfaceDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_interfaceDefinition

	return p
}

func (s *InterfaceDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *InterfaceDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *InterfaceDefinitionContext) Interface() antlr.TerminalNode {
	return s.GetToken(SolidityParserInterface, 0)
}

func (s *InterfaceDefinitionContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *InterfaceDefinitionContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *InterfaceDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *InterfaceDefinitionContext) InheritanceSpecifierList() IInheritanceSpecifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceSpecifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInheritanceSpecifierListContext)
}

func (s *InterfaceDefinitionContext) AllContractBodyElement() []IContractBodyElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractBodyElementContext)(nil)).Elem())
	var tst = make([]IContractBodyElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractBodyElementContext)
		}
	}

	return tst
}

func (s *InterfaceDefinitionContext) ContractBodyElement(i int) IContractBodyElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractBodyElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractBodyElementContext)
}

func (s *InterfaceDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterInterfaceDefinition(s)
	}
}

func (s *InterfaceDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitInterfaceDefinition(s)
	}
}

func (s *InterfaceDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitInterfaceDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) InterfaceDefinition() (localctx IInterfaceDefinitionContext) {
	this := p
	_ = this

	localctx = NewInterfaceDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SolidityParserRULE_interfaceDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(264)
		p.Match(SolidityParserInterface)
	}
	{
		p.SetState(265)

		var _x = p.Identifier()

		localctx.(*InterfaceDefinitionContext).name = _x
	}
	p.SetState(267)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserIs {
		{
			p.SetState(266)
			p.InheritanceSpecifierList()
		}

	}
	{
		p.SetState(269)
		p.Match(SolidityParserLBrace)
	}
	p.SetState(273)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(270)
				p.ContractBodyElement()
			}

		}
		p.SetState(275)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 11, p.GetParserRuleContext())
	}
	{
		p.SetState(276)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// ILibraryDefinitionContext is an interface to support dynamic dispatch.
type ILibraryDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsLibraryDefinitionContext differentiates from other interfaces.
	IsLibraryDefinitionContext()
}

type LibraryDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyLibraryDefinitionContext() *LibraryDefinitionContext {
	var p = new(LibraryDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_libraryDefinition
	return p
}

func (*LibraryDefinitionContext) IsLibraryDefinitionContext() {}

func NewLibraryDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LibraryDefinitionContext {
	var p = new(LibraryDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_libraryDefinition

	return p
}

func (s *LibraryDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *LibraryDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *LibraryDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *LibraryDefinitionContext) Library() antlr.TerminalNode {
	return s.GetToken(SolidityParserLibrary, 0)
}

func (s *LibraryDefinitionContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *LibraryDefinitionContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *LibraryDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LibraryDefinitionContext) AllContractBodyElement() []IContractBodyElementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractBodyElementContext)(nil)).Elem())
	var tst = make([]IContractBodyElementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractBodyElementContext)
		}
	}

	return tst
}

func (s *LibraryDefinitionContext) ContractBodyElement(i int) IContractBodyElementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractBodyElementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractBodyElementContext)
}

func (s *LibraryDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LibraryDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LibraryDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterLibraryDefinition(s)
	}
}

func (s *LibraryDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitLibraryDefinition(s)
	}
}

func (s *LibraryDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitLibraryDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) LibraryDefinition() (localctx ILibraryDefinitionContext) {
	this := p
	_ = this

	localctx = NewLibraryDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SolidityParserRULE_libraryDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(278)
		p.Match(SolidityParserLibrary)
	}
	{
		p.SetState(279)

		var _x = p.Identifier()

		localctx.(*LibraryDefinitionContext).name = _x
	}
	{
		p.SetState(280)
		p.Match(SolidityParserLBrace)
	}
	p.SetState(284)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(281)
				p.ContractBodyElement()
			}

		}
		p.SetState(286)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 12, p.GetParserRuleContext())
	}
	{
		p.SetState(287)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// IInheritanceSpecifierListContext is an interface to support dynamic dispatch.
type IInheritanceSpecifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_inheritanceSpecifier returns the _inheritanceSpecifier rule contexts.
	Get_inheritanceSpecifier() IInheritanceSpecifierContext

	// Set_inheritanceSpecifier sets the _inheritanceSpecifier rule contexts.
	Set_inheritanceSpecifier(IInheritanceSpecifierContext)

	// GetInheritanceSpecifiers returns the inheritanceSpecifiers rule context list.
	GetInheritanceSpecifiers() []IInheritanceSpecifierContext

	// SetInheritanceSpecifiers sets the inheritanceSpecifiers rule context list.
	SetInheritanceSpecifiers([]IInheritanceSpecifierContext)

	// IsInheritanceSpecifierListContext differentiates from other interfaces.
	IsInheritanceSpecifierListContext()
}

type InheritanceSpecifierListContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	_inheritanceSpecifier IInheritanceSpecifierContext
	inheritanceSpecifiers []IInheritanceSpecifierContext
}

func NewEmptyInheritanceSpecifierListContext() *InheritanceSpecifierListContext {
	var p = new(InheritanceSpecifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifierList
	return p
}

func (*InheritanceSpecifierListContext) IsInheritanceSpecifierListContext() {}

func NewInheritanceSpecifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InheritanceSpecifierListContext {
	var p = new(InheritanceSpecifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifierList

	return p
}

func (s *InheritanceSpecifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *InheritanceSpecifierListContext) Get_inheritanceSpecifier() IInheritanceSpecifierContext {
	return s._inheritanceSpecifier
}

func (s *InheritanceSpecifierListContext) Set_inheritanceSpecifier(v IInheritanceSpecifierContext) {
	s._inheritanceSpecifier = v
}

func (s *InheritanceSpecifierListContext) GetInheritanceSpecifiers() []IInheritanceSpecifierContext {
	return s.inheritanceSpecifiers
}

func (s *InheritanceSpecifierListContext) SetInheritanceSpecifiers(v []IInheritanceSpecifierContext) {
	s.inheritanceSpecifiers = v
}

func (s *InheritanceSpecifierListContext) Is() antlr.TerminalNode {
	return s.GetToken(SolidityParserIs, 0)
}

func (s *InheritanceSpecifierListContext) AllInheritanceSpecifier() []IInheritanceSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem())
	var tst = make([]IInheritanceSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInheritanceSpecifierContext)
		}
	}

	return tst
}

func (s *InheritanceSpecifierListContext) InheritanceSpecifier(i int) IInheritanceSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInheritanceSpecifierContext)
}

func (s *InheritanceSpecifierListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *InheritanceSpecifierListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *InheritanceSpecifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritanceSpecifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InheritanceSpecifierListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterInheritanceSpecifierList(s)
	}
}

func (s *InheritanceSpecifierListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitInheritanceSpecifierList(s)
	}
}

func (s *InheritanceSpecifierListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitInheritanceSpecifierList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) InheritanceSpecifierList() (localctx IInheritanceSpecifierListContext) {
	this := p
	_ = this

	localctx = NewInheritanceSpecifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SolidityParserRULE_inheritanceSpecifierList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(289)
		p.Match(SolidityParserIs)
	}
	{
		p.SetState(290)

		var _x = p.InheritanceSpecifier()

		localctx.(*InheritanceSpecifierListContext)._inheritanceSpecifier = _x
	}
	localctx.(*InheritanceSpecifierListContext).inheritanceSpecifiers = append(localctx.(*InheritanceSpecifierListContext).inheritanceSpecifiers, localctx.(*InheritanceSpecifierListContext)._inheritanceSpecifier)
	p.SetState(295)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())

	for _alt != 1 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1+1 {
			{
				p.SetState(291)
				p.Match(SolidityParserComma)
			}
			{
				p.SetState(292)

				var _x = p.InheritanceSpecifier()

				localctx.(*InheritanceSpecifierListContext)._inheritanceSpecifier = _x
			}
			localctx.(*InheritanceSpecifierListContext).inheritanceSpecifiers = append(localctx.(*InheritanceSpecifierListContext).inheritanceSpecifiers, localctx.(*InheritanceSpecifierListContext)._inheritanceSpecifier)

		}
		p.SetState(297)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext())
	}

	return localctx
}

// IInheritanceSpecifierContext is an interface to support dynamic dispatch.
type IInheritanceSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierPathContext

	// GetArguments returns the arguments rule contexts.
	GetArguments() ICallArgumentListContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierPathContext)

	// SetArguments sets the arguments rule contexts.
	SetArguments(ICallArgumentListContext)

	// IsInheritanceSpecifierContext differentiates from other interfaces.
	IsInheritanceSpecifierContext()
}

type InheritanceSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	name      IIdentifierPathContext
	arguments ICallArgumentListContext
}

func NewEmptyInheritanceSpecifierContext() *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier
	return p
}

func (*InheritanceSpecifierContext) IsInheritanceSpecifierContext() {}

func NewInheritanceSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier

	return p
}

func (s *InheritanceSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InheritanceSpecifierContext) GetName() IIdentifierPathContext { return s.name }

func (s *InheritanceSpecifierContext) GetArguments() ICallArgumentListContext { return s.arguments }

func (s *InheritanceSpecifierContext) SetName(v IIdentifierPathContext) { s.name = v }

func (s *InheritanceSpecifierContext) SetArguments(v ICallArgumentListContext) { s.arguments = v }

func (s *InheritanceSpecifierContext) IdentifierPath() IIdentifierPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPathContext)
}

func (s *InheritanceSpecifierContext) CallArgumentList() ICallArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentListContext)
}

func (s *InheritanceSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritanceSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InheritanceSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterInheritanceSpecifier(s)
	}
}

func (s *InheritanceSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitInheritanceSpecifier(s)
	}
}

func (s *InheritanceSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitInheritanceSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) InheritanceSpecifier() (localctx IInheritanceSpecifierContext) {
	this := p
	_ = this

	localctx = NewInheritanceSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SolidityParserRULE_inheritanceSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(298)

		var _x = p.IdentifierPath()

		localctx.(*InheritanceSpecifierContext).name = _x
	}
	p.SetState(300)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserLParen {
		{
			p.SetState(299)

			var _x = p.CallArgumentList()

			localctx.(*InheritanceSpecifierContext).arguments = _x
		}

	}

	return localctx
}

// IContractBodyElementContext is an interface to support dynamic dispatch.
type IContractBodyElementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractBodyElementContext differentiates from other interfaces.
	IsContractBodyElementContext()
}

type ContractBodyElementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractBodyElementContext() *ContractBodyElementContext {
	var p = new(ContractBodyElementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractBodyElement
	return p
}

func (*ContractBodyElementContext) IsContractBodyElementContext() {}

func NewContractBodyElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractBodyElementContext {
	var p = new(ContractBodyElementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractBodyElement

	return p
}

func (s *ContractBodyElementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractBodyElementContext) ConstructorDefinition() IConstructorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IConstructorDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IConstructorDefinitionContext)
}

func (s *ContractBodyElementContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *ContractBodyElementContext) ModifierDefinition() IModifierDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierDefinitionContext)
}

func (s *ContractBodyElementContext) FallbackFunctionDefinition() IFallbackFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFallbackFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFallbackFunctionDefinitionContext)
}

func (s *ContractBodyElementContext) ReceiveFunctionDefinition() IReceiveFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReceiveFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReceiveFunctionDefinitionContext)
}

func (s *ContractBodyElementContext) StructDefinition() IStructDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDefinitionContext)
}

func (s *ContractBodyElementContext) EnumDefinition() IEnumDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDefinitionContext)
}

func (s *ContractBodyElementContext) UserDefinedValueTypeDefinition() IUserDefinedValueTypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedValueTypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedValueTypeDefinitionContext)
}

func (s *ContractBodyElementContext) StateVariableDeclaration() IStateVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStateVariableDeclarationContext)
}

func (s *ContractBodyElementContext) EventDefinition() IEventDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventDefinitionContext)
}

func (s *ContractBodyElementContext) ErrorDefinition() IErrorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IErrorDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IErrorDefinitionContext)
}

func (s *ContractBodyElementContext) UsingDirective() IUsingDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingDirectiveContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingDirectiveContext)
}

func (s *ContractBodyElementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractBodyElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContractBodyElementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterContractBodyElement(s)
	}
}

func (s *ContractBodyElementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitContractBodyElement(s)
	}
}

func (s *ContractBodyElementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitContractBodyElement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ContractBodyElement() (localctx IContractBodyElementContext) {
	this := p
	_ = this

	localctx = NewContractBodyElementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SolidityParserRULE_contractBodyElement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(314)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 15, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(302)
			p.ConstructorDefinition()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(303)
			p.FunctionDefinition()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(304)
			p.ModifierDefinition()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(305)
			p.FallbackFunctionDefinition()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(306)
			p.ReceiveFunctionDefinition()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(307)
			p.StructDefinition()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(308)
			p.EnumDefinition()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(309)
			p.UserDefinedValueTypeDefinition()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(310)
			p.StateVariableDeclaration()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(311)
			p.EventDefinition()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(312)
			p.ErrorDefinition()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(313)
			p.UsingDirective()
		}

	}

	return localctx
}

// INamedArgumentContext is an interface to support dynamic dispatch.
type INamedArgumentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetValue returns the value rule contexts.
	GetValue() IExpressionContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetValue sets the value rule contexts.
	SetValue(IExpressionContext)

	// IsNamedArgumentContext differentiates from other interfaces.
	IsNamedArgumentContext()
}

type NamedArgumentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
	value  IExpressionContext
}

func NewEmptyNamedArgumentContext() *NamedArgumentContext {
	var p = new(NamedArgumentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_namedArgument
	return p
}

func (*NamedArgumentContext) IsNamedArgumentContext() {}

func NewNamedArgumentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NamedArgumentContext {
	var p = new(NamedArgumentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_namedArgument

	return p
}

func (s *NamedArgumentContext) GetParser() antlr.Parser { return s.parser }

func (s *NamedArgumentContext) GetName() IIdentifierContext { return s.name }

func (s *NamedArgumentContext) GetValue() IExpressionContext { return s.value }

func (s *NamedArgumentContext) SetName(v IIdentifierContext) { s.name = v }

func (s *NamedArgumentContext) SetValue(v IExpressionContext) { s.value = v }

func (s *NamedArgumentContext) Colon() antlr.TerminalNode {
	return s.GetToken(SolidityParserColon, 0)
}

func (s *NamedArgumentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NamedArgumentContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NamedArgumentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NamedArgumentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NamedArgumentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterNamedArgument(s)
	}
}

func (s *NamedArgumentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitNamedArgument(s)
	}
}

func (s *NamedArgumentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitNamedArgument(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) NamedArgument() (localctx INamedArgumentContext) {
	this := p
	_ = this

	localctx = NewNamedArgumentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SolidityParserRULE_namedArgument)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(316)

		var _x = p.Identifier()

		localctx.(*NamedArgumentContext).name = _x
	}
	{
		p.SetState(317)
		p.Match(SolidityParserColon)
	}
	{
		p.SetState(318)

		var _x = p.expression(0)

		localctx.(*NamedArgumentContext).value = _x
	}

	return localctx
}

// ICallArgumentListContext is an interface to support dynamic dispatch.
type ICallArgumentListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCallArgumentListContext differentiates from other interfaces.
	IsCallArgumentListContext()
}

type CallArgumentListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCallArgumentListContext() *CallArgumentListContext {
	var p = new(CallArgumentListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_callArgumentList
	return p
}

func (*CallArgumentListContext) IsCallArgumentListContext() {}

func NewCallArgumentListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CallArgumentListContext {
	var p = new(CallArgumentListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_callArgumentList

	return p
}

func (s *CallArgumentListContext) GetParser() antlr.Parser { return s.parser }

func (s *CallArgumentListContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *CallArgumentListContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *CallArgumentListContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *CallArgumentListContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *CallArgumentListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *CallArgumentListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *CallArgumentListContext) AllNamedArgument() []INamedArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamedArgumentContext)(nil)).Elem())
	var tst = make([]INamedArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamedArgumentContext)
		}
	}

	return tst
}

func (s *CallArgumentListContext) NamedArgument(i int) INamedArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamedArgumentContext)
}

func (s *CallArgumentListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *CallArgumentListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *CallArgumentListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CallArgumentListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CallArgumentListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterCallArgumentList(s)
	}
}

func (s *CallArgumentListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitCallArgumentList(s)
	}
}

func (s *CallArgumentListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitCallArgumentList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) CallArgumentList() (localctx ICallArgumentListContext) {
	this := p
	_ = this

	localctx = NewCallArgumentListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SolidityParserRULE_callArgumentList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(320)
		p.Match(SolidityParserLParen)
	}
	p.SetState(343)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.SetState(329)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 17, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(321)
				p.expression(0)
			}
			p.SetState(326)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SolidityParserComma {
				{
					p.SetState(322)
					p.Match(SolidityParserComma)
				}
				{
					p.SetState(323)
					p.expression(0)
				}

				p.SetState(328)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}

	case 2:
		{
			p.SetState(331)
			p.Match(SolidityParserLBrace)
		}
		p.SetState(340)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(332)
				p.NamedArgument()
			}
			p.SetState(337)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)

			for _la == SolidityParserComma {
				{
					p.SetState(333)
					p.Match(SolidityParserComma)
				}
				{
					p.SetState(334)
					p.NamedArgument()
				}

				p.SetState(339)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(342)
			p.Match(SolidityParserRBrace)
		}

	}
	{
		p.SetState(345)
		p.Match(SolidityParserRParen)
	}

	return localctx
}

// IIdentifierPathContext is an interface to support dynamic dispatch.
type IIdentifierPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierPathContext differentiates from other interfaces.
	IsIdentifierPathContext()
}

type IdentifierPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierPathContext() *IdentifierPathContext {
	var p = new(IdentifierPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifierPath
	return p
}

func (*IdentifierPathContext) IsIdentifierPathContext() {}

func NewIdentifierPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierPathContext {
	var p = new(IdentifierPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifierPath

	return p
}

func (s *IdentifierPathContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierPathContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierPathContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierPathContext) AllPeriod() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPeriod)
}

func (s *IdentifierPathContext) Period(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPeriod, i)
}

func (s *IdentifierPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterIdentifierPath(s)
	}
}

func (s *IdentifierPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitIdentifierPath(s)
	}
}

func (s *IdentifierPathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitIdentifierPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) IdentifierPath() (localctx IIdentifierPathContext) {
	this := p
	_ = this

	localctx = NewIdentifierPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SolidityParserRULE_identifierPath)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(347)
		p.Identifier()
	}
	p.SetState(352)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(348)
				p.Match(SolidityParserPeriod)
			}
			{
				p.SetState(349)
				p.Identifier()
			}

		}
		p.SetState(354)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 21, p.GetParserRuleContext())
	}

	return localctx
}

// IModifierInvocationContext is an interface to support dynamic dispatch.
type IModifierInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierInvocationContext differentiates from other interfaces.
	IsModifierInvocationContext()
}

type ModifierInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierInvocationContext() *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierInvocation
	return p
}

func (*ModifierInvocationContext) IsModifierInvocationContext() {}

func NewModifierInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierInvocation

	return p
}

func (s *ModifierInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierInvocationContext) IdentifierPath() IIdentifierPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPathContext)
}

func (s *ModifierInvocationContext) CallArgumentList() ICallArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentListContext)
}

func (s *ModifierInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierInvocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterModifierInvocation(s)
	}
}

func (s *ModifierInvocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitModifierInvocation(s)
	}
}

func (s *ModifierInvocationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitModifierInvocation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ModifierInvocation() (localctx IModifierInvocationContext) {
	this := p
	_ = this

	localctx = NewModifierInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SolidityParserRULE_modifierInvocation)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(355)
		p.IdentifierPath()
	}
	p.SetState(357)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 22, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(356)
			p.CallArgumentList()
		}

	}

	return localctx
}

// IVisibilityContext is an interface to support dynamic dispatch.
type IVisibilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVisibilityContext differentiates from other interfaces.
	IsVisibilityContext()
}

type VisibilityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVisibilityContext() *VisibilityContext {
	var p = new(VisibilityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_visibility
	return p
}

func (*VisibilityContext) IsVisibilityContext() {}

func NewVisibilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VisibilityContext {
	var p = new(VisibilityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_visibility

	return p
}

func (s *VisibilityContext) GetParser() antlr.Parser { return s.parser }

func (s *VisibilityContext) Internal() antlr.TerminalNode {
	return s.GetToken(SolidityParserInternal, 0)
}

func (s *VisibilityContext) External() antlr.TerminalNode {
	return s.GetToken(SolidityParserExternal, 0)
}

func (s *VisibilityContext) Private() antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivate, 0)
}

func (s *VisibilityContext) Public() antlr.TerminalNode {
	return s.GetToken(SolidityParserPublic, 0)
}

func (s *VisibilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VisibilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VisibilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterVisibility(s)
	}
}

func (s *VisibilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitVisibility(s)
	}
}

func (s *VisibilityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitVisibility(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Visibility() (localctx IVisibilityContext) {
	this := p
	_ = this

	localctx = NewVisibilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SolidityParserRULE_visibility)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(359)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-25)&-(0x1f+1)) == 0 && ((1<<uint(_la-25))&((1<<(SolidityParserExternal-25))|(1<<(SolidityParserInternal-25))|(1<<(SolidityParserPrivate-25))|(1<<(SolidityParserPublic-25)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_parameterDeclaration returns the _parameterDeclaration rule contexts.
	Get_parameterDeclaration() IParameterDeclarationContext

	// Set_parameterDeclaration sets the _parameterDeclaration rule contexts.
	Set_parameterDeclaration(IParameterDeclarationContext)

	// GetParameters returns the parameters rule context list.
	GetParameters() []IParameterDeclarationContext

	// SetParameters sets the parameters rule context list.
	SetParameters([]IParameterDeclarationContext)

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser                antlr.Parser
	_parameterDeclaration IParameterDeclarationContext
	parameters            []IParameterDeclarationContext
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) Get_parameterDeclaration() IParameterDeclarationContext {
	return s._parameterDeclaration
}

func (s *ParameterListContext) Set_parameterDeclaration(v IParameterDeclarationContext) {
	s._parameterDeclaration = v
}

func (s *ParameterListContext) GetParameters() []IParameterDeclarationContext { return s.parameters }

func (s *ParameterListContext) SetParameters(v []IParameterDeclarationContext) { s.parameters = v }

func (s *ParameterListContext) AllParameterDeclaration() []IParameterDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterDeclarationContext)(nil)).Elem())
	var tst = make([]IParameterDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterDeclarationContext)
		}
	}

	return tst
}

func (s *ParameterListContext) ParameterDeclaration(i int) IParameterDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterDeclarationContext)
}

func (s *ParameterListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *ParameterListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterParameterList(s)
	}
}

func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitParameterList(s)
	}
}

func (s *ParameterListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitParameterList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ParameterList() (localctx IParameterListContext) {
	this := p
	_ = this

	localctx = NewParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SolidityParserRULE_parameterList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(361)

		var _x = p.ParameterDeclaration()

		localctx.(*ParameterListContext)._parameterDeclaration = _x
	}
	localctx.(*ParameterListContext).parameters = append(localctx.(*ParameterListContext).parameters, localctx.(*ParameterListContext)._parameterDeclaration)
	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(362)
			p.Match(SolidityParserComma)
		}
		{
			p.SetState(363)

			var _x = p.ParameterDeclaration()

			localctx.(*ParameterListContext)._parameterDeclaration = _x
		}
		localctx.(*ParameterListContext).parameters = append(localctx.(*ParameterListContext).parameters, localctx.(*ParameterListContext)._parameterDeclaration)

		p.SetState(368)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IParameterDeclarationContext is an interface to support dynamic dispatch.
type IParameterDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetLocation returns the location rule contexts.
	GetLocation() IDataLocationContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetLocation sets the location rule contexts.
	SetLocation(IDataLocationContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsParameterDeclarationContext differentiates from other interfaces.
	IsParameterDeclarationContext()
}

type ParameterDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	varType  ITypeNameContext
	location IDataLocationContext
	name     IIdentifierContext
}

func NewEmptyParameterDeclarationContext() *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameterDeclaration
	return p
}

func (*ParameterDeclarationContext) IsParameterDeclarationContext() {}

func NewParameterDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterDeclarationContext {
	var p = new(ParameterDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameterDeclaration

	return p
}

func (s *ParameterDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterDeclarationContext) GetVarType() ITypeNameContext { return s.varType }

func (s *ParameterDeclarationContext) GetLocation() IDataLocationContext { return s.location }

func (s *ParameterDeclarationContext) GetName() IIdentifierContext { return s.name }

func (s *ParameterDeclarationContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *ParameterDeclarationContext) SetLocation(v IDataLocationContext) { s.location = v }

func (s *ParameterDeclarationContext) SetName(v IIdentifierContext) { s.name = v }

func (s *ParameterDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ParameterDeclarationContext) DataLocation() IDataLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataLocationContext)
}

func (s *ParameterDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ParameterDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterParameterDeclaration(s)
	}
}

func (s *ParameterDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitParameterDeclaration(s)
	}
}

func (s *ParameterDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitParameterDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ParameterDeclaration() (localctx IParameterDeclarationContext) {
	this := p
	_ = this

	localctx = NewParameterDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SolidityParserRULE_parameterDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(369)

		var _x = p.typeName(0)

		localctx.(*ParameterDeclarationContext).varType = _x
	}
	p.SetState(371)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserCalldata || _la == SolidityParserMemory || _la == SolidityParserStorage {
		{
			p.SetState(370)

			var _x = p.DataLocation()

			localctx.(*ParameterDeclarationContext).location = _x
		}

	}
	p.SetState(374)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(373)

			var _x = p.Identifier()

			localctx.(*ParameterDeclarationContext).name = _x
		}

	}

	return localctx
}

// IConstructorDefinitionContext is an interface to support dynamic dispatch.
type IConstructorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArguments returns the arguments rule contexts.
	GetArguments() IParameterListContext

	// GetBody returns the body rule contexts.
	GetBody() IBlockContext

	// SetArguments sets the arguments rule contexts.
	SetArguments(IParameterListContext)

	// SetBody sets the body rule contexts.
	SetBody(IBlockContext)

	// GetPayableSet returns the payableSet attribute.
	GetPayableSet() bool

	// GetVisibilitySet returns the visibilitySet attribute.
	GetVisibilitySet() bool

	// SetPayableSet sets the payableSet attribute.
	SetPayableSet(bool)

	// SetVisibilitySet sets the visibilitySet attribute.
	SetVisibilitySet(bool)

	// IsConstructorDefinitionContext differentiates from other interfaces.
	IsConstructorDefinitionContext()
}

type ConstructorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser        antlr.Parser
	payableSet    bool // TODO = false
	visibilitySet bool // TODO = false
	arguments     IParameterListContext
	body          IBlockContext
}

func NewEmptyConstructorDefinitionContext() *ConstructorDefinitionContext {
	var p = new(ConstructorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_constructorDefinition
	return p
}

func (*ConstructorDefinitionContext) IsConstructorDefinitionContext() {}

func NewConstructorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstructorDefinitionContext {
	var p = new(ConstructorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_constructorDefinition

	return p
}

func (s *ConstructorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstructorDefinitionContext) GetArguments() IParameterListContext { return s.arguments }

func (s *ConstructorDefinitionContext) GetBody() IBlockContext { return s.body }

func (s *ConstructorDefinitionContext) SetArguments(v IParameterListContext) { s.arguments = v }

func (s *ConstructorDefinitionContext) SetBody(v IBlockContext) { s.body = v }

func (s *ConstructorDefinitionContext) GetPayableSet() bool { return s.payableSet }

func (s *ConstructorDefinitionContext) GetVisibilitySet() bool { return s.visibilitySet }

func (s *ConstructorDefinitionContext) SetPayableSet(v bool) { s.payableSet = v }

func (s *ConstructorDefinitionContext) SetVisibilitySet(v bool) { s.visibilitySet = v }

func (s *ConstructorDefinitionContext) Constructor() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstructor, 0)
}

func (s *ConstructorDefinitionContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *ConstructorDefinitionContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *ConstructorDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ConstructorDefinitionContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *ConstructorDefinitionContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *ConstructorDefinitionContext) AllPayable() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPayable)
}

func (s *ConstructorDefinitionContext) Payable(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPayable, i)
}

func (s *ConstructorDefinitionContext) AllInternal() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternal)
}

func (s *ConstructorDefinitionContext) Internal(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternal, i)
}

func (s *ConstructorDefinitionContext) AllPublic() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublic)
}

func (s *ConstructorDefinitionContext) Public(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublic, i)
}

func (s *ConstructorDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ConstructorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstructorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstructorDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterConstructorDefinition(s)
	}
}

func (s *ConstructorDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitConstructorDefinition(s)
	}
}

func (s *ConstructorDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitConstructorDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ConstructorDefinition() (localctx IConstructorDefinitionContext) {
	this := p
	_ = this

	localctx = NewConstructorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SolidityParserRULE_constructorDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(376)
		p.Match(SolidityParserConstructor)
	}
	{
		p.SetState(377)
		p.Match(SolidityParserLParen)
	}
	p.SetState(379)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 26, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(378)

			var _x = p.ParameterList()

			localctx.(*ConstructorDefinitionContext).arguments = _x
		}

	}
	{
		p.SetState(381)
		p.Match(SolidityParserRParen)
	}
	p.SetState(394)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(392)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 27, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(382)
					p.ModifierInvocation()
				}

			case 2:
				p.SetState(383)

				if !(!localctx.(*ConstructorDefinitionContext).payableSet) {
					panic(antlr.NewFailedPredicateException(p, "!$payableSet", ""))
				}
				{
					p.SetState(384)
					p.Match(SolidityParserPayable)
				}
				localctx.(*ConstructorDefinitionContext).SetPayableSet(true)

			case 3:
				p.SetState(386)

				if !(!localctx.(*ConstructorDefinitionContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(387)
					p.Match(SolidityParserInternal)
				}
				localctx.(*ConstructorDefinitionContext).SetVisibilitySet(true)

			case 4:
				p.SetState(389)

				if !(!localctx.(*ConstructorDefinitionContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(390)
					p.Match(SolidityParserPublic)
				}
				localctx.(*ConstructorDefinitionContext).SetVisibilitySet(true)

			}

		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 28, p.GetParserRuleContext())
	}
	{
		p.SetState(397)

		var _x = p.Block()

		localctx.(*ConstructorDefinitionContext).body = _x
	}

	return localctx
}

// IStateMutabilityContext is an interface to support dynamic dispatch.
type IStateMutabilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateMutabilityContext differentiates from other interfaces.
	IsStateMutabilityContext()
}

type StateMutabilityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateMutabilityContext() *StateMutabilityContext {
	var p = new(StateMutabilityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateMutability
	return p
}

func (*StateMutabilityContext) IsStateMutabilityContext() {}

func NewStateMutabilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateMutabilityContext {
	var p = new(StateMutabilityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateMutability

	return p
}

func (s *StateMutabilityContext) GetParser() antlr.Parser { return s.parser }

func (s *StateMutabilityContext) Pure() antlr.TerminalNode {
	return s.GetToken(SolidityParserPure, 0)
}

func (s *StateMutabilityContext) View() antlr.TerminalNode {
	return s.GetToken(SolidityParserView, 0)
}

func (s *StateMutabilityContext) Payable() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayable, 0)
}

func (s *StateMutabilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateMutabilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StateMutabilityContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterStateMutability(s)
	}
}

func (s *StateMutabilityContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitStateMutability(s)
	}
}

func (s *StateMutabilityContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitStateMutability(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) StateMutability() (localctx IStateMutabilityContext) {
	this := p
	_ = this

	localctx = NewStateMutabilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SolidityParserRULE_stateMutability)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(399)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-49)&-(0x1f+1)) == 0 && ((1<<uint(_la-49))&((1<<(SolidityParserPayable-49))|(1<<(SolidityParserPure-49))|(1<<(SolidityParserView-49)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IOverrideSpecifierContext is an interface to support dynamic dispatch.
type IOverrideSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_identifierPath returns the _identifierPath rule contexts.
	Get_identifierPath() IIdentifierPathContext

	// Set_identifierPath sets the _identifierPath rule contexts.
	Set_identifierPath(IIdentifierPathContext)

	// GetOverrides returns the overrides rule context list.
	GetOverrides() []IIdentifierPathContext

	// SetOverrides sets the overrides rule context list.
	SetOverrides([]IIdentifierPathContext)

	// IsOverrideSpecifierContext differentiates from other interfaces.
	IsOverrideSpecifierContext()
}

type OverrideSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	_identifierPath IIdentifierPathContext
	overrides       []IIdentifierPathContext
}

func NewEmptyOverrideSpecifierContext() *OverrideSpecifierContext {
	var p = new(OverrideSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_overrideSpecifier
	return p
}

func (*OverrideSpecifierContext) IsOverrideSpecifierContext() {}

func NewOverrideSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideSpecifierContext {
	var p = new(OverrideSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_overrideSpecifier

	return p
}

func (s *OverrideSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideSpecifierContext) Get_identifierPath() IIdentifierPathContext {
	return s._identifierPath
}

func (s *OverrideSpecifierContext) Set_identifierPath(v IIdentifierPathContext) {
	s._identifierPath = v
}

func (s *OverrideSpecifierContext) GetOverrides() []IIdentifierPathContext { return s.overrides }

func (s *OverrideSpecifierContext) SetOverrides(v []IIdentifierPathContext) { s.overrides = v }

func (s *OverrideSpecifierContext) Override() antlr.TerminalNode {
	return s.GetToken(SolidityParserOverride, 0)
}

func (s *OverrideSpecifierContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *OverrideSpecifierContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *OverrideSpecifierContext) AllIdentifierPath() []IIdentifierPathContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem())
	var tst = make([]IIdentifierPathContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierPathContext)
		}
	}

	return tst
}

func (s *OverrideSpecifierContext) IdentifierPath(i int) IIdentifierPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPathContext)
}

func (s *OverrideSpecifierContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *OverrideSpecifierContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *OverrideSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *OverrideSpecifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterOverrideSpecifier(s)
	}
}

func (s *OverrideSpecifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitOverrideSpecifier(s)
	}
}

func (s *OverrideSpecifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitOverrideSpecifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) OverrideSpecifier() (localctx IOverrideSpecifierContext) {
	this := p
	_ = this

	localctx = NewOverrideSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SolidityParserRULE_overrideSpecifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(401)
		p.Match(SolidityParserOverride)
	}
	p.SetState(413)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 30, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(402)
			p.Match(SolidityParserLParen)
		}
		{
			p.SetState(403)

			var _x = p.IdentifierPath()

			localctx.(*OverrideSpecifierContext)._identifierPath = _x
		}
		localctx.(*OverrideSpecifierContext).overrides = append(localctx.(*OverrideSpecifierContext).overrides, localctx.(*OverrideSpecifierContext)._identifierPath)
		p.SetState(408)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserComma {
			{
				p.SetState(404)
				p.Match(SolidityParserComma)
			}
			{
				p.SetState(405)

				var _x = p.IdentifierPath()

				localctx.(*OverrideSpecifierContext)._identifierPath = _x
			}
			localctx.(*OverrideSpecifierContext).overrides = append(localctx.(*OverrideSpecifierContext).overrides, localctx.(*OverrideSpecifierContext)._identifierPath)

			p.SetState(410)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(411)
			p.Match(SolidityParserRParen)
		}

	}

	return localctx
}

// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArguments returns the arguments rule contexts.
	GetArguments() IParameterListContext

	// GetReturnParameters returns the returnParameters rule contexts.
	GetReturnParameters() IParameterListContext

	// GetBody returns the body rule contexts.
	GetBody() IBlockContext

	// SetArguments sets the arguments rule contexts.
	SetArguments(IParameterListContext)

	// SetReturnParameters sets the returnParameters rule contexts.
	SetReturnParameters(IParameterListContext)

	// SetBody sets the body rule contexts.
	SetBody(IBlockContext)

	// GetVisibilitySet returns the visibilitySet attribute.
	GetVisibilitySet() bool

	// GetMutabilitySet returns the mutabilitySet attribute.
	GetMutabilitySet() bool

	// GetVirtualSet returns the virtualSet attribute.
	GetVirtualSet() bool

	// GetOverrideSpecifierSet returns the overrideSpecifierSet attribute.
	GetOverrideSpecifierSet() bool

	// SetVisibilitySet sets the visibilitySet attribute.
	SetVisibilitySet(bool)

	// SetMutabilitySet sets the mutabilitySet attribute.
	SetMutabilitySet(bool)

	// SetVirtualSet sets the virtualSet attribute.
	SetVirtualSet(bool)

	// SetOverrideSpecifierSet sets the overrideSpecifierSet attribute.
	SetOverrideSpecifierSet(bool)

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	visibilitySet        bool // TODO = false
	mutabilitySet        bool // TODO = false
	virtualSet           bool // TODO = false
	overrideSpecifierSet bool // TODO = false
	arguments            IParameterListContext
	returnParameters     IParameterListContext
	body                 IBlockContext
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionDefinition
	return p
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) GetArguments() IParameterListContext { return s.arguments }

func (s *FunctionDefinitionContext) GetReturnParameters() IParameterListContext {
	return s.returnParameters
}

func (s *FunctionDefinitionContext) GetBody() IBlockContext { return s.body }

func (s *FunctionDefinitionContext) SetArguments(v IParameterListContext) { s.arguments = v }

func (s *FunctionDefinitionContext) SetReturnParameters(v IParameterListContext) {
	s.returnParameters = v
}

func (s *FunctionDefinitionContext) SetBody(v IBlockContext) { s.body = v }

func (s *FunctionDefinitionContext) GetVisibilitySet() bool { return s.visibilitySet }

func (s *FunctionDefinitionContext) GetMutabilitySet() bool { return s.mutabilitySet }

func (s *FunctionDefinitionContext) GetVirtualSet() bool { return s.virtualSet }

func (s *FunctionDefinitionContext) GetOverrideSpecifierSet() bool { return s.overrideSpecifierSet }

func (s *FunctionDefinitionContext) SetVisibilitySet(v bool) { s.visibilitySet = v }

func (s *FunctionDefinitionContext) SetMutabilitySet(v bool) { s.mutabilitySet = v }

func (s *FunctionDefinitionContext) SetVirtualSet(v bool) { s.virtualSet = v }

func (s *FunctionDefinitionContext) SetOverrideSpecifierSet(v bool) { s.overrideSpecifierSet = v }

func (s *FunctionDefinitionContext) Function() antlr.TerminalNode {
	return s.GetToken(SolidityParserFunction, 0)
}

func (s *FunctionDefinitionContext) AllLParen() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserLParen)
}

func (s *FunctionDefinitionContext) LParen(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, i)
}

func (s *FunctionDefinitionContext) AllRParen() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserRParen)
}

func (s *FunctionDefinitionContext) RParen(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, i)
}

func (s *FunctionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionDefinitionContext) Fallback() antlr.TerminalNode {
	return s.GetToken(SolidityParserFallback, 0)
}

func (s *FunctionDefinitionContext) Receive() antlr.TerminalNode {
	return s.GetToken(SolidityParserReceive, 0)
}

func (s *FunctionDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *FunctionDefinitionContext) AllVisibility() []IVisibilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVisibilityContext)(nil)).Elem())
	var tst = make([]IVisibilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVisibilityContext)
		}
	}

	return tst
}

func (s *FunctionDefinitionContext) Visibility(i int) IVisibilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVisibilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVisibilityContext)
}

func (s *FunctionDefinitionContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *FunctionDefinitionContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *FunctionDefinitionContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *FunctionDefinitionContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *FunctionDefinitionContext) AllVirtual() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserVirtual)
}

func (s *FunctionDefinitionContext) Virtual(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserVirtual, i)
}

func (s *FunctionDefinitionContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *FunctionDefinitionContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *FunctionDefinitionContext) Returns() antlr.TerminalNode {
	return s.GetToken(SolidityParserReturns, 0)
}

func (s *FunctionDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDefinitionContext) AllParameterList() []IParameterListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterListContext)(nil)).Elem())
	var tst = make([]IParameterListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterListContext)
		}
	}

	return tst
}

func (s *FunctionDefinitionContext) ParameterList(i int) IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterFunctionDefinition(s)
	}
}

func (s *FunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitFunctionDefinition(s)
	}
}

func (s *FunctionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitFunctionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	this := p
	_ = this

	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SolidityParserRULE_functionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(415)
		p.Match(SolidityParserFunction)
	}
	p.SetState(419)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserError, SolidityParserRevert, SolidityParserFrom, SolidityParserGlobal, SolidityParserIdentifier:
		{
			p.SetState(416)
			p.Identifier()
		}

	case SolidityParserFallback:
		{
			p.SetState(417)
			p.Match(SolidityParserFallback)
		}

	case SolidityParserReceive:
		{
			p.SetState(418)
			p.Match(SolidityParserReceive)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(421)
		p.Match(SolidityParserLParen)
	}
	p.SetState(423)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 32, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(422)

			var _x = p.ParameterList()

			localctx.(*FunctionDefinitionContext).arguments = _x
		}

	}
	{
		p.SetState(425)
		p.Match(SolidityParserRParen)
	}
	p.SetState(444)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(442)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 33, p.GetParserRuleContext()) {
			case 1:
				p.SetState(426)

				if !(!localctx.(*FunctionDefinitionContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(427)
					p.Visibility()
				}
				localctx.(*FunctionDefinitionContext).SetVisibilitySet(true)

			case 2:
				p.SetState(430)

				if !(!localctx.(*FunctionDefinitionContext).mutabilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$mutabilitySet", ""))
				}
				{
					p.SetState(431)
					p.StateMutability()
				}
				localctx.(*FunctionDefinitionContext).SetMutabilitySet(true)

			case 3:
				{
					p.SetState(434)
					p.ModifierInvocation()
				}

			case 4:
				p.SetState(435)

				if !(!localctx.(*FunctionDefinitionContext).virtualSet) {
					panic(antlr.NewFailedPredicateException(p, "!$virtualSet", ""))
				}
				{
					p.SetState(436)
					p.Match(SolidityParserVirtual)
				}
				localctx.(*FunctionDefinitionContext).SetVirtualSet(true)

			case 5:
				p.SetState(438)

				if !(!localctx.(*FunctionDefinitionContext).overrideSpecifierSet) {
					panic(antlr.NewFailedPredicateException(p, "!$overrideSpecifierSet", ""))
				}
				{
					p.SetState(439)
					p.OverrideSpecifier()
				}
				localctx.(*FunctionDefinitionContext).SetOverrideSpecifierSet(true)

			}

		}
		p.SetState(446)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 34, p.GetParserRuleContext())
	}
	p.SetState(452)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserReturns {
		{
			p.SetState(447)
			p.Match(SolidityParserReturns)
		}
		{
			p.SetState(448)
			p.Match(SolidityParserLParen)
		}
		{
			p.SetState(449)

			var _x = p.ParameterList()

			localctx.(*FunctionDefinitionContext).returnParameters = _x
		}
		{
			p.SetState(450)
			p.Match(SolidityParserRParen)
		}

	}
	p.SetState(456)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserSemicolon:
		{
			p.SetState(454)
			p.Match(SolidityParserSemicolon)
		}

	case SolidityParserLBrace:
		{
			p.SetState(455)

			var _x = p.Block()

			localctx.(*FunctionDefinitionContext).body = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IModifierDefinitionContext is an interface to support dynamic dispatch.
type IModifierDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetArguments returns the arguments rule contexts.
	GetArguments() IParameterListContext

	// GetBody returns the body rule contexts.
	GetBody() IBlockContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetArguments sets the arguments rule contexts.
	SetArguments(IParameterListContext)

	// SetBody sets the body rule contexts.
	SetBody(IBlockContext)

	// GetVirtualSet returns the virtualSet attribute.
	GetVirtualSet() bool

	// GetOverrideSpecifierSet returns the overrideSpecifierSet attribute.
	GetOverrideSpecifierSet() bool

	// SetVirtualSet sets the virtualSet attribute.
	SetVirtualSet(bool)

	// SetOverrideSpecifierSet sets the overrideSpecifierSet attribute.
	SetOverrideSpecifierSet(bool)

	// IsModifierDefinitionContext differentiates from other interfaces.
	IsModifierDefinitionContext()
}

type ModifierDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	virtualSet           bool // TODO = false
	overrideSpecifierSet bool // TODO = false
	name                 IIdentifierContext
	arguments            IParameterListContext
	body                 IBlockContext
}

func NewEmptyModifierDefinitionContext() *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierDefinition
	return p
}

func (*ModifierDefinitionContext) IsModifierDefinitionContext() {}

func NewModifierDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierDefinition

	return p
}

func (s *ModifierDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *ModifierDefinitionContext) GetArguments() IParameterListContext { return s.arguments }

func (s *ModifierDefinitionContext) GetBody() IBlockContext { return s.body }

func (s *ModifierDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *ModifierDefinitionContext) SetArguments(v IParameterListContext) { s.arguments = v }

func (s *ModifierDefinitionContext) SetBody(v IBlockContext) { s.body = v }

func (s *ModifierDefinitionContext) GetVirtualSet() bool { return s.virtualSet }

func (s *ModifierDefinitionContext) GetOverrideSpecifierSet() bool { return s.overrideSpecifierSet }

func (s *ModifierDefinitionContext) SetVirtualSet(v bool) { s.virtualSet = v }

func (s *ModifierDefinitionContext) SetOverrideSpecifierSet(v bool) { s.overrideSpecifierSet = v }

func (s *ModifierDefinitionContext) Modifier() antlr.TerminalNode {
	return s.GetToken(SolidityParserModifier, 0)
}

func (s *ModifierDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ModifierDefinitionContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *ModifierDefinitionContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *ModifierDefinitionContext) AllVirtual() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserVirtual)
}

func (s *ModifierDefinitionContext) Virtual(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserVirtual, i)
}

func (s *ModifierDefinitionContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *ModifierDefinitionContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *ModifierDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ModifierDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ModifierDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModifierDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterModifierDefinition(s)
	}
}

func (s *ModifierDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitModifierDefinition(s)
	}
}

func (s *ModifierDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitModifierDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ModifierDefinition() (localctx IModifierDefinitionContext) {
	this := p
	_ = this

	localctx = NewModifierDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SolidityParserRULE_modifierDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(458)
		p.Match(SolidityParserModifier)
	}
	{
		p.SetState(459)

		var _x = p.Identifier()

		localctx.(*ModifierDefinitionContext).name = _x
	}
	p.SetState(465)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 38, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(460)
			p.Match(SolidityParserLParen)
		}
		p.SetState(462)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(461)

				var _x = p.ParameterList()

				localctx.(*ModifierDefinitionContext).arguments = _x
			}

		}
		{
			p.SetState(464)
			p.Match(SolidityParserRParen)
		}

	}
	p.SetState(476)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(474)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 39, p.GetParserRuleContext()) {
			case 1:
				p.SetState(467)

				if !(!localctx.(*ModifierDefinitionContext).virtualSet) {
					panic(antlr.NewFailedPredicateException(p, "!$virtualSet", ""))
				}
				{
					p.SetState(468)
					p.Match(SolidityParserVirtual)
				}
				localctx.(*ModifierDefinitionContext).SetVirtualSet(true)

			case 2:
				p.SetState(470)

				if !(!localctx.(*ModifierDefinitionContext).overrideSpecifierSet) {
					panic(antlr.NewFailedPredicateException(p, "!$overrideSpecifierSet", ""))
				}
				{
					p.SetState(471)
					p.OverrideSpecifier()
				}
				localctx.(*ModifierDefinitionContext).SetOverrideSpecifierSet(true)

			}

		}
		p.SetState(478)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 40, p.GetParserRuleContext())
	}
	p.SetState(481)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserSemicolon:
		{
			p.SetState(479)
			p.Match(SolidityParserSemicolon)
		}

	case SolidityParserLBrace:
		{
			p.SetState(480)

			var _x = p.Block()

			localctx.(*ModifierDefinitionContext).body = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IFallbackFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFallbackFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKind returns the kind token.
	GetKind() antlr.Token

	// SetKind sets the kind token.
	SetKind(antlr.Token)

	// GetReturnParameters returns the returnParameters rule contexts.
	GetReturnParameters() IParameterListContext

	// GetBody returns the body rule contexts.
	GetBody() IBlockContext

	// SetReturnParameters sets the returnParameters rule contexts.
	SetReturnParameters(IParameterListContext)

	// SetBody sets the body rule contexts.
	SetBody(IBlockContext)

	// GetVisibilitySet returns the visibilitySet attribute.
	GetVisibilitySet() bool

	// GetMutabilitySet returns the mutabilitySet attribute.
	GetMutabilitySet() bool

	// GetVirtualSet returns the virtualSet attribute.
	GetVirtualSet() bool

	// GetOverrideSpecifierSet returns the overrideSpecifierSet attribute.
	GetOverrideSpecifierSet() bool

	// GetHasParameters returns the hasParameters attribute.
	GetHasParameters() bool

	// SetVisibilitySet sets the visibilitySet attribute.
	SetVisibilitySet(bool)

	// SetMutabilitySet sets the mutabilitySet attribute.
	SetMutabilitySet(bool)

	// SetVirtualSet sets the virtualSet attribute.
	SetVirtualSet(bool)

	// SetOverrideSpecifierSet sets the overrideSpecifierSet attribute.
	SetOverrideSpecifierSet(bool)

	// SetHasParameters sets the hasParameters attribute.
	SetHasParameters(bool)

	// IsFallbackFunctionDefinitionContext differentiates from other interfaces.
	IsFallbackFunctionDefinitionContext()
}

type FallbackFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	visibilitySet        bool // TODO = false
	mutabilitySet        bool // TODO = false
	virtualSet           bool // TODO = false
	overrideSpecifierSet bool // TODO = false
	hasParameters        bool // TODO = false
	kind                 antlr.Token
	returnParameters     IParameterListContext
	body                 IBlockContext
}

func NewEmptyFallbackFunctionDefinitionContext() *FallbackFunctionDefinitionContext {
	var p = new(FallbackFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_fallbackFunctionDefinition
	return p
}

func (*FallbackFunctionDefinitionContext) IsFallbackFunctionDefinitionContext() {}

func NewFallbackFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FallbackFunctionDefinitionContext {
	var p = new(FallbackFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_fallbackFunctionDefinition

	return p
}

func (s *FallbackFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FallbackFunctionDefinitionContext) GetKind() antlr.Token { return s.kind }

func (s *FallbackFunctionDefinitionContext) SetKind(v antlr.Token) { s.kind = v }

func (s *FallbackFunctionDefinitionContext) GetReturnParameters() IParameterListContext {
	return s.returnParameters
}

func (s *FallbackFunctionDefinitionContext) GetBody() IBlockContext { return s.body }

func (s *FallbackFunctionDefinitionContext) SetReturnParameters(v IParameterListContext) {
	s.returnParameters = v
}

func (s *FallbackFunctionDefinitionContext) SetBody(v IBlockContext) { s.body = v }

func (s *FallbackFunctionDefinitionContext) GetVisibilitySet() bool { return s.visibilitySet }

func (s *FallbackFunctionDefinitionContext) GetMutabilitySet() bool { return s.mutabilitySet }

func (s *FallbackFunctionDefinitionContext) GetVirtualSet() bool { return s.virtualSet }

func (s *FallbackFunctionDefinitionContext) GetOverrideSpecifierSet() bool {
	return s.overrideSpecifierSet
}

func (s *FallbackFunctionDefinitionContext) GetHasParameters() bool { return s.hasParameters }

func (s *FallbackFunctionDefinitionContext) SetVisibilitySet(v bool) { s.visibilitySet = v }

func (s *FallbackFunctionDefinitionContext) SetMutabilitySet(v bool) { s.mutabilitySet = v }

func (s *FallbackFunctionDefinitionContext) SetVirtualSet(v bool) { s.virtualSet = v }

func (s *FallbackFunctionDefinitionContext) SetOverrideSpecifierSet(v bool) {
	s.overrideSpecifierSet = v
}

func (s *FallbackFunctionDefinitionContext) SetHasParameters(v bool) { s.hasParameters = v }

func (s *FallbackFunctionDefinitionContext) AllLParen() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserLParen)
}

func (s *FallbackFunctionDefinitionContext) LParen(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, i)
}

func (s *FallbackFunctionDefinitionContext) AllRParen() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserRParen)
}

func (s *FallbackFunctionDefinitionContext) RParen(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, i)
}

func (s *FallbackFunctionDefinitionContext) Fallback() antlr.TerminalNode {
	return s.GetToken(SolidityParserFallback, 0)
}

func (s *FallbackFunctionDefinitionContext) Returns() antlr.TerminalNode {
	return s.GetToken(SolidityParserReturns, 0)
}

func (s *FallbackFunctionDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *FallbackFunctionDefinitionContext) AllParameterList() []IParameterListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterListContext)(nil)).Elem())
	var tst = make([]IParameterListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterListContext)
		}
	}

	return tst
}

func (s *FallbackFunctionDefinitionContext) ParameterList(i int) IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FallbackFunctionDefinitionContext) AllExternal() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternal)
}

func (s *FallbackFunctionDefinitionContext) External(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternal, i)
}

func (s *FallbackFunctionDefinitionContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *FallbackFunctionDefinitionContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *FallbackFunctionDefinitionContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *FallbackFunctionDefinitionContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *FallbackFunctionDefinitionContext) AllVirtual() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserVirtual)
}

func (s *FallbackFunctionDefinitionContext) Virtual(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserVirtual, i)
}

func (s *FallbackFunctionDefinitionContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *FallbackFunctionDefinitionContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *FallbackFunctionDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FallbackFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FallbackFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FallbackFunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterFallbackFunctionDefinition(s)
	}
}

func (s *FallbackFunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitFallbackFunctionDefinition(s)
	}
}

func (s *FallbackFunctionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitFallbackFunctionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) FallbackFunctionDefinition() (localctx IFallbackFunctionDefinitionContext) {
	this := p
	_ = this

	localctx = NewFallbackFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SolidityParserRULE_fallbackFunctionDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(483)

		var _m = p.Match(SolidityParserFallback)

		localctx.(*FallbackFunctionDefinitionContext).kind = _m
	}
	{
		p.SetState(484)
		p.Match(SolidityParserLParen)
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 42, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(485)
			p.ParameterList()
		}
		localctx.(*FallbackFunctionDefinitionContext).SetHasParameters(true)

	}
	{
		p.SetState(490)
		p.Match(SolidityParserRParen)
	}
	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(506)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 43, p.GetParserRuleContext()) {
			case 1:
				p.SetState(491)

				if !(!localctx.(*FallbackFunctionDefinitionContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(492)
					p.Match(SolidityParserExternal)
				}
				localctx.(*FallbackFunctionDefinitionContext).SetVisibilitySet(true)

			case 2:
				p.SetState(494)

				if !(!localctx.(*FallbackFunctionDefinitionContext).mutabilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$mutabilitySet", ""))
				}
				{
					p.SetState(495)
					p.StateMutability()
				}
				localctx.(*FallbackFunctionDefinitionContext).SetMutabilitySet(true)

			case 3:
				{
					p.SetState(498)
					p.ModifierInvocation()
				}

			case 4:
				p.SetState(499)

				if !(!localctx.(*FallbackFunctionDefinitionContext).virtualSet) {
					panic(antlr.NewFailedPredicateException(p, "!$virtualSet", ""))
				}
				{
					p.SetState(500)
					p.Match(SolidityParserVirtual)
				}
				localctx.(*FallbackFunctionDefinitionContext).SetVirtualSet(true)

			case 5:
				p.SetState(502)

				if !(!localctx.(*FallbackFunctionDefinitionContext).overrideSpecifierSet) {
					panic(antlr.NewFailedPredicateException(p, "!$overrideSpecifierSet", ""))
				}
				{
					p.SetState(503)
					p.OverrideSpecifier()
				}
				localctx.(*FallbackFunctionDefinitionContext).SetOverrideSpecifierSet(true)

			}

		}
		p.SetState(510)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext())
	}
	p.SetState(518)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 45, p.GetParserRuleContext()) {
	case 1:
		p.SetState(511)

		if !(localctx.(*FallbackFunctionDefinitionContext).hasParameters) {
			panic(antlr.NewFailedPredicateException(p, "$hasParameters", ""))
		}
		{
			p.SetState(512)
			p.Match(SolidityParserReturns)
		}
		{
			p.SetState(513)
			p.Match(SolidityParserLParen)
		}
		{
			p.SetState(514)

			var _x = p.ParameterList()

			localctx.(*FallbackFunctionDefinitionContext).returnParameters = _x
		}
		{
			p.SetState(515)
			p.Match(SolidityParserRParen)
		}

	case 2:
		p.SetState(517)

		if !(!localctx.(*FallbackFunctionDefinitionContext).hasParameters) {
			panic(antlr.NewFailedPredicateException(p, "!$hasParameters", ""))
		}

	}
	p.SetState(522)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserSemicolon:
		{
			p.SetState(520)
			p.Match(SolidityParserSemicolon)
		}

	case SolidityParserLBrace:
		{
			p.SetState(521)

			var _x = p.Block()

			localctx.(*FallbackFunctionDefinitionContext).body = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IReceiveFunctionDefinitionContext is an interface to support dynamic dispatch.
type IReceiveFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKind returns the kind token.
	GetKind() antlr.Token

	// SetKind sets the kind token.
	SetKind(antlr.Token)

	// GetBody returns the body rule contexts.
	GetBody() IBlockContext

	// SetBody sets the body rule contexts.
	SetBody(IBlockContext)

	// GetVisibilitySet returns the visibilitySet attribute.
	GetVisibilitySet() bool

	// GetMutabilitySet returns the mutabilitySet attribute.
	GetMutabilitySet() bool

	// GetVirtualSet returns the virtualSet attribute.
	GetVirtualSet() bool

	// GetOverrideSpecifierSet returns the overrideSpecifierSet attribute.
	GetOverrideSpecifierSet() bool

	// SetVisibilitySet sets the visibilitySet attribute.
	SetVisibilitySet(bool)

	// SetMutabilitySet sets the mutabilitySet attribute.
	SetMutabilitySet(bool)

	// SetVirtualSet sets the virtualSet attribute.
	SetVirtualSet(bool)

	// SetOverrideSpecifierSet sets the overrideSpecifierSet attribute.
	SetOverrideSpecifierSet(bool)

	// IsReceiveFunctionDefinitionContext differentiates from other interfaces.
	IsReceiveFunctionDefinitionContext()
}

type ReceiveFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	visibilitySet        bool // TODO = false
	mutabilitySet        bool // TODO = false
	virtualSet           bool // TODO = false
	overrideSpecifierSet bool // TODO = false
	kind                 antlr.Token
	body                 IBlockContext
}

func NewEmptyReceiveFunctionDefinitionContext() *ReceiveFunctionDefinitionContext {
	var p = new(ReceiveFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_receiveFunctionDefinition
	return p
}

func (*ReceiveFunctionDefinitionContext) IsReceiveFunctionDefinitionContext() {}

func NewReceiveFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReceiveFunctionDefinitionContext {
	var p = new(ReceiveFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_receiveFunctionDefinition

	return p
}

func (s *ReceiveFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ReceiveFunctionDefinitionContext) GetKind() antlr.Token { return s.kind }

func (s *ReceiveFunctionDefinitionContext) SetKind(v antlr.Token) { s.kind = v }

func (s *ReceiveFunctionDefinitionContext) GetBody() IBlockContext { return s.body }

func (s *ReceiveFunctionDefinitionContext) SetBody(v IBlockContext) { s.body = v }

func (s *ReceiveFunctionDefinitionContext) GetVisibilitySet() bool { return s.visibilitySet }

func (s *ReceiveFunctionDefinitionContext) GetMutabilitySet() bool { return s.mutabilitySet }

func (s *ReceiveFunctionDefinitionContext) GetVirtualSet() bool { return s.virtualSet }

func (s *ReceiveFunctionDefinitionContext) GetOverrideSpecifierSet() bool {
	return s.overrideSpecifierSet
}

func (s *ReceiveFunctionDefinitionContext) SetVisibilitySet(v bool) { s.visibilitySet = v }

func (s *ReceiveFunctionDefinitionContext) SetMutabilitySet(v bool) { s.mutabilitySet = v }

func (s *ReceiveFunctionDefinitionContext) SetVirtualSet(v bool) { s.virtualSet = v }

func (s *ReceiveFunctionDefinitionContext) SetOverrideSpecifierSet(v bool) {
	s.overrideSpecifierSet = v
}

func (s *ReceiveFunctionDefinitionContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *ReceiveFunctionDefinitionContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *ReceiveFunctionDefinitionContext) Receive() antlr.TerminalNode {
	return s.GetToken(SolidityParserReceive, 0)
}

func (s *ReceiveFunctionDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ReceiveFunctionDefinitionContext) AllExternal() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternal)
}

func (s *ReceiveFunctionDefinitionContext) External(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternal, i)
}

func (s *ReceiveFunctionDefinitionContext) AllPayable() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPayable)
}

func (s *ReceiveFunctionDefinitionContext) Payable(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPayable, i)
}

func (s *ReceiveFunctionDefinitionContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *ReceiveFunctionDefinitionContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *ReceiveFunctionDefinitionContext) AllVirtual() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserVirtual)
}

func (s *ReceiveFunctionDefinitionContext) Virtual(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserVirtual, i)
}

func (s *ReceiveFunctionDefinitionContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *ReceiveFunctionDefinitionContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *ReceiveFunctionDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ReceiveFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReceiveFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReceiveFunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterReceiveFunctionDefinition(s)
	}
}

func (s *ReceiveFunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitReceiveFunctionDefinition(s)
	}
}

func (s *ReceiveFunctionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitReceiveFunctionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ReceiveFunctionDefinition() (localctx IReceiveFunctionDefinitionContext) {
	this := p
	_ = this

	localctx = NewReceiveFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SolidityParserRULE_receiveFunctionDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(524)

		var _m = p.Match(SolidityParserReceive)

		localctx.(*ReceiveFunctionDefinitionContext).kind = _m
	}
	{
		p.SetState(525)
		p.Match(SolidityParserLParen)
	}
	{
		p.SetState(526)
		p.Match(SolidityParserRParen)
	}
	p.SetState(543)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(541)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 47, p.GetParserRuleContext()) {
			case 1:
				p.SetState(527)

				if !(!localctx.(*ReceiveFunctionDefinitionContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(528)
					p.Match(SolidityParserExternal)
				}
				localctx.(*ReceiveFunctionDefinitionContext).SetVisibilitySet(true)

			case 2:
				p.SetState(530)

				if !(!localctx.(*ReceiveFunctionDefinitionContext).mutabilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$mutabilitySet", ""))
				}
				{
					p.SetState(531)
					p.Match(SolidityParserPayable)
				}
				localctx.(*ReceiveFunctionDefinitionContext).SetMutabilitySet(true)

			case 3:
				{
					p.SetState(533)
					p.ModifierInvocation()
				}

			case 4:
				p.SetState(534)

				if !(!localctx.(*ReceiveFunctionDefinitionContext).virtualSet) {
					panic(antlr.NewFailedPredicateException(p, "!$virtualSet", ""))
				}
				{
					p.SetState(535)
					p.Match(SolidityParserVirtual)
				}
				localctx.(*ReceiveFunctionDefinitionContext).SetVirtualSet(true)

			case 5:
				p.SetState(537)

				if !(!localctx.(*ReceiveFunctionDefinitionContext).overrideSpecifierSet) {
					panic(antlr.NewFailedPredicateException(p, "!$overrideSpecifierSet", ""))
				}
				{
					p.SetState(538)
					p.OverrideSpecifier()
				}
				localctx.(*ReceiveFunctionDefinitionContext).SetOverrideSpecifierSet(true)

			}

		}
		p.SetState(545)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 48, p.GetParserRuleContext())
	}
	p.SetState(548)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserSemicolon:
		{
			p.SetState(546)
			p.Match(SolidityParserSemicolon)
		}

	case SolidityParserLBrace:
		{
			p.SetState(547)

			var _x = p.Block()

			localctx.(*ReceiveFunctionDefinitionContext).body = _x
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IStructDefinitionContext is an interface to support dynamic dispatch.
type IStructDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetMembers returns the members rule contexts.
	GetMembers() IStructMemberContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetMembers sets the members rule contexts.
	SetMembers(IStructMemberContext)

	// IsStructDefinitionContext differentiates from other interfaces.
	IsStructDefinitionContext()
}

type StructDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	name    IIdentifierContext
	members IStructMemberContext
}

func NewEmptyStructDefinitionContext() *StructDefinitionContext {
	var p = new(StructDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_structDefinition
	return p
}

func (*StructDefinitionContext) IsStructDefinitionContext() {}

func NewStructDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDefinitionContext {
	var p = new(StructDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_structDefinition

	return p
}

func (s *StructDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *StructDefinitionContext) GetMembers() IStructMemberContext { return s.members }

func (s *StructDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *StructDefinitionContext) SetMembers(v IStructMemberContext) { s.members = v }

func (s *StructDefinitionContext) Struct() antlr.TerminalNode {
	return s.GetToken(SolidityParserStruct, 0)
}

func (s *StructDefinitionContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *StructDefinitionContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *StructDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructDefinitionContext) AllStructMember() []IStructMemberContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStructMemberContext)(nil)).Elem())
	var tst = make([]IStructMemberContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStructMemberContext)
		}
	}

	return tst
}

func (s *StructDefinitionContext) StructMember(i int) IStructMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructMemberContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStructMemberContext)
}

func (s *StructDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterStructDefinition(s)
	}
}

func (s *StructDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitStructDefinition(s)
	}
}

func (s *StructDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitStructDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) StructDefinition() (localctx IStructDefinitionContext) {
	this := p
	_ = this

	localctx = NewStructDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SolidityParserRULE_structDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(550)
		p.Match(SolidityParserStruct)
	}
	{
		p.SetState(551)

		var _x = p.Identifier()

		localctx.(*StructDefinitionContext).name = _x
	}
	{
		p.SetState(552)
		p.Match(SolidityParserLBrace)
	}
	p.SetState(554)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(553)

				var _x = p.StructMember()

				localctx.(*StructDefinitionContext).members = _x
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(556)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 50, p.GetParserRuleContext())
	}
	{
		p.SetState(558)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// IStructMemberContext is an interface to support dynamic dispatch.
type IStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsStructMemberContext differentiates from other interfaces.
	IsStructMemberContext()
}

type StructMemberContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	varType ITypeNameContext
	name    IIdentifierContext
}

func NewEmptyStructMemberContext() *StructMemberContext {
	var p = new(StructMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_structMember
	return p
}

func (*StructMemberContext) IsStructMemberContext() {}

func NewStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberContext {
	var p = new(StructMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_structMember

	return p
}

func (s *StructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberContext) GetVarType() ITypeNameContext { return s.varType }

func (s *StructMemberContext) GetName() IIdentifierContext { return s.name }

func (s *StructMemberContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *StructMemberContext) SetName(v IIdentifierContext) { s.name = v }

func (s *StructMemberContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *StructMemberContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StructMemberContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterStructMember(s)
	}
}

func (s *StructMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitStructMember(s)
	}
}

func (s *StructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) StructMember() (localctx IStructMemberContext) {
	this := p
	_ = this

	localctx = NewStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SolidityParserRULE_structMember)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(560)

		var _x = p.typeName(0)

		localctx.(*StructMemberContext).varType = _x
	}
	{
		p.SetState(561)

		var _x = p.Identifier()

		localctx.(*StructMemberContext).name = _x
	}
	{
		p.SetState(562)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IEnumDefinitionContext is an interface to support dynamic dispatch.
type IEnumDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// Get_identifier returns the _identifier rule contexts.
	Get_identifier() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Set_identifier sets the _identifier rule contexts.
	Set_identifier(IIdentifierContext)

	// GetEnumValues returns the enumValues rule context list.
	GetEnumValues() []IIdentifierContext

	// SetEnumValues sets the enumValues rule context list.
	SetEnumValues([]IIdentifierContext)

	// IsEnumDefinitionContext differentiates from other interfaces.
	IsEnumDefinitionContext()
}

type EnumDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser      antlr.Parser
	name        IIdentifierContext
	_identifier IIdentifierContext
	enumValues  []IIdentifierContext
}

func NewEmptyEnumDefinitionContext() *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumDefinition
	return p
}

func (*EnumDefinitionContext) IsEnumDefinitionContext() {}

func NewEnumDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumDefinition

	return p
}

func (s *EnumDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *EnumDefinitionContext) Get_identifier() IIdentifierContext { return s._identifier }

func (s *EnumDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *EnumDefinitionContext) Set_identifier(v IIdentifierContext) { s._identifier = v }

func (s *EnumDefinitionContext) GetEnumValues() []IIdentifierContext { return s.enumValues }

func (s *EnumDefinitionContext) SetEnumValues(v []IIdentifierContext) { s.enumValues = v }

func (s *EnumDefinitionContext) Enum() antlr.TerminalNode {
	return s.GetToken(SolidityParserEnum, 0)
}

func (s *EnumDefinitionContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *EnumDefinitionContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *EnumDefinitionContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *EnumDefinitionContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumDefinitionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *EnumDefinitionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *EnumDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterEnumDefinition(s)
	}
}

func (s *EnumDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitEnumDefinition(s)
	}
}

func (s *EnumDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitEnumDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) EnumDefinition() (localctx IEnumDefinitionContext) {
	this := p
	_ = this

	localctx = NewEnumDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SolidityParserRULE_enumDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(564)
		p.Match(SolidityParserEnum)
	}
	{
		p.SetState(565)

		var _x = p.Identifier()

		localctx.(*EnumDefinitionContext).name = _x
	}
	{
		p.SetState(566)
		p.Match(SolidityParserLBrace)
	}
	{
		p.SetState(567)

		var _x = p.Identifier()

		localctx.(*EnumDefinitionContext)._identifier = _x
	}
	localctx.(*EnumDefinitionContext).enumValues = append(localctx.(*EnumDefinitionContext).enumValues, localctx.(*EnumDefinitionContext)._identifier)
	p.SetState(572)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(568)
			p.Match(SolidityParserComma)
		}
		{
			p.SetState(569)

			var _x = p.Identifier()

			localctx.(*EnumDefinitionContext)._identifier = _x
		}
		localctx.(*EnumDefinitionContext).enumValues = append(localctx.(*EnumDefinitionContext).enumValues, localctx.(*EnumDefinitionContext)._identifier)

		p.SetState(574)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(575)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// IUserDefinedValueTypeDefinitionContext is an interface to support dynamic dispatch.
type IUserDefinedValueTypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsUserDefinedValueTypeDefinitionContext differentiates from other interfaces.
	IsUserDefinedValueTypeDefinitionContext()
}

type UserDefinedValueTypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	name   IIdentifierContext
}

func NewEmptyUserDefinedValueTypeDefinitionContext() *UserDefinedValueTypeDefinitionContext {
	var p = new(UserDefinedValueTypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_userDefinedValueTypeDefinition
	return p
}

func (*UserDefinedValueTypeDefinitionContext) IsUserDefinedValueTypeDefinitionContext() {}

func NewUserDefinedValueTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserDefinedValueTypeDefinitionContext {
	var p = new(UserDefinedValueTypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_userDefinedValueTypeDefinition

	return p
}

func (s *UserDefinedValueTypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *UserDefinedValueTypeDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *UserDefinedValueTypeDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *UserDefinedValueTypeDefinitionContext) Type() antlr.TerminalNode {
	return s.GetToken(SolidityParserType, 0)
}

func (s *UserDefinedValueTypeDefinitionContext) Is() antlr.TerminalNode {
	return s.GetToken(SolidityParserIs, 0)
}

func (s *UserDefinedValueTypeDefinitionContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *UserDefinedValueTypeDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *UserDefinedValueTypeDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UserDefinedValueTypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserDefinedValueTypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UserDefinedValueTypeDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterUserDefinedValueTypeDefinition(s)
	}
}

func (s *UserDefinedValueTypeDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitUserDefinedValueTypeDefinition(s)
	}
}

func (s *UserDefinedValueTypeDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitUserDefinedValueTypeDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) UserDefinedValueTypeDefinition() (localctx IUserDefinedValueTypeDefinitionContext) {
	this := p
	_ = this

	localctx = NewUserDefinedValueTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SolidityParserRULE_userDefinedValueTypeDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(577)
		p.Match(SolidityParserType)
	}
	{
		p.SetState(578)

		var _x = p.Identifier()

		localctx.(*UserDefinedValueTypeDefinitionContext).name = _x
	}
	{
		p.SetState(579)
		p.Match(SolidityParserIs)
	}
	{
		p.SetState(580)
		p.ElementaryTypeName(true)
	}
	{
		p.SetState(581)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IStateVariableDeclarationContext is an interface to support dynamic dispatch.
type IStateVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetInitialValue returns the initialValue rule contexts.
	GetInitialValue() IExpressionContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetInitialValue sets the initialValue rule contexts.
	SetInitialValue(IExpressionContext)

	// GetConstantnessSet returns the constantnessSet attribute.
	GetConstantnessSet() bool

	// GetVisibilitySet returns the visibilitySet attribute.
	GetVisibilitySet() bool

	// GetOverrideSpecifierSet returns the overrideSpecifierSet attribute.
	GetOverrideSpecifierSet() bool

	// SetConstantnessSet sets the constantnessSet attribute.
	SetConstantnessSet(bool)

	// SetVisibilitySet sets the visibilitySet attribute.
	SetVisibilitySet(bool)

	// SetOverrideSpecifierSet sets the overrideSpecifierSet attribute.
	SetOverrideSpecifierSet(bool)

	// IsStateVariableDeclarationContext differentiates from other interfaces.
	IsStateVariableDeclarationContext()
}

type StateVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	constantnessSet      bool // TODO = false
	visibilitySet        bool // TODO = false
	overrideSpecifierSet bool // TODO = false
	varType              ITypeNameContext
	name                 IIdentifierContext
	initialValue         IExpressionContext
}

func NewEmptyStateVariableDeclarationContext() *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration
	return p
}

func (*StateVariableDeclarationContext) IsStateVariableDeclarationContext() {}

func NewStateVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration

	return p
}

func (s *StateVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StateVariableDeclarationContext) GetVarType() ITypeNameContext { return s.varType }

func (s *StateVariableDeclarationContext) GetName() IIdentifierContext { return s.name }

func (s *StateVariableDeclarationContext) GetInitialValue() IExpressionContext { return s.initialValue }

func (s *StateVariableDeclarationContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *StateVariableDeclarationContext) SetName(v IIdentifierContext) { s.name = v }

func (s *StateVariableDeclarationContext) SetInitialValue(v IExpressionContext) { s.initialValue = v }

func (s *StateVariableDeclarationContext) GetConstantnessSet() bool { return s.constantnessSet }

func (s *StateVariableDeclarationContext) GetVisibilitySet() bool { return s.visibilitySet }

func (s *StateVariableDeclarationContext) GetOverrideSpecifierSet() bool {
	return s.overrideSpecifierSet
}

func (s *StateVariableDeclarationContext) SetConstantnessSet(v bool) { s.constantnessSet = v }

func (s *StateVariableDeclarationContext) SetVisibilitySet(v bool) { s.visibilitySet = v }

func (s *StateVariableDeclarationContext) SetOverrideSpecifierSet(v bool) {
	s.overrideSpecifierSet = v
}

func (s *StateVariableDeclarationContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *StateVariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StateVariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StateVariableDeclarationContext) AllPublic() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublic)
}

func (s *StateVariableDeclarationContext) Public(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublic, i)
}

func (s *StateVariableDeclarationContext) AllPrivate() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivate)
}

func (s *StateVariableDeclarationContext) Private(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivate, i)
}

func (s *StateVariableDeclarationContext) AllInternal() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternal)
}

func (s *StateVariableDeclarationContext) Internal(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternal, i)
}

func (s *StateVariableDeclarationContext) AllConstant() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserConstant)
}

func (s *StateVariableDeclarationContext) Constant(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserConstant, i)
}

func (s *StateVariableDeclarationContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *StateVariableDeclarationContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *StateVariableDeclarationContext) AllImmutable() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserImmutable)
}

func (s *StateVariableDeclarationContext) Immutable(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserImmutable, i)
}

func (s *StateVariableDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssign, 0)
}

func (s *StateVariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StateVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StateVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterStateVariableDeclaration(s)
	}
}

func (s *StateVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitStateVariableDeclaration(s)
	}
}

func (s *StateVariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitStateVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) StateVariableDeclaration() (localctx IStateVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewStateVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SolidityParserRULE_stateVariableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(583)

		var _x = p.typeName(0)

		localctx.(*StateVariableDeclarationContext).varType = _x
	}
	p.SetState(605)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(603)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 52, p.GetParserRuleContext()) {
			case 1:
				p.SetState(584)

				if !(!localctx.(*StateVariableDeclarationContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(585)
					p.Match(SolidityParserPublic)
				}
				localctx.(*StateVariableDeclarationContext).SetVisibilitySet(true)

			case 2:
				p.SetState(587)

				if !(!localctx.(*StateVariableDeclarationContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(588)
					p.Match(SolidityParserPrivate)
				}
				localctx.(*StateVariableDeclarationContext).SetVisibilitySet(true)

			case 3:
				p.SetState(590)

				if !(!localctx.(*StateVariableDeclarationContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(591)
					p.Match(SolidityParserInternal)
				}
				localctx.(*StateVariableDeclarationContext).SetVisibilitySet(true)

			case 4:
				p.SetState(593)

				if !(!localctx.(*StateVariableDeclarationContext).constantnessSet) {
					panic(antlr.NewFailedPredicateException(p, "!$constantnessSet", ""))
				}
				{
					p.SetState(594)
					p.Match(SolidityParserConstant)
				}
				localctx.(*StateVariableDeclarationContext).SetConstantnessSet(true)

			case 5:
				p.SetState(596)

				if !(!localctx.(*StateVariableDeclarationContext).overrideSpecifierSet) {
					panic(antlr.NewFailedPredicateException(p, "!$overrideSpecifierSet", ""))
				}
				{
					p.SetState(597)
					p.OverrideSpecifier()
				}
				localctx.(*StateVariableDeclarationContext).SetOverrideSpecifierSet(true)

			case 6:
				p.SetState(600)

				if !(!localctx.(*StateVariableDeclarationContext).constantnessSet) {
					panic(antlr.NewFailedPredicateException(p, "!$constantnessSet", ""))
				}
				{
					p.SetState(601)
					p.Match(SolidityParserImmutable)
				}
				localctx.(*StateVariableDeclarationContext).SetConstantnessSet(true)

			}

		}
		p.SetState(607)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext())
	}
	{
		p.SetState(608)

		var _x = p.Identifier()

		localctx.(*StateVariableDeclarationContext).name = _x
	}
	p.SetState(611)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAssign {
		{
			p.SetState(609)
			p.Match(SolidityParserAssign)
		}
		{
			p.SetState(610)

			var _x = p.expression(0)

			localctx.(*StateVariableDeclarationContext).initialValue = _x
		}

	}
	{
		p.SetState(613)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IConstantVariableDeclarationContext is an interface to support dynamic dispatch.
type IConstantVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// GetInitialValue returns the initialValue rule contexts.
	GetInitialValue() IExpressionContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// SetInitialValue sets the initialValue rule contexts.
	SetInitialValue(IExpressionContext)

	// IsConstantVariableDeclarationContext differentiates from other interfaces.
	IsConstantVariableDeclarationContext()
}

type ConstantVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser       antlr.Parser
	varType      ITypeNameContext
	name         IIdentifierContext
	initialValue IExpressionContext
}

func NewEmptyConstantVariableDeclarationContext() *ConstantVariableDeclarationContext {
	var p = new(ConstantVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_constantVariableDeclaration
	return p
}

func (*ConstantVariableDeclarationContext) IsConstantVariableDeclarationContext() {}

func NewConstantVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantVariableDeclarationContext {
	var p = new(ConstantVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_constantVariableDeclaration

	return p
}

func (s *ConstantVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantVariableDeclarationContext) GetVarType() ITypeNameContext { return s.varType }

func (s *ConstantVariableDeclarationContext) GetName() IIdentifierContext { return s.name }

func (s *ConstantVariableDeclarationContext) GetInitialValue() IExpressionContext {
	return s.initialValue
}

func (s *ConstantVariableDeclarationContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *ConstantVariableDeclarationContext) SetName(v IIdentifierContext) { s.name = v }

func (s *ConstantVariableDeclarationContext) SetInitialValue(v IExpressionContext) {
	s.initialValue = v
}

func (s *ConstantVariableDeclarationContext) Constant() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstant, 0)
}

func (s *ConstantVariableDeclarationContext) Assign() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssign, 0)
}

func (s *ConstantVariableDeclarationContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ConstantVariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ConstantVariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConstantVariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConstantVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterConstantVariableDeclaration(s)
	}
}

func (s *ConstantVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitConstantVariableDeclaration(s)
	}
}

func (s *ConstantVariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitConstantVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ConstantVariableDeclaration() (localctx IConstantVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewConstantVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SolidityParserRULE_constantVariableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(615)

		var _x = p.typeName(0)

		localctx.(*ConstantVariableDeclarationContext).varType = _x
	}
	{
		p.SetState(616)
		p.Match(SolidityParserConstant)
	}
	{
		p.SetState(617)

		var _x = p.Identifier()

		localctx.(*ConstantVariableDeclarationContext).name = _x
	}
	{
		p.SetState(618)
		p.Match(SolidityParserAssign)
	}
	{
		p.SetState(619)

		var _x = p.expression(0)

		localctx.(*ConstantVariableDeclarationContext).initialValue = _x
	}
	{
		p.SetState(620)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IEventParameterContext is an interface to support dynamic dispatch.
type IEventParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsEventParameterContext differentiates from other interfaces.
	IsEventParameterContext()
}

type EventParameterContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	varType ITypeNameContext
	name    IIdentifierContext
}

func NewEmptyEventParameterContext() *EventParameterContext {
	var p = new(EventParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameter
	return p
}

func (*EventParameterContext) IsEventParameterContext() {}

func NewEventParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterContext {
	var p = new(EventParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameter

	return p
}

func (s *EventParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterContext) GetVarType() ITypeNameContext { return s.varType }

func (s *EventParameterContext) GetName() IIdentifierContext { return s.name }

func (s *EventParameterContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *EventParameterContext) SetName(v IIdentifierContext) { s.name = v }

func (s *EventParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EventParameterContext) Indexed() antlr.TerminalNode {
	return s.GetToken(SolidityParserIndexed, 0)
}

func (s *EventParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterEventParameter(s)
	}
}

func (s *EventParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitEventParameter(s)
	}
}

func (s *EventParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitEventParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) EventParameter() (localctx IEventParameterContext) {
	this := p
	_ = this

	localctx = NewEventParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SolidityParserRULE_eventParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(622)

		var _x = p.typeName(0)

		localctx.(*EventParameterContext).varType = _x
	}
	p.SetState(624)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserIndexed {
		{
			p.SetState(623)
			p.Match(SolidityParserIndexed)
		}

	}
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(626)

			var _x = p.Identifier()

			localctx.(*EventParameterContext).name = _x
		}

	}

	return localctx
}

// IEventDefinitionContext is an interface to support dynamic dispatch.
type IEventDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// Get_eventParameter returns the _eventParameter rule contexts.
	Get_eventParameter() IEventParameterContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Set_eventParameter sets the _eventParameter rule contexts.
	Set_eventParameter(IEventParameterContext)

	// GetParameters returns the parameters rule context list.
	GetParameters() []IEventParameterContext

	// SetParameters sets the parameters rule context list.
	SetParameters([]IEventParameterContext)

	// IsEventDefinitionContext differentiates from other interfaces.
	IsEventDefinitionContext()
}

type EventDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	name            IIdentifierContext
	_eventParameter IEventParameterContext
	parameters      []IEventParameterContext
}

func NewEmptyEventDefinitionContext() *EventDefinitionContext {
	var p = new(EventDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventDefinition
	return p
}

func (*EventDefinitionContext) IsEventDefinitionContext() {}

func NewEventDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventDefinitionContext {
	var p = new(EventDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventDefinition

	return p
}

func (s *EventDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EventDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *EventDefinitionContext) Get_eventParameter() IEventParameterContext {
	return s._eventParameter
}

func (s *EventDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *EventDefinitionContext) Set_eventParameter(v IEventParameterContext) { s._eventParameter = v }

func (s *EventDefinitionContext) GetParameters() []IEventParameterContext { return s.parameters }

func (s *EventDefinitionContext) SetParameters(v []IEventParameterContext) { s.parameters = v }

func (s *EventDefinitionContext) Event() antlr.TerminalNode {
	return s.GetToken(SolidityParserEvent, 0)
}

func (s *EventDefinitionContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *EventDefinitionContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *EventDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *EventDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventDefinitionContext) Anonymous() antlr.TerminalNode {
	return s.GetToken(SolidityParserAnonymous, 0)
}

func (s *EventDefinitionContext) AllEventParameter() []IEventParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEventParameterContext)(nil)).Elem())
	var tst = make([]IEventParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEventParameterContext)
		}
	}

	return tst
}

func (s *EventDefinitionContext) EventParameter(i int) IEventParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEventParameterContext)
}

func (s *EventDefinitionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *EventDefinitionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *EventDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EventDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterEventDefinition(s)
	}
}

func (s *EventDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitEventDefinition(s)
	}
}

func (s *EventDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitEventDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) EventDefinition() (localctx IEventDefinitionContext) {
	this := p
	_ = this

	localctx = NewEventDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SolidityParserRULE_eventDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(629)
		p.Match(SolidityParserEvent)
	}
	{
		p.SetState(630)

		var _x = p.Identifier()

		localctx.(*EventDefinitionContext).name = _x
	}
	{
		p.SetState(631)
		p.Match(SolidityParserLParen)
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 58, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(632)

			var _x = p.EventParameter()

			localctx.(*EventDefinitionContext)._eventParameter = _x
		}
		localctx.(*EventDefinitionContext).parameters = append(localctx.(*EventDefinitionContext).parameters, localctx.(*EventDefinitionContext)._eventParameter)
		p.SetState(637)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserComma {
			{
				p.SetState(633)
				p.Match(SolidityParserComma)
			}
			{
				p.SetState(634)

				var _x = p.EventParameter()

				localctx.(*EventDefinitionContext)._eventParameter = _x
			}
			localctx.(*EventDefinitionContext).parameters = append(localctx.(*EventDefinitionContext).parameters, localctx.(*EventDefinitionContext)._eventParameter)

			p.SetState(639)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(642)
		p.Match(SolidityParserRParen)
	}
	p.SetState(644)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAnonymous {
		{
			p.SetState(643)
			p.Match(SolidityParserAnonymous)
		}

	}
	{
		p.SetState(646)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IErrorParameterContext is an interface to support dynamic dispatch.
type IErrorParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsErrorParameterContext differentiates from other interfaces.
	IsErrorParameterContext()
}

type ErrorParameterContext struct {
	*antlr.BaseParserRuleContext
	parser  antlr.Parser
	varType ITypeNameContext
	name    IIdentifierContext
}

func NewEmptyErrorParameterContext() *ErrorParameterContext {
	var p = new(ErrorParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_errorParameter
	return p
}

func (*ErrorParameterContext) IsErrorParameterContext() {}

func NewErrorParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ErrorParameterContext {
	var p = new(ErrorParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_errorParameter

	return p
}

func (s *ErrorParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ErrorParameterContext) GetVarType() ITypeNameContext { return s.varType }

func (s *ErrorParameterContext) GetName() IIdentifierContext { return s.name }

func (s *ErrorParameterContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *ErrorParameterContext) SetName(v IIdentifierContext) { s.name = v }

func (s *ErrorParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ErrorParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ErrorParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ErrorParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ErrorParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterErrorParameter(s)
	}
}

func (s *ErrorParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitErrorParameter(s)
	}
}

func (s *ErrorParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitErrorParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ErrorParameter() (localctx IErrorParameterContext) {
	this := p
	_ = this

	localctx = NewErrorParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SolidityParserRULE_errorParameter)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)

		var _x = p.typeName(0)

		localctx.(*ErrorParameterContext).varType = _x
	}
	p.SetState(650)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(649)

			var _x = p.Identifier()

			localctx.(*ErrorParameterContext).name = _x
		}

	}

	return localctx
}

// IErrorDefinitionContext is an interface to support dynamic dispatch.
type IErrorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// Get_errorParameter returns the _errorParameter rule contexts.
	Get_errorParameter() IErrorParameterContext

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// Set_errorParameter sets the _errorParameter rule contexts.
	Set_errorParameter(IErrorParameterContext)

	// GetParameters returns the parameters rule context list.
	GetParameters() []IErrorParameterContext

	// SetParameters sets the parameters rule context list.
	SetParameters([]IErrorParameterContext)

	// IsErrorDefinitionContext differentiates from other interfaces.
	IsErrorDefinitionContext()
}

type ErrorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser          antlr.Parser
	name            IIdentifierContext
	_errorParameter IErrorParameterContext
	parameters      []IErrorParameterContext
}

func NewEmptyErrorDefinitionContext() *ErrorDefinitionContext {
	var p = new(ErrorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_errorDefinition
	return p
}

func (*ErrorDefinitionContext) IsErrorDefinitionContext() {}

func NewErrorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ErrorDefinitionContext {
	var p = new(ErrorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_errorDefinition

	return p
}

func (s *ErrorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ErrorDefinitionContext) GetName() IIdentifierContext { return s.name }

func (s *ErrorDefinitionContext) Get_errorParameter() IErrorParameterContext {
	return s._errorParameter
}

func (s *ErrorDefinitionContext) SetName(v IIdentifierContext) { s.name = v }

func (s *ErrorDefinitionContext) Set_errorParameter(v IErrorParameterContext) { s._errorParameter = v }

func (s *ErrorDefinitionContext) GetParameters() []IErrorParameterContext { return s.parameters }

func (s *ErrorDefinitionContext) SetParameters(v []IErrorParameterContext) { s.parameters = v }

func (s *ErrorDefinitionContext) Error() antlr.TerminalNode {
	return s.GetToken(SolidityParserError, 0)
}

func (s *ErrorDefinitionContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *ErrorDefinitionContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *ErrorDefinitionContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ErrorDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ErrorDefinitionContext) AllErrorParameter() []IErrorParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IErrorParameterContext)(nil)).Elem())
	var tst = make([]IErrorParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IErrorParameterContext)
		}
	}

	return tst
}

func (s *ErrorDefinitionContext) ErrorParameter(i int) IErrorParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IErrorParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IErrorParameterContext)
}

func (s *ErrorDefinitionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *ErrorDefinitionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *ErrorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ErrorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ErrorDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterErrorDefinition(s)
	}
}

func (s *ErrorDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitErrorDefinition(s)
	}
}

func (s *ErrorDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitErrorDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ErrorDefinition() (localctx IErrorDefinitionContext) {
	this := p
	_ = this

	localctx = NewErrorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, SolidityParserRULE_errorDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(652)
		p.Match(SolidityParserError)
	}
	{
		p.SetState(653)

		var _x = p.Identifier()

		localctx.(*ErrorDefinitionContext).name = _x
	}
	{
		p.SetState(654)
		p.Match(SolidityParserLParen)
	}
	p.SetState(663)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 62, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(655)

			var _x = p.ErrorParameter()

			localctx.(*ErrorDefinitionContext)._errorParameter = _x
		}
		localctx.(*ErrorDefinitionContext).parameters = append(localctx.(*ErrorDefinitionContext).parameters, localctx.(*ErrorDefinitionContext)._errorParameter)
		p.SetState(660)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserComma {
			{
				p.SetState(656)
				p.Match(SolidityParserComma)
			}
			{
				p.SetState(657)

				var _x = p.ErrorParameter()

				localctx.(*ErrorDefinitionContext)._errorParameter = _x
			}
			localctx.(*ErrorDefinitionContext).parameters = append(localctx.(*ErrorDefinitionContext).parameters, localctx.(*ErrorDefinitionContext)._errorParameter)

			p.SetState(662)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(665)
		p.Match(SolidityParserRParen)
	}
	{
		p.SetState(666)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IUsingDirectiveContext is an interface to support dynamic dispatch.
type IUsingDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingDirectiveContext differentiates from other interfaces.
	IsUsingDirectiveContext()
}

type UsingDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingDirectiveContext() *UsingDirectiveContext {
	var p = new(UsingDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_usingDirective
	return p
}

func (*UsingDirectiveContext) IsUsingDirectiveContext() {}

func NewUsingDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingDirectiveContext {
	var p = new(UsingDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_usingDirective

	return p
}

func (s *UsingDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingDirectiveContext) Using() antlr.TerminalNode {
	return s.GetToken(SolidityParserUsing, 0)
}

func (s *UsingDirectiveContext) For() antlr.TerminalNode {
	return s.GetToken(SolidityParserFor, 0)
}

func (s *UsingDirectiveContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *UsingDirectiveContext) AllIdentifierPath() []IIdentifierPathContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem())
	var tst = make([]IIdentifierPathContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierPathContext)
		}
	}

	return tst
}

func (s *UsingDirectiveContext) IdentifierPath(i int) IIdentifierPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPathContext)
}

func (s *UsingDirectiveContext) Mul() antlr.TerminalNode {
	return s.GetToken(SolidityParserMul, 0)
}

func (s *UsingDirectiveContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *UsingDirectiveContext) Global() antlr.TerminalNode {
	return s.GetToken(SolidityParserGlobal, 0)
}

func (s *UsingDirectiveContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *UsingDirectiveContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *UsingDirectiveContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *UsingDirectiveContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *UsingDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UsingDirectiveContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterUsingDirective(s)
	}
}

func (s *UsingDirectiveContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitUsingDirective(s)
	}
}

func (s *UsingDirectiveContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitUsingDirective(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) UsingDirective() (localctx IUsingDirectiveContext) {
	this := p
	_ = this

	localctx = NewUsingDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SolidityParserRULE_usingDirective)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(668)
		p.Match(SolidityParserUsing)
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserError, SolidityParserRevert, SolidityParserFrom, SolidityParserGlobal, SolidityParserIdentifier:
		{
			p.SetState(669)
			p.IdentifierPath()
		}

	case SolidityParserLBrace:
		{
			p.SetState(670)
			p.Match(SolidityParserLBrace)
		}
		{
			p.SetState(671)
			p.IdentifierPath()
		}
		p.SetState(676)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserComma {
			{
				p.SetState(672)
				p.Match(SolidityParserComma)
			}
			{
				p.SetState(673)
				p.IdentifierPath()
			}

			p.SetState(678)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(679)
			p.Match(SolidityParserRBrace)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(683)
		p.Match(SolidityParserFor)
	}
	p.SetState(686)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(684)
			p.Match(SolidityParserMul)
		}

	case 2:
		{
			p.SetState(685)
			p.typeName(0)
		}

	}
	p.SetState(689)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserGlobal {
		{
			p.SetState(688)
			p.Match(SolidityParserGlobal)
		}

	}
	{
		p.SetState(691)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeNameContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *TypeNameContext) MappingType() IMappingTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMappingTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMappingTypeContext)
}

func (s *TypeNameContext) IdentifierPath() IIdentifierPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPathContext)
}

func (s *TypeNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeNameContext) LBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrack, 0)
}

func (s *TypeNameContext) RBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrack, 0)
}

func (s *TypeNameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterTypeName(s)
	}
}

func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitTypeName(s)
	}
}

func (s *TypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) TypeName() (localctx ITypeNameContext) {
	return p.typeName(0)
}

func (p *SolidityParser) typeName(_p int) (localctx ITypeNameContext) {
	this := p
	_ = this

	var _parentctx = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 74
	p.EnterRecursionRule(localctx, 74, SolidityParserRULE_typeName, _p)

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(698)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 67, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(694)
			p.ElementaryTypeName(true)
		}

	case 2:
		{
			p.SetState(695)
			p.FunctionTypeName()
		}

	case 3:
		{
			p.SetState(696)
			p.MappingType()
		}

	case 4:
		{
			p.SetState(697)
			p.IdentifierPath()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_typeName)
			p.SetState(700)

			if !(p.Precpred(p.GetParserRuleContext(), 1)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
			}
			{
				p.SetState(701)
				p.Match(SolidityParserLBrack)
			}
			p.SetState(703)
			p.GetErrorHandler().Sync(p)

			if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 68, p.GetParserRuleContext()) == 1 {
				{
					p.SetState(702)
					p.expression(0)
				}

			}
			{
				p.SetState(705)
				p.Match(SolidityParserRBrack)
			}

		}
		p.SetState(710)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext())
	}

	return localctx
}

// IElementaryTypeNameContext is an interface to support dynamic dispatch.
type IElementaryTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetAllowAddressPayable returns the allowAddressPayable attribute.
	GetAllowAddressPayable() bool

	// SetAllowAddressPayable sets the allowAddressPayable attribute.
	SetAllowAddressPayable(bool)

	// IsElementaryTypeNameContext differentiates from other interfaces.
	IsElementaryTypeNameContext()
}

type ElementaryTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser              antlr.Parser
	allowAddressPayable bool
}

func NewEmptyElementaryTypeNameContext() *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_elementaryTypeName
	return p
}

func (*ElementaryTypeNameContext) IsElementaryTypeNameContext() {}

func NewElementaryTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int, allowAddressPayable bool) *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_elementaryTypeName

	p.allowAddressPayable = allowAddressPayable

	return p
}

func (s *ElementaryTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementaryTypeNameContext) GetAllowAddressPayable() bool { return s.allowAddressPayable }

func (s *ElementaryTypeNameContext) SetAllowAddressPayable(v bool) { s.allowAddressPayable = v }

func (s *ElementaryTypeNameContext) Address() antlr.TerminalNode {
	return s.GetToken(SolidityParserAddress, 0)
}

func (s *ElementaryTypeNameContext) Payable() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayable, 0)
}

func (s *ElementaryTypeNameContext) Bool() antlr.TerminalNode {
	return s.GetToken(SolidityParserBool, 0)
}

func (s *ElementaryTypeNameContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteral, 0)
}

func (s *ElementaryTypeNameContext) Bytes() antlr.TerminalNode {
	return s.GetToken(SolidityParserBytes, 0)
}

func (s *ElementaryTypeNameContext) SignedIntegerType() antlr.TerminalNode {
	return s.GetToken(SolidityParserSignedIntegerType, 0)
}

func (s *ElementaryTypeNameContext) UnsignedIntegerType() antlr.TerminalNode {
	return s.GetToken(SolidityParserUnsignedIntegerType, 0)
}

func (s *ElementaryTypeNameContext) FixedBytes() antlr.TerminalNode {
	return s.GetToken(SolidityParserFixedBytes, 0)
}

func (s *ElementaryTypeNameContext) Fixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserFixed, 0)
}

func (s *ElementaryTypeNameContext) Ufixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserUfixed, 0)
}

func (s *ElementaryTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementaryTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ElementaryTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterElementaryTypeName(s)
	}
}

func (s *ElementaryTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitElementaryTypeName(s)
	}
}

func (s *ElementaryTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitElementaryTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ElementaryTypeName(allowAddressPayable bool) (localctx IElementaryTypeNameContext) {
	this := p
	_ = this

	localctx = NewElementaryTypeNameContext(p, p.GetParserRuleContext(), p.GetState(), allowAddressPayable)
	p.EnterRule(localctx, 76, SolidityParserRULE_elementaryTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(723)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(711)
			p.Match(SolidityParserAddress)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(712)

		if !(localctx.(*ElementaryTypeNameContext).allowAddressPayable) {
			panic(antlr.NewFailedPredicateException(p, "$allowAddressPayable", ""))
		}
		{
			p.SetState(713)
			p.Match(SolidityParserAddress)
		}
		{
			p.SetState(714)
			p.Match(SolidityParserPayable)
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(715)
			p.Match(SolidityParserBool)
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(716)
			p.Match(SolidityParserStringLiteral)
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(717)
			p.Match(SolidityParserBytes)
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(718)
			p.Match(SolidityParserSignedIntegerType)
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(719)
			p.Match(SolidityParserUnsignedIntegerType)
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(720)
			p.Match(SolidityParserFixedBytes)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(721)
			p.Match(SolidityParserFixed)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(722)
			p.Match(SolidityParserUfixed)
		}

	}

	return localctx
}

// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArguments returns the arguments rule contexts.
	GetArguments() IParameterListContext

	// GetReturnParameters returns the returnParameters rule contexts.
	GetReturnParameters() IParameterListContext

	// SetArguments sets the arguments rule contexts.
	SetArguments(IParameterListContext)

	// SetReturnParameters sets the returnParameters rule contexts.
	SetReturnParameters(IParameterListContext)

	// GetVisibilitySet returns the visibilitySet attribute.
	GetVisibilitySet() bool

	// GetMutabilitySet returns the mutabilitySet attribute.
	GetMutabilitySet() bool

	// SetVisibilitySet sets the visibilitySet attribute.
	SetVisibilitySet(bool)

	// SetMutabilitySet sets the mutabilitySet attribute.
	SetMutabilitySet(bool)

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	visibilitySet    bool // TODO = false
	mutabilitySet    bool // TODO = false
	arguments        IParameterListContext
	returnParameters IParameterListContext
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) GetArguments() IParameterListContext { return s.arguments }

func (s *FunctionTypeNameContext) GetReturnParameters() IParameterListContext {
	return s.returnParameters
}

func (s *FunctionTypeNameContext) SetArguments(v IParameterListContext) { s.arguments = v }

func (s *FunctionTypeNameContext) SetReturnParameters(v IParameterListContext) {
	s.returnParameters = v
}

func (s *FunctionTypeNameContext) GetVisibilitySet() bool { return s.visibilitySet }

func (s *FunctionTypeNameContext) GetMutabilitySet() bool { return s.mutabilitySet }

func (s *FunctionTypeNameContext) SetVisibilitySet(v bool) { s.visibilitySet = v }

func (s *FunctionTypeNameContext) SetMutabilitySet(v bool) { s.mutabilitySet = v }

func (s *FunctionTypeNameContext) Function() antlr.TerminalNode {
	return s.GetToken(SolidityParserFunction, 0)
}

func (s *FunctionTypeNameContext) AllLParen() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserLParen)
}

func (s *FunctionTypeNameContext) LParen(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, i)
}

func (s *FunctionTypeNameContext) AllRParen() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserRParen)
}

func (s *FunctionTypeNameContext) RParen(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, i)
}

func (s *FunctionTypeNameContext) AllVisibility() []IVisibilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVisibilityContext)(nil)).Elem())
	var tst = make([]IVisibilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVisibilityContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) Visibility(i int) IVisibilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVisibilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVisibilityContext)
}

func (s *FunctionTypeNameContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *FunctionTypeNameContext) Returns() antlr.TerminalNode {
	return s.GetToken(SolidityParserReturns, 0)
}

func (s *FunctionTypeNameContext) AllParameterList() []IParameterListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterListContext)(nil)).Elem())
	var tst = make([]IParameterListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterListContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) ParameterList(i int) IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionTypeNameContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitFunctionTypeName(s)
	}
}

func (s *FunctionTypeNameContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitFunctionTypeName(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	this := p
	_ = this

	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SolidityParserRULE_functionTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(725)
		p.Match(SolidityParserFunction)
	}
	{
		p.SetState(726)
		p.Match(SolidityParserLParen)
	}
	p.SetState(728)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 71, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(727)

			var _x = p.ParameterList()

			localctx.(*FunctionTypeNameContext).arguments = _x
		}

	}
	{
		p.SetState(730)
		p.Match(SolidityParserRParen)
	}
	p.SetState(741)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(739)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 72, p.GetParserRuleContext()) {
			case 1:
				p.SetState(731)

				if !(!localctx.(*FunctionTypeNameContext).visibilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$visibilitySet", ""))
				}
				{
					p.SetState(732)
					p.Visibility()
				}
				localctx.(*FunctionTypeNameContext).SetVisibilitySet(true)

			case 2:
				p.SetState(735)

				if !(!localctx.(*FunctionTypeNameContext).mutabilitySet) {
					panic(antlr.NewFailedPredicateException(p, "!$mutabilitySet", ""))
				}
				{
					p.SetState(736)
					p.StateMutability()
				}
				localctx.(*FunctionTypeNameContext).SetMutabilitySet(true)

			}

		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 73, p.GetParserRuleContext())
	}
	p.SetState(749)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 74, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(744)
			p.Match(SolidityParserReturns)
		}
		{
			p.SetState(745)
			p.Match(SolidityParserLParen)
		}
		{
			p.SetState(746)

			var _x = p.ParameterList()

			localctx.(*FunctionTypeNameContext).returnParameters = _x
		}
		{
			p.SetState(747)
			p.Match(SolidityParserRParen)
		}

	}

	return localctx
}

// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetVarType returns the varType rule contexts.
	GetVarType() ITypeNameContext

	// GetLocation returns the location rule contexts.
	GetLocation() IDataLocationContext

	// GetName returns the name rule contexts.
	GetName() IIdentifierContext

	// SetVarType sets the varType rule contexts.
	SetVarType(ITypeNameContext)

	// SetLocation sets the location rule contexts.
	SetLocation(IDataLocationContext)

	// SetName sets the name rule contexts.
	SetName(IIdentifierContext)

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser   antlr.Parser
	varType  ITypeNameContext
	location IDataLocationContext
	name     IIdentifierContext
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) GetVarType() ITypeNameContext { return s.varType }

func (s *VariableDeclarationContext) GetLocation() IDataLocationContext { return s.location }

func (s *VariableDeclarationContext) GetName() IIdentifierContext { return s.name }

func (s *VariableDeclarationContext) SetVarType(v ITypeNameContext) { s.varType = v }

func (s *VariableDeclarationContext) SetLocation(v IDataLocationContext) { s.location = v }

func (s *VariableDeclarationContext) SetName(v IIdentifierContext) { s.name = v }

func (s *VariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *VariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VariableDeclarationContext) DataLocation() IDataLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDataLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDataLocationContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitVariableDeclaration(s)
	}
}

func (s *VariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SolidityParserRULE_variableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(751)

		var _x = p.typeName(0)

		localctx.(*VariableDeclarationContext).varType = _x
	}
	p.SetState(753)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserCalldata || _la == SolidityParserMemory || _la == SolidityParserStorage {
		{
			p.SetState(752)

			var _x = p.DataLocation()

			localctx.(*VariableDeclarationContext).location = _x
		}

	}
	{
		p.SetState(755)

		var _x = p.Identifier()

		localctx.(*VariableDeclarationContext).name = _x
	}

	return localctx
}

// IDataLocationContext is an interface to support dynamic dispatch.
type IDataLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDataLocationContext differentiates from other interfaces.
	IsDataLocationContext()
}

type DataLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDataLocationContext() *DataLocationContext {
	var p = new(DataLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_dataLocation
	return p
}

func (*DataLocationContext) IsDataLocationContext() {}

func NewDataLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DataLocationContext {
	var p = new(DataLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_dataLocation

	return p
}

func (s *DataLocationContext) GetParser() antlr.Parser { return s.parser }

func (s *DataLocationContext) Memory() antlr.TerminalNode {
	return s.GetToken(SolidityParserMemory, 0)
}

func (s *DataLocationContext) Storage() antlr.TerminalNode {
	return s.GetToken(SolidityParserStorage, 0)
}

func (s *DataLocationContext) Calldata() antlr.TerminalNode {
	return s.GetToken(SolidityParserCalldata, 0)
}

func (s *DataLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DataLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DataLocationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterDataLocation(s)
	}
}

func (s *DataLocationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitDataLocation(s)
	}
}

func (s *DataLocationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitDataLocation(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) DataLocation() (localctx IDataLocationContext) {
	this := p
	_ = this

	localctx = NewDataLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SolidityParserRULE_dataLocation)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(757)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserCalldata || _la == SolidityParserMemory || _la == SolidityParserStorage) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) CopyFrom(ctx *ExpressionContext) {
	s.BaseParserRuleContext.CopyFrom(ctx.BaseParserRuleContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

type UnaryPrefixOperationContext struct {
	*ExpressionContext
}

func NewUnaryPrefixOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnaryPrefixOperationContext {
	var p = new(UnaryPrefixOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *UnaryPrefixOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnaryPrefixOperationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnaryPrefixOperationContext) Inc() antlr.TerminalNode {
	return s.GetToken(SolidityParserInc, 0)
}

func (s *UnaryPrefixOperationContext) Dec() antlr.TerminalNode {
	return s.GetToken(SolidityParserDec, 0)
}

func (s *UnaryPrefixOperationContext) Not() antlr.TerminalNode {
	return s.GetToken(SolidityParserNot, 0)
}

func (s *UnaryPrefixOperationContext) BitNot() antlr.TerminalNode {
	return s.GetToken(SolidityParserBitNot, 0)
}

func (s *UnaryPrefixOperationContext) Delete() antlr.TerminalNode {
	return s.GetToken(SolidityParserDelete, 0)
}

func (s *UnaryPrefixOperationContext) Sub() antlr.TerminalNode {
	return s.GetToken(SolidityParserSub, 0)
}

func (s *UnaryPrefixOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterUnaryPrefixOperation(s)
	}
}

func (s *UnaryPrefixOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitUnaryPrefixOperation(s)
	}
}

func (s *UnaryPrefixOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitUnaryPrefixOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type PrimaryExpressionContext struct {
	*ExpressionContext
}

func NewPrimaryExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrimaryExpressionContext) Literal() ILiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryExpressionContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *PrimaryExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitPrimaryExpression(s)
	}
}

func (s *PrimaryExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitPrimaryExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

type OrderComparisonContext struct {
	*ExpressionContext
}

func NewOrderComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OrderComparisonContext {
	var p = new(OrderComparisonContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *OrderComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrderComparisonContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *OrderComparisonContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrderComparisonContext) LessThan() antlr.TerminalNode {
	return s.GetToken(SolidityParserLessThan, 0)
}

func (s *OrderComparisonContext) GreaterThan() antlr.TerminalNode {
	return s.GetToken(SolidityParserGreaterThan, 0)
}

func (s *OrderComparisonContext) LessThanOrEqual() antlr.TerminalNode {
	return s.GetToken(SolidityParserLessThanOrEqual, 0)
}

func (s *OrderComparisonContext) GreaterThanOrEqual() antlr.TerminalNode {
	return s.GetToken(SolidityParserGreaterThanOrEqual, 0)
}

func (s *OrderComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterOrderComparison(s)
	}
}

func (s *OrderComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitOrderComparison(s)
	}
}

func (s *OrderComparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitOrderComparison(s)

	default:
		return t.VisitChildren(s)
	}
}

type ConditionalContext struct {
	*ExpressionContext
}

func NewConditionalContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ConditionalContext {
	var p = new(ConditionalContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ConditionalContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConditionalContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ConditionalContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ConditionalContext) Conditional() antlr.TerminalNode {
	return s.GetToken(SolidityParserConditional, 0)
}

func (s *ConditionalContext) Colon() antlr.TerminalNode {
	return s.GetToken(SolidityParserColon, 0)
}

func (s *ConditionalContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterConditional(s)
	}
}

func (s *ConditionalContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitConditional(s)
	}
}

func (s *ConditionalContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitConditional(s)

	default:
		return t.VisitChildren(s)
	}
}

type PayableConversionContext struct {
	*ExpressionContext
}

func NewPayableConversionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *PayableConversionContext {
	var p = new(PayableConversionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *PayableConversionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PayableConversionContext) Payable() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayable, 0)
}

func (s *PayableConversionContext) CallArgumentList() ICallArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentListContext)
}

func (s *PayableConversionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterPayableConversion(s)
	}
}

func (s *PayableConversionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitPayableConversion(s)
	}
}

func (s *PayableConversionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitPayableConversion(s)

	default:
		return t.VisitChildren(s)
	}
}

type AssignmentContext struct {
	*ExpressionContext
}

func NewAssignmentContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AssignmentContext {
	var p = new(AssignmentContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignmentContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *AssignmentContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AssignmentContext) AssignOp() IAssignOpContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssignOpContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssignOpContext)
}

func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterAssignment(s)
	}
}

func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitAssignment(s)
	}
}

func (s *AssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

type UnarySuffixOperationContext struct {
	*ExpressionContext
}

func NewUnarySuffixOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *UnarySuffixOperationContext {
	var p = new(UnarySuffixOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *UnarySuffixOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnarySuffixOperationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *UnarySuffixOperationContext) Inc() antlr.TerminalNode {
	return s.GetToken(SolidityParserInc, 0)
}

func (s *UnarySuffixOperationContext) Dec() antlr.TerminalNode {
	return s.GetToken(SolidityParserDec, 0)
}

func (s *UnarySuffixOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterUnarySuffixOperation(s)
	}
}

func (s *UnarySuffixOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitUnarySuffixOperation(s)
	}
}

func (s *UnarySuffixOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitUnarySuffixOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type ShiftOperationContext struct {
	*ExpressionContext
}

func NewShiftOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ShiftOperationContext {
	var p = new(ShiftOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ShiftOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ShiftOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ShiftOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ShiftOperationContext) Shl() antlr.TerminalNode {
	return s.GetToken(SolidityParserShl, 0)
}

func (s *ShiftOperationContext) Sar() antlr.TerminalNode {
	return s.GetToken(SolidityParserSar, 0)
}

func (s *ShiftOperationContext) Shr() antlr.TerminalNode {
	return s.GetToken(SolidityParserShr, 0)
}

func (s *ShiftOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterShiftOperation(s)
	}
}

func (s *ShiftOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitShiftOperation(s)
	}
}

func (s *ShiftOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitShiftOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitAndOperationContext struct {
	*ExpressionContext
}

func NewBitAndOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitAndOperationContext {
	var p = new(BitAndOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BitAndOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitAndOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *BitAndOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitAndOperationContext) BitAnd() antlr.TerminalNode {
	return s.GetToken(SolidityParserBitAnd, 0)
}

func (s *BitAndOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterBitAndOperation(s)
	}
}

func (s *BitAndOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitBitAndOperation(s)
	}
}

func (s *BitAndOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitBitAndOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallContext struct {
	*ExpressionContext
}

func NewFunctionCallContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallContext) CallArgumentList() ICallArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentListContext)
}

func (s *FunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterFunctionCall(s)
	}
}

func (s *FunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitFunctionCall(s)
	}
}

func (s *FunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexRangeAccessContext struct {
	*ExpressionContext
	start IExpressionContext
	end   IExpressionContext
}

func NewIndexRangeAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexRangeAccessContext {
	var p = new(IndexRangeAccessContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IndexRangeAccessContext) GetStart() antlr.Token { return s.start.GetStart() }

func (s *IndexRangeAccessContext) GetEnd() IExpressionContext { return s.end }

func (s *IndexRangeAccessContext) SetStart(v antlr.Token) { s.start.SetStart(v) }

func (s *IndexRangeAccessContext) SetEnd(v antlr.Token) { s.end.SetStop(v) }

func (s *IndexRangeAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexRangeAccessContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IndexRangeAccessContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexRangeAccessContext) LBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrack, 0)
}

func (s *IndexRangeAccessContext) Colon() antlr.TerminalNode {
	return s.GetToken(SolidityParserColon, 0)
}

func (s *IndexRangeAccessContext) RBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrack, 0)
}

func (s *IndexRangeAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterIndexRangeAccess(s)
	}
}

func (s *IndexRangeAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitIndexRangeAccess(s)
	}
}

func (s *IndexRangeAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitIndexRangeAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type IndexAccessContext struct {
	*ExpressionContext
	index IExpressionContext
}

func NewIndexAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *IndexAccessContext {
	var p = new(IndexAccessContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *IndexAccessContext) GetIndex() IExpressionContext { return s.index }

func (s *IndexAccessContext) SetIndex(v IExpressionContext) { s.index = v }

func (s *IndexAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IndexAccessContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *IndexAccessContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IndexAccessContext) LBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrack, 0)
}

func (s *IndexAccessContext) RBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrack, 0)
}

func (s *IndexAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterIndexAccess(s)
	}
}

func (s *IndexAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitIndexAccess(s)
	}
}

func (s *IndexAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitIndexAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type AddSubOperationContext struct {
	*ExpressionContext
}

func NewAddSubOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AddSubOperationContext {
	var p = new(AddSubOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *AddSubOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AddSubOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *AddSubOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AddSubOperationContext) Add() antlr.TerminalNode {
	return s.GetToken(SolidityParserAdd, 0)
}

func (s *AddSubOperationContext) Sub() antlr.TerminalNode {
	return s.GetToken(SolidityParserSub, 0)
}

func (s *AddSubOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterAddSubOperation(s)
	}
}

func (s *AddSubOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitAddSubOperation(s)
	}
}

func (s *AddSubOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitAddSubOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitOrOperationContext struct {
	*ExpressionContext
}

func NewBitOrOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitOrOperationContext {
	var p = new(BitOrOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BitOrOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitOrOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *BitOrOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitOrOperationContext) BitOr() antlr.TerminalNode {
	return s.GetToken(SolidityParserBitOr, 0)
}

func (s *BitOrOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterBitOrOperation(s)
	}
}

func (s *BitOrOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitBitOrOperation(s)
	}
}

func (s *BitOrOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitBitOrOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type ExpOperationContext struct {
	*ExpressionContext
}

func NewExpOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *ExpOperationContext {
	var p = new(ExpOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *ExpOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpOperationContext) Exp() antlr.TerminalNode {
	return s.GetToken(SolidityParserExp, 0)
}

func (s *ExpOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterExpOperation(s)
	}
}

func (s *ExpOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitExpOperation(s)
	}
}

func (s *ExpOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitExpOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type AndOperationContext struct {
	*ExpressionContext
}

func NewAndOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *AndOperationContext {
	var p = new(AndOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *AndOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AndOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *AndOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *AndOperationContext) And() antlr.TerminalNode {
	return s.GetToken(SolidityParserAnd, 0)
}

func (s *AndOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterAndOperation(s)
	}
}

func (s *AndOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitAndOperation(s)
	}
}

func (s *AndOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitAndOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type InlineArrayContext struct {
	*ExpressionContext
}

func NewInlineArrayContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *InlineArrayContext {
	var p = new(InlineArrayContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *InlineArrayContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineArrayContext) InlineArrayExpression() IInlineArrayExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInlineArrayExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInlineArrayExpressionContext)
}

func (s *InlineArrayContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterInlineArray(s)
	}
}

func (s *InlineArrayContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitInlineArray(s)
	}
}

func (s *InlineArrayContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitInlineArray(s)

	default:
		return t.VisitChildren(s)
	}
}

type OrOperationContext struct {
	*ExpressionContext
}

func NewOrOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *OrOperationContext {
	var p = new(OrOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *OrOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OrOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *OrOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *OrOperationContext) Or() antlr.TerminalNode {
	return s.GetToken(SolidityParserOr, 0)
}

func (s *OrOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterOrOperation(s)
	}
}

func (s *OrOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitOrOperation(s)
	}
}

func (s *OrOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitOrOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type MemberAccessContext struct {
	*ExpressionContext
}

func NewMemberAccessContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MemberAccessContext {
	var p = new(MemberAccessContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *MemberAccessContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MemberAccessContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MemberAccessContext) Period() antlr.TerminalNode {
	return s.GetToken(SolidityParserPeriod, 0)
}

func (s *MemberAccessContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *MemberAccessContext) Address() antlr.TerminalNode {
	return s.GetToken(SolidityParserAddress, 0)
}

func (s *MemberAccessContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterMemberAccess(s)
	}
}

func (s *MemberAccessContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitMemberAccess(s)
	}
}

func (s *MemberAccessContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitMemberAccess(s)

	default:
		return t.VisitChildren(s)
	}
}

type MulDivModOperationContext struct {
	*ExpressionContext
}

func NewMulDivModOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MulDivModOperationContext {
	var p = new(MulDivModOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *MulDivModOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MulDivModOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *MulDivModOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *MulDivModOperationContext) Mul() antlr.TerminalNode {
	return s.GetToken(SolidityParserMul, 0)
}

func (s *MulDivModOperationContext) Div() antlr.TerminalNode {
	return s.GetToken(SolidityParserDiv, 0)
}

func (s *MulDivModOperationContext) Mod() antlr.TerminalNode {
	return s.GetToken(SolidityParserMod, 0)
}

func (s *MulDivModOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterMulDivModOperation(s)
	}
}

func (s *MulDivModOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitMulDivModOperation(s)
	}
}

func (s *MulDivModOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitMulDivModOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type FunctionCallOptionsContext struct {
	*ExpressionContext
}

func NewFunctionCallOptionsContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *FunctionCallOptionsContext {
	var p = new(FunctionCallOptionsContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *FunctionCallOptionsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallOptionsContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallOptionsContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *FunctionCallOptionsContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *FunctionCallOptionsContext) AllNamedArgument() []INamedArgumentContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INamedArgumentContext)(nil)).Elem())
	var tst = make([]INamedArgumentContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INamedArgumentContext)
		}
	}

	return tst
}

func (s *FunctionCallOptionsContext) NamedArgument(i int) INamedArgumentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INamedArgumentContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INamedArgumentContext)
}

func (s *FunctionCallOptionsContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *FunctionCallOptionsContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *FunctionCallOptionsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterFunctionCallOptions(s)
	}
}

func (s *FunctionCallOptionsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitFunctionCallOptions(s)
	}
}

func (s *FunctionCallOptionsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitFunctionCallOptions(s)

	default:
		return t.VisitChildren(s)
	}
}

type BitXorOperationContext struct {
	*ExpressionContext
}

func NewBitXorOperationContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *BitXorOperationContext {
	var p = new(BitXorOperationContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *BitXorOperationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BitXorOperationContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *BitXorOperationContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *BitXorOperationContext) BitXor() antlr.TerminalNode {
	return s.GetToken(SolidityParserBitXor, 0)
}

func (s *BitXorOperationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterBitXorOperation(s)
	}
}

func (s *BitXorOperationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitBitXorOperation(s)
	}
}

func (s *BitXorOperationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitBitXorOperation(s)

	default:
		return t.VisitChildren(s)
	}
}

type TupleContext struct {
	*ExpressionContext
}

func NewTupleContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *TupleContext {
	var p = new(TupleContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *TupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *TupleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterTuple(s)
	}
}

func (s *TupleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitTuple(s)
	}
}

func (s *TupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

type EqualityComparisonContext struct {
	*ExpressionContext
}

func NewEqualityComparisonContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *EqualityComparisonContext {
	var p = new(EqualityComparisonContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *EqualityComparisonContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EqualityComparisonContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *EqualityComparisonContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EqualityComparisonContext) Equal() antlr.TerminalNode {
	return s.GetToken(SolidityParserEqual, 0)
}

func (s *EqualityComparisonContext) NotEqual() antlr.TerminalNode {
	return s.GetToken(SolidityParserNotEqual, 0)
}

func (s *EqualityComparisonContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterEqualityComparison(s)
	}
}

func (s *EqualityComparisonContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitEqualityComparison(s)
	}
}

func (s *EqualityComparisonContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitEqualityComparison(s)

	default:
		return t.VisitChildren(s)
	}
}

type MetaTypeContext struct {
	*ExpressionContext
}

func NewMetaTypeContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *MetaTypeContext {
	var p = new(MetaTypeContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *MetaTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MetaTypeContext) Type() antlr.TerminalNode {
	return s.GetToken(SolidityParserType, 0)
}

func (s *MetaTypeContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *MetaTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MetaTypeContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *MetaTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterMetaType(s)
	}
}

func (s *MetaTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitMetaType(s)
	}
}

func (s *MetaTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitMetaType(s)

	default:
		return t.VisitChildren(s)
	}
}

type CreateNewExpressionContext struct {
	*ExpressionContext
}

func NewCreateNewExpressionContext(parser antlr.Parser, ctx antlr.ParserRuleContext) *CreateNewExpressionContext {
	var p = new(CreateNewExpressionContext)

	p.ExpressionContext = NewEmptyExpressionContext()
	p.parser = parser
	p.CopyFrom(ctx.(*ExpressionContext))

	return p
}

func (s *CreateNewExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateNewExpressionContext) CreateNewExpressionContext() ICreateNewExpressionContextContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICreateNewExpressionContextContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICreateNewExpressionContextContext)
}

func (s *CreateNewExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterCreateNewExpression(s)
	}
}

func (s *CreateNewExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitCreateNewExpression(s)
	}
}

func (s *CreateNewExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitCreateNewExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *SolidityParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 84
	p.EnterRecursionRule(localctx, 84, SolidityParserRULE_expression, _p)
	var _la int

	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(777)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 77, p.GetParserRuleContext()) {
	case 1:
		localctx = NewPayableConversionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx

		{
			p.SetState(760)
			p.Match(SolidityParserPayable)
		}
		{
			p.SetState(761)
			p.CallArgumentList()
		}

	case 2:
		localctx = NewMetaTypeContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(762)
			p.Match(SolidityParserType)
		}
		{
			p.SetState(763)
			p.Match(SolidityParserLParen)
		}
		{
			p.SetState(764)
			p.typeName(0)
		}
		{
			p.SetState(765)
			p.Match(SolidityParserRParen)
		}

	case 3:
		localctx = NewUnaryPrefixOperationContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(767)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserDelete || (((_la-104)&-(0x1f+1)) == 0 && ((1<<uint(_la-104))&((1<<(SolidityParserSub-104))|(1<<(SolidityParserNot-104))|(1<<(SolidityParserBitNot-104))|(1<<(SolidityParserInc-104))|(1<<(SolidityParserDec-104)))) != 0)) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(768)
			p.expression(19)
		}

	case 4:
		localctx = NewCreateNewExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(769)
			p.CreateNewExpressionContext()
		}

	case 5:
		localctx = NewTupleContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(770)
			p.TupleExpression()
		}

	case 6:
		localctx = NewInlineArrayContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		{
			p.SetState(771)
			p.InlineArrayExpression()
		}

	case 7:
		localctx = NewPrimaryExpressionContext(p, localctx)
		p.SetParserRuleContext(localctx)
		_prevctx = localctx
		p.SetState(775)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 76, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(772)
				p.Identifier()
			}

		case 2:
			{
				p.SetState(773)
				p.Literal()
			}

		case 3:
			{
				p.SetState(774)
				p.ElementaryTypeName(false)
			}

		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(863)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(861)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 84, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(779)

				if !(p.Precpred(p.GetParserRuleContext(), 17)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 17)", ""))
				}
				{
					p.SetState(780)
					p.Match(SolidityParserExp)
				}
				{
					p.SetState(781)
					p.expression(17)
				}

			case 2:
				localctx = NewMulDivModOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(782)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
				}
				{
					p.SetState(783)
					_la = p.GetTokenStream().LA(1)

					if !(((_la-105)&-(0x1f+1)) == 0 && ((1<<uint(_la-105))&((1<<(SolidityParserMul-105))|(1<<(SolidityParserDiv-105))|(1<<(SolidityParserMod-105)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(784)
					p.expression(17)
				}

			case 3:
				localctx = NewAddSubOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(785)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
				}
				{
					p.SetState(786)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserAdd || _la == SolidityParserSub) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(787)
					p.expression(16)
				}

			case 4:
				localctx = NewShiftOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(788)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(789)
					_la = p.GetTokenStream().LA(1)

					if !(((_la-100)&-(0x1f+1)) == 0 && ((1<<uint(_la-100))&((1<<(SolidityParserShl-100))|(1<<(SolidityParserSar-100))|(1<<(SolidityParserShr-100)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(790)
					p.expression(15)
				}

			case 5:
				localctx = NewBitAndOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(791)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(792)
					p.Match(SolidityParserBitAnd)
				}
				{
					p.SetState(793)
					p.expression(14)
				}

			case 6:
				localctx = NewBitXorOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(794)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(795)
					p.Match(SolidityParserBitXor)
				}
				{
					p.SetState(796)
					p.expression(13)
				}

			case 7:
				localctx = NewBitOrOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(797)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(798)
					p.Match(SolidityParserBitOr)
				}
				{
					p.SetState(799)
					p.expression(12)
				}

			case 8:
				localctx = NewOrderComparisonContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(800)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(801)
					_la = p.GetTokenStream().LA(1)

					if !(((_la-111)&-(0x1f+1)) == 0 && ((1<<uint(_la-111))&((1<<(SolidityParserLessThan-111))|(1<<(SolidityParserGreaterThan-111))|(1<<(SolidityParserLessThanOrEqual-111))|(1<<(SolidityParserGreaterThanOrEqual-111)))) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(802)
					p.expression(11)
				}

			case 9:
				localctx = NewEqualityComparisonContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(803)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(804)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserEqual || _la == SolidityParserNotEqual) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(805)
					p.expression(10)
				}

			case 10:
				localctx = NewAndOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(806)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(807)
					p.Match(SolidityParserAnd)
				}
				{
					p.SetState(808)
					p.expression(9)
				}

			case 11:
				localctx = NewOrOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(809)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(810)
					p.Match(SolidityParserOr)
				}
				{
					p.SetState(811)
					p.expression(8)
				}

			case 12:
				localctx = NewConditionalContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(812)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(813)
					p.Match(SolidityParserConditional)
				}
				{
					p.SetState(814)
					p.expression(0)
				}
				{
					p.SetState(815)
					p.Match(SolidityParserColon)
				}
				{
					p.SetState(816)
					p.expression(6)
				}

			case 13:
				localctx = NewAssignmentContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(818)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(819)
					p.AssignOp()
				}
				{
					p.SetState(820)
					p.expression(5)
				}

			case 14:
				localctx = NewIndexAccessContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(822)

				if !(p.Precpred(p.GetParserRuleContext(), 26)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 26)", ""))
				}
				{
					p.SetState(823)
					p.Match(SolidityParserLBrack)
				}
				p.SetState(825)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 78, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(824)

						var _x = p.expression(0)

						localctx.(*IndexAccessContext).index = _x
					}

				}
				{
					p.SetState(827)
					p.Match(SolidityParserRBrack)
				}

			case 15:
				localctx = NewIndexRangeAccessContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(828)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(829)
					p.Match(SolidityParserLBrack)
				}
				p.SetState(831)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 79, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(830)

						var _x = p.expression(0)

						localctx.(*IndexRangeAccessContext).start = _x
					}

				}
				{
					p.SetState(833)
					p.Match(SolidityParserColon)
				}
				p.SetState(835)
				p.GetErrorHandler().Sync(p)

				if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 80, p.GetParserRuleContext()) == 1 {
					{
						p.SetState(834)

						var _x = p.expression(0)

						localctx.(*IndexRangeAccessContext).end = _x
					}

				}
				{
					p.SetState(837)
					p.Match(SolidityParserRBrack)
				}

			case 16:
				localctx = NewMemberAccessContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(838)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
				}
				{
					p.SetState(839)
					p.Match(SolidityParserPeriod)
				}
				p.SetState(842)
				p.GetErrorHandler().Sync(p)

				switch p.GetTokenStream().LA(1) {
				case SolidityParserError, SolidityParserRevert, SolidityParserFrom, SolidityParserGlobal, SolidityParserIdentifier:
					{
						p.SetState(840)
						p.Identifier()
					}

				case SolidityParserAddress:
					{
						p.SetState(841)
						p.Match(SolidityParserAddress)
					}

				default:
					panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
				}

			case 17:
				localctx = NewFunctionCallOptionsContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(844)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(845)
					p.Match(SolidityParserLBrace)
				}
				p.SetState(854)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)

				if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier {
					{
						p.SetState(846)
						p.NamedArgument()
					}
					p.SetState(851)
					p.GetErrorHandler().Sync(p)
					_la = p.GetTokenStream().LA(1)

					for _la == SolidityParserComma {
						{
							p.SetState(847)
							p.Match(SolidityParserComma)
						}
						{
							p.SetState(848)
							p.NamedArgument()
						}

						p.SetState(853)
						p.GetErrorHandler().Sync(p)
						_la = p.GetTokenStream().LA(1)
					}

				}
				{
					p.SetState(856)
					p.Match(SolidityParserRBrace)
				}

			case 18:
				localctx = NewFunctionCallContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(857)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(858)
					p.CallArgumentList()
				}

			case 19:
				localctx = NewUnarySuffixOperationContext(p, NewExpressionContext(p, _parentctx, _parentState))
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(859)

				if !(p.Precpred(p.GetParserRuleContext(), 18)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 18)", ""))
				}
				{
					p.SetState(860)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserInc || _la == SolidityParserDec) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			}

		}
		p.SetState(865)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 85, p.GetParserRuleContext())
	}

	return localctx
}

// ICreateNewExpressionContextContext is an interface to support dynamic dispatch.
type ICreateNewExpressionContextContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCreateNewExpressionContextContext differentiates from other interfaces.
	IsCreateNewExpressionContextContext()
}

type CreateNewExpressionContextContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCreateNewExpressionContextContext() *CreateNewExpressionContextContext {
	var p = new(CreateNewExpressionContextContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_createNewExpressionContext
	return p
}

func (*CreateNewExpressionContextContext) IsCreateNewExpressionContextContext() {}

func NewCreateNewExpressionContextContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CreateNewExpressionContextContext {
	var p = new(CreateNewExpressionContextContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_createNewExpressionContext

	return p
}

func (s *CreateNewExpressionContextContext) GetParser() antlr.Parser { return s.parser }

func (s *CreateNewExpressionContextContext) New() antlr.TerminalNode {
	return s.GetToken(SolidityParserNew, 0)
}

func (s *CreateNewExpressionContextContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *CreateNewExpressionContextContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CreateNewExpressionContextContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CreateNewExpressionContextContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterCreateNewExpressionContext(s)
	}
}

func (s *CreateNewExpressionContextContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitCreateNewExpressionContext(s)
	}
}

func (s *CreateNewExpressionContextContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitCreateNewExpressionContext(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) CreateNewExpressionContext() (localctx ICreateNewExpressionContextContext) {
	this := p
	_ = this

	localctx = NewCreateNewExpressionContextContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SolidityParserRULE_createNewExpressionContext)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(866)
		p.Match(SolidityParserNew)
	}
	{
		p.SetState(867)
		p.typeName(0)
	}

	return localctx
}

// IAssignOpContext is an interface to support dynamic dispatch.
type IAssignOpContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssignOpContext differentiates from other interfaces.
	IsAssignOpContext()
}

type AssignOpContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssignOpContext() *AssignOpContext {
	var p = new(AssignOpContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assignOp
	return p
}

func (*AssignOpContext) IsAssignOpContext() {}

func NewAssignOpContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssignOpContext {
	var p = new(AssignOpContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assignOp

	return p
}

func (s *AssignOpContext) GetParser() antlr.Parser { return s.parser }

func (s *AssignOpContext) Assign() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssign, 0)
}

func (s *AssignOpContext) AssignBitOr() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignBitOr, 0)
}

func (s *AssignOpContext) AssignBitXor() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignBitXor, 0)
}

func (s *AssignOpContext) AssignBitAnd() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignBitAnd, 0)
}

func (s *AssignOpContext) AssignShl() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignShl, 0)
}

func (s *AssignOpContext) AssignSar() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignSar, 0)
}

func (s *AssignOpContext) AssignShr() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignShr, 0)
}

func (s *AssignOpContext) AssignAdd() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignAdd, 0)
}

func (s *AssignOpContext) AssignSub() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignSub, 0)
}

func (s *AssignOpContext) AssignMul() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignMul, 0)
}

func (s *AssignOpContext) AssignDiv() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignDiv, 0)
}

func (s *AssignOpContext) AssignMod() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssignMod, 0)
}

func (s *AssignOpContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssignOpContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssignOpContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterAssignOp(s)
	}
}

func (s *AssignOpContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitAssignOp(s)
	}
}

func (s *AssignOpContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitAssignOp(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) AssignOp() (localctx IAssignOpContext) {
	this := p
	_ = this

	localctx = NewAssignOpContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SolidityParserRULE_assignOp)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(869)
		_la = p.GetTokenStream().LA(1)

		if !(((_la-82)&-(0x1f+1)) == 0 && ((1<<uint(_la-82))&((1<<(SolidityParserAssign-82))|(1<<(SolidityParserAssignBitOr-82))|(1<<(SolidityParserAssignBitXor-82))|(1<<(SolidityParserAssignBitAnd-82))|(1<<(SolidityParserAssignShl-82))|(1<<(SolidityParserAssignSar-82))|(1<<(SolidityParserAssignShr-82))|(1<<(SolidityParserAssignAdd-82))|(1<<(SolidityParserAssignSub-82))|(1<<(SolidityParserAssignMul-82))|(1<<(SolidityParserAssignDiv-82))|(1<<(SolidityParserAssignMod-82)))) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *TupleExpressionContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *TupleExpressionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterTupleExpression(s)
	}
}

func (s *TupleExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitTupleExpression(s)
	}
}

func (s *TupleExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitTupleExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) TupleExpression() (localctx ITupleExpressionContext) {
	this := p
	_ = this

	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SolidityParserRULE_tupleExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(871)
		p.Match(SolidityParserLParen)
	}

	p.SetState(873)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(872)
			p.expression(0)
		}

	}
	p.SetState(881)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(875)
			p.Match(SolidityParserComma)
		}
		p.SetState(877)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(876)
				p.expression(0)
			}

		}

		p.SetState(883)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(884)
		p.Match(SolidityParserRParen)
	}

	return localctx
}

// IInlineArrayExpressionContext is an interface to support dynamic dispatch.
type IInlineArrayExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineArrayExpressionContext differentiates from other interfaces.
	IsInlineArrayExpressionContext()
}

type InlineArrayExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineArrayExpressionContext() *InlineArrayExpressionContext {
	var p = new(InlineArrayExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inlineArrayExpression
	return p
}

func (*InlineArrayExpressionContext) IsInlineArrayExpressionContext() {}

func NewInlineArrayExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineArrayExpressionContext {
	var p = new(InlineArrayExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inlineArrayExpression

	return p
}

func (s *InlineArrayExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineArrayExpressionContext) LBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrack, 0)
}

func (s *InlineArrayExpressionContext) RBrack() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrack, 0)
}

func (s *InlineArrayExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *InlineArrayExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *InlineArrayExpressionContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *InlineArrayExpressionContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *InlineArrayExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineArrayExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InlineArrayExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterInlineArrayExpression(s)
	}
}

func (s *InlineArrayExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitInlineArrayExpression(s)
	}
}

func (s *InlineArrayExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitInlineArrayExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) InlineArrayExpression() (localctx IInlineArrayExpressionContext) {
	this := p
	_ = this

	localctx = NewInlineArrayExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SolidityParserRULE_inlineArrayExpression)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(886)
		p.Match(SolidityParserLBrack)
	}

	{
		p.SetState(887)
		p.expression(0)
	}
	p.SetState(892)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(888)
			p.Match(SolidityParserComma)
		}
		{
			p.SetState(889)
			p.expression(0)
		}

		p.SetState(894)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	{
		p.SetState(895)
		p.Match(SolidityParserRBrack)
	}

	return localctx
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(SolidityParserIdentifier, 0)
}

func (s *IdentifierContext) From() antlr.TerminalNode {
	return s.GetToken(SolidityParserFrom, 0)
}

func (s *IdentifierContext) Error() antlr.TerminalNode {
	return s.GetToken(SolidityParserError, 0)
}

func (s *IdentifierContext) Revert() antlr.TerminalNode {
	return s.GetToken(SolidityParserRevert, 0)
}

func (s *IdentifierContext) Global() antlr.TerminalNode {
	return s.GetToken(SolidityParserGlobal, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SolidityParserRULE_identifier)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(897)
		_la = p.GetTokenStream().LA(1)

		if !((((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_literal
	return p
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *LiteralContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *LiteralContext) BooleanLiteral() IBooleanLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBooleanLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBooleanLiteralContext)
}

func (s *LiteralContext) HexStringLiteral() IHexStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexStringLiteralContext)
}

func (s *LiteralContext) UnicodeStringLiteral() IUnicodeStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUnicodeStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUnicodeStringLiteralContext)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Literal() (localctx ILiteralContext) {
	this := p
	_ = this

	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SolidityParserRULE_literal)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(904)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserNonEmptyStringLiteral, SolidityParserEmptyStringLiteral:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(899)
			p.StringLiteral()
		}

	case SolidityParserHexNumber, SolidityParserDecimalNumber:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(900)
			p.NumberLiteral()
		}

	case SolidityParserFalse, SolidityParserTrue:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(901)
			p.BooleanLiteral()
		}

	case SolidityParserHexString:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(902)
			p.HexStringLiteral()
		}

	case SolidityParserUnicodeStringLiteral:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(903)
			p.UnicodeStringLiteral()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IBooleanLiteralContext is an interface to support dynamic dispatch.
type IBooleanLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBooleanLiteralContext differentiates from other interfaces.
	IsBooleanLiteralContext()
}

type BooleanLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBooleanLiteralContext() *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_booleanLiteral
	return p
}

func (*BooleanLiteralContext) IsBooleanLiteralContext() {}

func NewBooleanLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BooleanLiteralContext {
	var p = new(BooleanLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_booleanLiteral

	return p
}

func (s *BooleanLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *BooleanLiteralContext) True() antlr.TerminalNode {
	return s.GetToken(SolidityParserTrue, 0)
}

func (s *BooleanLiteralContext) False() antlr.TerminalNode {
	return s.GetToken(SolidityParserFalse, 0)
}

func (s *BooleanLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BooleanLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BooleanLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterBooleanLiteral(s)
	}
}

func (s *BooleanLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitBooleanLiteral(s)
	}
}

func (s *BooleanLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitBooleanLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) BooleanLiteral() (localctx IBooleanLiteralContext) {
	this := p
	_ = this

	localctx = NewBooleanLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SolidityParserRULE_booleanLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(906)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserFalse || _la == SolidityParserTrue) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) AllNonEmptyStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserNonEmptyStringLiteral)
}

func (s *StringLiteralContext) NonEmptyStringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserNonEmptyStringLiteral, i)
}

func (s *StringLiteralContext) AllEmptyStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserEmptyStringLiteral)
}

func (s *StringLiteralContext) EmptyStringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserEmptyStringLiteral, i)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterStringLiteral(s)
	}
}

func (s *StringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitStringLiteral(s)
	}
}

func (s *StringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) StringLiteral() (localctx IStringLiteralContext) {
	this := p
	_ = this

	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SolidityParserRULE_stringLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(909)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(908)
				_la = p.GetTokenStream().LA(1)

				if !(_la == SolidityParserNonEmptyStringLiteral || _la == SolidityParserEmptyStringLiteral) {
					p.GetErrorHandler().RecoverInline(p)
				} else {
					p.GetErrorHandler().ReportMatch(p)
					p.Consume()
				}
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(911)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 91, p.GetParserRuleContext())
	}

	return localctx
}

// IHexStringLiteralContext is an interface to support dynamic dispatch.
type IHexStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexStringLiteralContext differentiates from other interfaces.
	IsHexStringLiteralContext()
}

type HexStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexStringLiteralContext() *HexStringLiteralContext {
	var p = new(HexStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_hexStringLiteral
	return p
}

func (*HexStringLiteralContext) IsHexStringLiteralContext() {}

func NewHexStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexStringLiteralContext {
	var p = new(HexStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_hexStringLiteral

	return p
}

func (s *HexStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *HexStringLiteralContext) AllHexString() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserHexString)
}

func (s *HexStringLiteralContext) HexString(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserHexString, i)
}

func (s *HexStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *HexStringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterHexStringLiteral(s)
	}
}

func (s *HexStringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitHexStringLiteral(s)
	}
}

func (s *HexStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitHexStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) HexStringLiteral() (localctx IHexStringLiteralContext) {
	this := p
	_ = this

	localctx = NewHexStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SolidityParserRULE_hexStringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(914)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(913)
				p.Match(SolidityParserHexString)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(916)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())
	}

	return localctx
}

// IUnicodeStringLiteralContext is an interface to support dynamic dispatch.
type IUnicodeStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUnicodeStringLiteralContext differentiates from other interfaces.
	IsUnicodeStringLiteralContext()
}

type UnicodeStringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUnicodeStringLiteralContext() *UnicodeStringLiteralContext {
	var p = new(UnicodeStringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_unicodeStringLiteral
	return p
}

func (*UnicodeStringLiteralContext) IsUnicodeStringLiteralContext() {}

func NewUnicodeStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UnicodeStringLiteralContext {
	var p = new(UnicodeStringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_unicodeStringLiteral

	return p
}

func (s *UnicodeStringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *UnicodeStringLiteralContext) AllUnicodeStringLiteral() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserUnicodeStringLiteral)
}

func (s *UnicodeStringLiteralContext) UnicodeStringLiteral(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserUnicodeStringLiteral, i)
}

func (s *UnicodeStringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UnicodeStringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UnicodeStringLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterUnicodeStringLiteral(s)
	}
}

func (s *UnicodeStringLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitUnicodeStringLiteral(s)
	}
}

func (s *UnicodeStringLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitUnicodeStringLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) UnicodeStringLiteral() (localctx IUnicodeStringLiteralContext) {
	this := p
	_ = this

	localctx = NewUnicodeStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SolidityParserRULE_unicodeStringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(919)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(918)
				p.Match(SolidityParserUnicodeStringLiteral)
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(921)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 93, p.GetParserRuleContext())
	}

	return localctx
}

// INumberLiteralContext is an interface to support dynamic dispatch.
type INumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberLiteralContext differentiates from other interfaces.
	IsNumberLiteralContext()
}

type NumberLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralContext() *NumberLiteralContext {
	var p = new(NumberLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_numberLiteral
	return p
}

func (*NumberLiteralContext) IsNumberLiteralContext() {}

func NewNumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralContext {
	var p = new(NumberLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_numberLiteral

	return p
}

func (s *NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *NumberLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *NumberLiteralContext) NumberUnit() antlr.TerminalNode {
	return s.GetToken(SolidityParserNumberUnit, 0)
}

func (s *NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *NumberLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterNumberLiteral(s)
	}
}

func (s *NumberLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitNumberLiteral(s)
	}
}

func (s *NumberLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitNumberLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) NumberLiteral() (localctx INumberLiteralContext) {
	this := p
	_ = this

	localctx = NewNumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SolidityParserRULE_numberLiteral)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(923)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserHexNumber || _la == SolidityParserDecimalNumber) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(924)
			p.Match(SolidityParserNumberUnit)
		}

	}

	return localctx
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) LBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserLBrace, 0)
}

func (s *BlockContext) RBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserRBrace, 0)
}

func (s *BlockContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *BlockContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockContext) AllUncheckedBlock() []IUncheckedBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUncheckedBlockContext)(nil)).Elem())
	var tst = make([]IUncheckedBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUncheckedBlockContext)
		}
	}

	return tst
}

func (s *BlockContext) UncheckedBlock(i int) IUncheckedBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUncheckedBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUncheckedBlockContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Block() (localctx IBlockContext) {
	this := p
	_ = this

	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SolidityParserRULE_block)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(927)
		p.Match(SolidityParserLBrace)
	}
	p.SetState(932)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(930)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 95, p.GetParserRuleContext()) {
			case 1:
				{
					p.SetState(928)
					p.Statement()
				}

			case 2:
				{
					p.SetState(929)
					p.UncheckedBlock()
				}

			}

		}
		p.SetState(934)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 96, p.GetParserRuleContext())
	}
	{
		p.SetState(935)
		p.Match(SolidityParserRBrace)
	}

	return localctx
}

// IUncheckedBlockContext is an interface to support dynamic dispatch.
type IUncheckedBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUncheckedBlockContext differentiates from other interfaces.
	IsUncheckedBlockContext()
}

type UncheckedBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUncheckedBlockContext() *UncheckedBlockContext {
	var p = new(UncheckedBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_uncheckedBlock
	return p
}

func (*UncheckedBlockContext) IsUncheckedBlockContext() {}

func NewUncheckedBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UncheckedBlockContext {
	var p = new(UncheckedBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_uncheckedBlock

	return p
}

func (s *UncheckedBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *UncheckedBlockContext) Unchecked() antlr.TerminalNode {
	return s.GetToken(SolidityParserUnchecked, 0)
}

func (s *UncheckedBlockContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *UncheckedBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UncheckedBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *UncheckedBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterUncheckedBlock(s)
	}
}

func (s *UncheckedBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitUncheckedBlock(s)
	}
}

func (s *UncheckedBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitUncheckedBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) UncheckedBlock() (localctx IUncheckedBlockContext) {
	this := p
	_ = this

	localctx = NewUncheckedBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SolidityParserRULE_uncheckedBlock)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(937)
		p.Match(SolidityParserUnchecked)
	}
	{
		p.SetState(938)
		p.Block()
	}

	return localctx
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) DoWhileStatement() IDoWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoWhileStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) TryStatement() ITryStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) EmitStatement() IEmitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmitStatementContext)
}

func (s *StatementContext) RevertStatement() IRevertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevertStatementContext)
}

func (s *StatementContext) AssemblyStatement() IAssemblyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SolidityParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 97, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(940)
			p.Block()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(941)
			p.SimpleStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(942)
			p.IfStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(943)
			p.ForStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(944)
			p.WhileStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(945)
			p.DoWhileStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(946)
			p.ContinueStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(947)
			p.BreakStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(948)
			p.TryStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(949)
			p.ReturnStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(950)
			p.EmitStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(951)
			p.RevertStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(952)
			p.AssemblyStatement()
		}

	}

	return localctx
}

// ISimpleStatementContext is an interface to support dynamic dispatch.
type ISimpleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStatementContext differentiates from other interfaces.
	IsSimpleStatementContext()
}

type SimpleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStatementContext() *SimpleStatementContext {
	var p = new(SimpleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_simpleStatement
	return p
}

func (*SimpleStatementContext) IsSimpleStatementContext() {}

func NewSimpleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStatementContext {
	var p = new(SimpleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_simpleStatement

	return p
}

func (s *SimpleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStatementContext) VariableDeclarationStatement() IVariableDeclarationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationStatementContext)
}

func (s *SimpleStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *SimpleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SimpleStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterSimpleStatement(s)
	}
}

func (s *SimpleStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitSimpleStatement(s)
	}
}

func (s *SimpleStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitSimpleStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) SimpleStatement() (localctx ISimpleStatementContext) {
	this := p
	_ = this

	localctx = NewSimpleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SolidityParserRULE_simpleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(957)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(955)
			p.VariableDeclarationStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(956)
			p.ExpressionStatement()
		}

	}

	return localctx
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) If() antlr.TerminalNode {
	return s.GetToken(SolidityParserIf, 0)
}

func (s *IfStatementContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *IfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *IfStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) Else() antlr.TerminalNode {
	return s.GetToken(SolidityParserElse, 0)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) IfStatement() (localctx IIfStatementContext) {
	this := p
	_ = this

	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SolidityParserRULE_ifStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(959)
		p.Match(SolidityParserIf)
	}
	{
		p.SetState(960)
		p.Match(SolidityParserLParen)
	}
	{
		p.SetState(961)
		p.expression(0)
	}
	{
		p.SetState(962)
		p.Match(SolidityParserRParen)
	}
	{
		p.SetState(963)
		p.Statement()
	}
	p.SetState(966)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(964)
			p.Match(SolidityParserElse)
		}
		{
			p.SetState(965)
			p.Statement()
		}

	}

	return localctx
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_forStatement
	return p
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) For() antlr.TerminalNode {
	return s.GetToken(SolidityParserFor, 0)
}

func (s *ForStatementContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *ForStatementContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *ForStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForStatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *ForStatementContext) AllSemicolon() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserSemicolon)
}

func (s *ForStatementContext) Semicolon(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, i)
}

func (s *ForStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *ForStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (s *ForStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitForStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ForStatement() (localctx IForStatementContext) {
	this := p
	_ = this

	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SolidityParserRULE_forStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(968)
		p.Match(SolidityParserFor)
	}
	{
		p.SetState(969)
		p.Match(SolidityParserLParen)
	}
	p.SetState(972)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 100, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(970)
			p.SimpleStatement()
		}

	case 2:
		{
			p.SetState(971)
			p.Match(SolidityParserSemicolon)
		}

	}
	p.SetState(976)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(974)
			p.ExpressionStatement()
		}

	case 2:
		{
			p.SetState(975)
			p.Match(SolidityParserSemicolon)
		}

	}
	p.SetState(979)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 102, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(978)
			p.expression(0)
		}

	}
	{
		p.SetState(981)
		p.Match(SolidityParserRParen)
	}
	{
		p.SetState(982)
		p.Statement()
	}

	return localctx
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) While() antlr.TerminalNode {
	return s.GetToken(SolidityParserWhile, 0)
}

func (s *WhileStatementContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) WhileStatement() (localctx IWhileStatementContext) {
	this := p
	_ = this

	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SolidityParserRULE_whileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(984)
		p.Match(SolidityParserWhile)
	}
	{
		p.SetState(985)
		p.Match(SolidityParserLParen)
	}
	{
		p.SetState(986)
		p.expression(0)
	}
	{
		p.SetState(987)
		p.Match(SolidityParserRParen)
	}
	{
		p.SetState(988)
		p.Statement()
	}

	return localctx
}

// IDoWhileStatementContext is an interface to support dynamic dispatch.
type IDoWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoWhileStatementContext differentiates from other interfaces.
	IsDoWhileStatementContext()
}

type DoWhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoWhileStatementContext() *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_doWhileStatement
	return p
}

func (*DoWhileStatementContext) IsDoWhileStatementContext() {}

func NewDoWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_doWhileStatement

	return p
}

func (s *DoWhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoWhileStatementContext) Do() antlr.TerminalNode {
	return s.GetToken(SolidityParserDo, 0)
}

func (s *DoWhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoWhileStatementContext) While() antlr.TerminalNode {
	return s.GetToken(SolidityParserWhile, 0)
}

func (s *DoWhileStatementContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *DoWhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DoWhileStatementContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *DoWhileStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *DoWhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoWhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *DoWhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterDoWhileStatement(s)
	}
}

func (s *DoWhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitDoWhileStatement(s)
	}
}

func (s *DoWhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitDoWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) DoWhileStatement() (localctx IDoWhileStatementContext) {
	this := p
	_ = this

	localctx = NewDoWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SolidityParserRULE_doWhileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Match(SolidityParserDo)
	}
	{
		p.SetState(991)
		p.Statement()
	}
	{
		p.SetState(992)
		p.Match(SolidityParserWhile)
	}
	{
		p.SetState(993)
		p.Match(SolidityParserLParen)
	}
	{
		p.SetState(994)
		p.expression(0)
	}
	{
		p.SetState(995)
		p.Match(SolidityParserRParen)
	}
	{
		p.SetState(996)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) Continue() antlr.TerminalNode {
	return s.GetToken(SolidityParserContinue, 0)
}

func (s *ContinueStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ContinueStatement() (localctx IContinueStatementContext) {
	this := p
	_ = this

	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SolidityParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(998)
		p.Match(SolidityParserContinue)
	}
	{
		p.SetState(999)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) Break() antlr.TerminalNode {
	return s.GetToken(SolidityParserBreak, 0)
}

func (s *BreakStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) BreakStatement() (localctx IBreakStatementContext) {
	this := p
	_ = this

	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SolidityParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1001)
		p.Match(SolidityParserBreak)
	}
	{
		p.SetState(1002)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// ITryStatementContext is an interface to support dynamic dispatch.
type ITryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetReturnParameters returns the returnParameters rule contexts.
	GetReturnParameters() IParameterListContext

	// SetReturnParameters sets the returnParameters rule contexts.
	SetReturnParameters(IParameterListContext)

	// IsTryStatementContext differentiates from other interfaces.
	IsTryStatementContext()
}

type TryStatementContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	returnParameters IParameterListContext
}

func NewEmptyTryStatementContext() *TryStatementContext {
	var p = new(TryStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_tryStatement
	return p
}

func (*TryStatementContext) IsTryStatementContext() {}

func NewTryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatementContext {
	var p = new(TryStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_tryStatement

	return p
}

func (s *TryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatementContext) GetReturnParameters() IParameterListContext { return s.returnParameters }

func (s *TryStatementContext) SetReturnParameters(v IParameterListContext) { s.returnParameters = v }

func (s *TryStatementContext) Try() antlr.TerminalNode {
	return s.GetToken(SolidityParserTry, 0)
}

func (s *TryStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TryStatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStatementContext) Returns() antlr.TerminalNode {
	return s.GetToken(SolidityParserReturns, 0)
}

func (s *TryStatementContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *TryStatementContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *TryStatementContext) AllCatchClause() []ICatchClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICatchClauseContext)(nil)).Elem())
	var tst = make([]ICatchClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICatchClauseContext)
		}
	}

	return tst
}

func (s *TryStatementContext) CatchClause(i int) ICatchClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICatchClauseContext)
}

func (s *TryStatementContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *TryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterTryStatement(s)
	}
}

func (s *TryStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitTryStatement(s)
	}
}

func (s *TryStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitTryStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) TryStatement() (localctx ITryStatementContext) {
	this := p
	_ = this

	localctx = NewTryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, SolidityParserRULE_tryStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1004)
		p.Match(SolidityParserTry)
	}
	{
		p.SetState(1005)
		p.expression(0)
	}
	p.SetState(1011)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserReturns {
		{
			p.SetState(1006)
			p.Match(SolidityParserReturns)
		}
		{
			p.SetState(1007)
			p.Match(SolidityParserLParen)
		}
		{
			p.SetState(1008)

			var _x = p.ParameterList()

			localctx.(*TryStatementContext).returnParameters = _x
		}
		{
			p.SetState(1009)
			p.Match(SolidityParserRParen)
		}

	}
	{
		p.SetState(1013)
		p.Block()
	}
	p.SetState(1015)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
			{
				p.SetState(1014)
				p.CatchClause()
			}

		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1017)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 104, p.GetParserRuleContext())
	}

	return localctx
}

// ICatchClauseContext is an interface to support dynamic dispatch.
type ICatchClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetArguments returns the arguments rule contexts.
	GetArguments() IParameterListContext

	// SetArguments sets the arguments rule contexts.
	SetArguments(IParameterListContext)

	// IsCatchClauseContext differentiates from other interfaces.
	IsCatchClauseContext()
}

type CatchClauseContext struct {
	*antlr.BaseParserRuleContext
	parser    antlr.Parser
	arguments IParameterListContext
}

func NewEmptyCatchClauseContext() *CatchClauseContext {
	var p = new(CatchClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_catchClause
	return p
}

func (*CatchClauseContext) IsCatchClauseContext() {}

func NewCatchClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchClauseContext {
	var p = new(CatchClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_catchClause

	return p
}

func (s *CatchClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchClauseContext) GetArguments() IParameterListContext { return s.arguments }

func (s *CatchClauseContext) SetArguments(v IParameterListContext) { s.arguments = v }

func (s *CatchClauseContext) Catch() antlr.TerminalNode {
	return s.GetToken(SolidityParserCatch, 0)
}

func (s *CatchClauseContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CatchClauseContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *CatchClauseContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *CatchClauseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CatchClauseContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *CatchClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CatchClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterCatchClause(s)
	}
}

func (s *CatchClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitCatchClause(s)
	}
}

func (s *CatchClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitCatchClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) CatchClause() (localctx ICatchClauseContext) {
	this := p
	_ = this

	localctx = NewCatchClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SolidityParserRULE_catchClause)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1019)
		p.Match(SolidityParserCatch)
	}
	p.SetState(1027)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserLParen || _la == SolidityParserIdentifier {
		p.SetState(1021)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if (((_la-22)&-(0x1f+1)) == 0 && ((1<<uint(_la-22))&((1<<(SolidityParserError-22))|(1<<(SolidityParserRevert-22))|(1<<(SolidityParserFrom-22))|(1<<(SolidityParserGlobal-22)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(1020)
				p.Identifier()
			}

		}
		{
			p.SetState(1023)
			p.Match(SolidityParserLParen)
		}

		{
			p.SetState(1024)

			var _x = p.ParameterList()

			localctx.(*CatchClauseContext).arguments = _x
		}

		{
			p.SetState(1025)
			p.Match(SolidityParserRParen)
		}

	}
	{
		p.SetState(1029)
		p.Block()
	}

	return localctx
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Return() antlr.TerminalNode {
	return s.GetToken(SolidityParserReturn, 0)
}

func (s *ReturnStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ReturnStatement() (localctx IReturnStatementContext) {
	this := p
	_ = this

	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SolidityParserRULE_returnStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1031)
		p.Match(SolidityParserReturn)
	}
	p.SetState(1033)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 107, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1032)
			p.expression(0)
		}

	}
	{
		p.SetState(1035)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IEmitStatementContext is an interface to support dynamic dispatch.
type IEmitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmitStatementContext differentiates from other interfaces.
	IsEmitStatementContext()
}

type EmitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmitStatementContext() *EmitStatementContext {
	var p = new(EmitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_emitStatement
	return p
}

func (*EmitStatementContext) IsEmitStatementContext() {}

func NewEmitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmitStatementContext {
	var p = new(EmitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_emitStatement

	return p
}

func (s *EmitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EmitStatementContext) Emit() antlr.TerminalNode {
	return s.GetToken(SolidityParserEmit, 0)
}

func (s *EmitStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *EmitStatementContext) CallArgumentList() ICallArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentListContext)
}

func (s *EmitStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *EmitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EmitStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterEmitStatement(s)
	}
}

func (s *EmitStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitEmitStatement(s)
	}
}

func (s *EmitStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitEmitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) EmitStatement() (localctx IEmitStatementContext) {
	this := p
	_ = this

	localctx = NewEmitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SolidityParserRULE_emitStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1037)
		p.Match(SolidityParserEmit)
	}
	{
		p.SetState(1038)
		p.expression(0)
	}
	{
		p.SetState(1039)
		p.CallArgumentList()
	}
	{
		p.SetState(1040)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IRevertStatementContext is an interface to support dynamic dispatch.
type IRevertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevertStatementContext differentiates from other interfaces.
	IsRevertStatementContext()
}

type RevertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevertStatementContext() *RevertStatementContext {
	var p = new(RevertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_revertStatement
	return p
}

func (*RevertStatementContext) IsRevertStatementContext() {}

func NewRevertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevertStatementContext {
	var p = new(RevertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_revertStatement

	return p
}

func (s *RevertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RevertStatementContext) Revert() antlr.TerminalNode {
	return s.GetToken(SolidityParserRevert, 0)
}

func (s *RevertStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *RevertStatementContext) CallArgumentList() ICallArgumentListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICallArgumentListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICallArgumentListContext)
}

func (s *RevertStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *RevertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RevertStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterRevertStatement(s)
	}
}

func (s *RevertStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitRevertStatement(s)
	}
}

func (s *RevertStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitRevertStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) RevertStatement() (localctx IRevertStatementContext) {
	this := p
	_ = this

	localctx = NewRevertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SolidityParserRULE_revertStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Match(SolidityParserRevert)
	}
	{
		p.SetState(1043)
		p.expression(0)
	}
	{
		p.SetState(1044)
		p.CallArgumentList()
	}
	{
		p.SetState(1045)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IAssemblyStatementContext is an interface to support dynamic dispatch.
type IAssemblyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyStatementContext differentiates from other interfaces.
	IsAssemblyStatementContext()
}

type AssemblyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyStatementContext() *AssemblyStatementContext {
	var p = new(AssemblyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyStatement
	return p
}

func (*AssemblyStatementContext) IsAssemblyStatementContext() {}

func NewAssemblyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyStatementContext {
	var p = new(AssemblyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyStatement

	return p
}

func (s *AssemblyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyStatementContext) Assembly() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssembly, 0)
}

func (s *AssemblyStatementContext) AssemblyLBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssemblyLBrace, 0)
}

func (s *AssemblyStatementContext) YulRBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulRBrace, 0)
}

func (s *AssemblyStatementContext) AssemblyDialect() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssemblyDialect, 0)
}

func (s *AssemblyStatementContext) AssemblyFlags() IAssemblyFlagsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFlagsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFlagsContext)
}

func (s *AssemblyStatementContext) AllYulStatement() []IYulStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IYulStatementContext)(nil)).Elem())
	var tst = make([]IYulStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IYulStatementContext)
		}
	}

	return tst
}

func (s *AssemblyStatementContext) YulStatement(i int) IYulStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IYulStatementContext)
}

func (s *AssemblyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterAssemblyStatement(s)
	}
}

func (s *AssemblyStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitAssemblyStatement(s)
	}
}

func (s *AssemblyStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitAssemblyStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) AssemblyStatement() (localctx IAssemblyStatementContext) {
	this := p
	_ = this

	localctx = NewAssemblyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SolidityParserRULE_assemblyStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1047)
		p.Match(SolidityParserAssembly)
	}
	p.SetState(1049)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAssemblyDialect {
		{
			p.SetState(1048)
			p.Match(SolidityParserAssemblyDialect)
		}

	}
	p.SetState(1052)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserAssemblyBlockLParen {
		{
			p.SetState(1051)
			p.AssemblyFlags()
		}

	}
	{
		p.SetState(1054)
		p.Match(SolidityParserAssemblyLBrace)
	}
	p.SetState(1058)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-140)&-(0x1f+1)) == 0 && ((1<<uint(_la-140))&((1<<(SolidityParserYulBreak-140))|(1<<(SolidityParserYulContinue-140))|(1<<(SolidityParserYulFor-140))|(1<<(SolidityParserYulFunction-140))|(1<<(SolidityParserYulIf-140))|(1<<(SolidityParserYulLeave-140))|(1<<(SolidityParserYulLet-140))|(1<<(SolidityParserYulSwitch-140))|(1<<(SolidityParserYulEVMBuiltin-140))|(1<<(SolidityParserYulLBrace-140))|(1<<(SolidityParserYulIdentifier-140)))) != 0 {
		{
			p.SetState(1055)
			p.YulStatement()
		}

		p.SetState(1060)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1061)
		p.Match(SolidityParserYulRBrace)
	}

	return localctx
}

// IAssemblyFlagsContext is an interface to support dynamic dispatch.
type IAssemblyFlagsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFlagsContext differentiates from other interfaces.
	IsAssemblyFlagsContext()
}

type AssemblyFlagsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFlagsContext() *AssemblyFlagsContext {
	var p = new(AssemblyFlagsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFlags
	return p
}

func (*AssemblyFlagsContext) IsAssemblyFlagsContext() {}

func NewAssemblyFlagsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFlagsContext {
	var p = new(AssemblyFlagsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFlags

	return p
}

func (s *AssemblyFlagsContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFlagsContext) AssemblyBlockLParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssemblyBlockLParen, 0)
}

func (s *AssemblyFlagsContext) AllAssemblyFlagString() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserAssemblyFlagString)
}

func (s *AssemblyFlagsContext) AssemblyFlagString(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserAssemblyFlagString, i)
}

func (s *AssemblyFlagsContext) AssemblyBlockRParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssemblyBlockRParen, 0)
}

func (s *AssemblyFlagsContext) AllAssemblyBlockComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserAssemblyBlockComma)
}

func (s *AssemblyFlagsContext) AssemblyBlockComma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserAssemblyBlockComma, i)
}

func (s *AssemblyFlagsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFlagsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AssemblyFlagsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterAssemblyFlags(s)
	}
}

func (s *AssemblyFlagsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitAssemblyFlags(s)
	}
}

func (s *AssemblyFlagsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitAssemblyFlags(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) AssemblyFlags() (localctx IAssemblyFlagsContext) {
	this := p
	_ = this

	localctx = NewAssemblyFlagsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SolidityParserRULE_assemblyFlags)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1063)
		p.Match(SolidityParserAssemblyBlockLParen)
	}
	{
		p.SetState(1064)
		p.Match(SolidityParserAssemblyFlagString)
	}
	p.SetState(1069)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserAssemblyBlockComma {
		{
			p.SetState(1065)
			p.Match(SolidityParserAssemblyBlockComma)
		}
		{
			p.SetState(1066)
			p.Match(SolidityParserAssemblyFlagString)
		}

		p.SetState(1071)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1072)
		p.Match(SolidityParserAssemblyBlockRParen)
	}

	return localctx
}

// IVariableDeclarationListContext is an interface to support dynamic dispatch.
type IVariableDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_variableDeclaration returns the _variableDeclaration rule contexts.
	Get_variableDeclaration() IVariableDeclarationContext

	// Set_variableDeclaration sets the _variableDeclaration rule contexts.
	Set_variableDeclaration(IVariableDeclarationContext)

	// GetVariableDeclarations returns the variableDeclarations rule context list.
	GetVariableDeclarations() []IVariableDeclarationContext

	// SetVariableDeclarations sets the variableDeclarations rule context list.
	SetVariableDeclarations([]IVariableDeclarationContext)

	// IsVariableDeclarationListContext differentiates from other interfaces.
	IsVariableDeclarationListContext()
}

type VariableDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	_variableDeclaration IVariableDeclarationContext
	variableDeclarations []IVariableDeclarationContext
}

func NewEmptyVariableDeclarationListContext() *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationList
	return p
}

func (*VariableDeclarationListContext) IsVariableDeclarationListContext() {}

func NewVariableDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationList

	return p
}

func (s *VariableDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationListContext) Get_variableDeclaration() IVariableDeclarationContext {
	return s._variableDeclaration
}

func (s *VariableDeclarationListContext) Set_variableDeclaration(v IVariableDeclarationContext) {
	s._variableDeclaration = v
}

func (s *VariableDeclarationListContext) GetVariableDeclarations() []IVariableDeclarationContext {
	return s.variableDeclarations
}

func (s *VariableDeclarationListContext) SetVariableDeclarations(v []IVariableDeclarationContext) {
	s.variableDeclarations = v
}

func (s *VariableDeclarationListContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *VariableDeclarationListContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationListContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *VariableDeclarationListContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *VariableDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterVariableDeclarationList(s)
	}
}

func (s *VariableDeclarationListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitVariableDeclarationList(s)
	}
}

func (s *VariableDeclarationListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitVariableDeclarationList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) VariableDeclarationList() (localctx IVariableDeclarationListContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SolidityParserRULE_variableDeclarationList)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1074)

		var _x = p.VariableDeclaration()

		localctx.(*VariableDeclarationListContext)._variableDeclaration = _x
	}
	localctx.(*VariableDeclarationListContext).variableDeclarations = append(localctx.(*VariableDeclarationListContext).variableDeclarations, localctx.(*VariableDeclarationListContext)._variableDeclaration)
	p.SetState(1079)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(1075)
			p.Match(SolidityParserComma)
		}
		{
			p.SetState(1076)

			var _x = p.VariableDeclaration()

			localctx.(*VariableDeclarationListContext)._variableDeclaration = _x
		}
		localctx.(*VariableDeclarationListContext).variableDeclarations = append(localctx.(*VariableDeclarationListContext).variableDeclarations, localctx.(*VariableDeclarationListContext)._variableDeclaration)

		p.SetState(1081)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IVariableDeclarationTupleContext is an interface to support dynamic dispatch.
type IVariableDeclarationTupleContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_variableDeclaration returns the _variableDeclaration rule contexts.
	Get_variableDeclaration() IVariableDeclarationContext

	// Set_variableDeclaration sets the _variableDeclaration rule contexts.
	Set_variableDeclaration(IVariableDeclarationContext)

	// GetVariableDeclarations returns the variableDeclarations rule context list.
	GetVariableDeclarations() []IVariableDeclarationContext

	// SetVariableDeclarations sets the variableDeclarations rule context list.
	SetVariableDeclarations([]IVariableDeclarationContext)

	// IsVariableDeclarationTupleContext differentiates from other interfaces.
	IsVariableDeclarationTupleContext()
}

type VariableDeclarationTupleContext struct {
	*antlr.BaseParserRuleContext
	parser               antlr.Parser
	_variableDeclaration IVariableDeclarationContext
	variableDeclarations []IVariableDeclarationContext
}

func NewEmptyVariableDeclarationTupleContext() *VariableDeclarationTupleContext {
	var p = new(VariableDeclarationTupleContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationTuple
	return p
}

func (*VariableDeclarationTupleContext) IsVariableDeclarationTupleContext() {}

func NewVariableDeclarationTupleContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationTupleContext {
	var p = new(VariableDeclarationTupleContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationTuple

	return p
}

func (s *VariableDeclarationTupleContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationTupleContext) Get_variableDeclaration() IVariableDeclarationContext {
	return s._variableDeclaration
}

func (s *VariableDeclarationTupleContext) Set_variableDeclaration(v IVariableDeclarationContext) {
	s._variableDeclaration = v
}

func (s *VariableDeclarationTupleContext) GetVariableDeclarations() []IVariableDeclarationContext {
	return s.variableDeclarations
}

func (s *VariableDeclarationTupleContext) SetVariableDeclarations(v []IVariableDeclarationContext) {
	s.variableDeclarations = v
}

func (s *VariableDeclarationTupleContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *VariableDeclarationTupleContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *VariableDeclarationTupleContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *VariableDeclarationTupleContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationTupleContext) AllComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserComma)
}

func (s *VariableDeclarationTupleContext) Comma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserComma, i)
}

func (s *VariableDeclarationTupleContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationTupleContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationTupleContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterVariableDeclarationTuple(s)
	}
}

func (s *VariableDeclarationTupleContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitVariableDeclarationTuple(s)
	}
}

func (s *VariableDeclarationTupleContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitVariableDeclarationTuple(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) VariableDeclarationTuple() (localctx IVariableDeclarationTupleContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationTupleContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SolidityParserRULE_variableDeclarationTuple)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1082)
		p.Match(SolidityParserLParen)
	}

	p.SetState(1086)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1083)
				p.Match(SolidityParserComma)
			}

		}
		p.SetState(1088)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 113, p.GetParserRuleContext())
	}
	{
		p.SetState(1089)

		var _x = p.VariableDeclaration()

		localctx.(*VariableDeclarationTupleContext)._variableDeclaration = _x
	}
	localctx.(*VariableDeclarationTupleContext).variableDeclarations = append(localctx.(*VariableDeclarationTupleContext).variableDeclarations, localctx.(*VariableDeclarationTupleContext)._variableDeclaration)

	p.SetState(1097)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserComma {
		{
			p.SetState(1091)
			p.Match(SolidityParserComma)
		}
		p.SetState(1093)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 114, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(1092)

				var _x = p.VariableDeclaration()

				localctx.(*VariableDeclarationTupleContext)._variableDeclaration = _x
			}
			localctx.(*VariableDeclarationTupleContext).variableDeclarations = append(localctx.(*VariableDeclarationTupleContext).variableDeclarations, localctx.(*VariableDeclarationTupleContext)._variableDeclaration)

		}

		p.SetState(1099)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1100)
		p.Match(SolidityParserRParen)
	}

	return localctx
}

// IVariableDeclarationStatementContext is an interface to support dynamic dispatch.
type IVariableDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationStatementContext differentiates from other interfaces.
	IsVariableDeclarationStatementContext()
}

type VariableDeclarationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationStatementContext() *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement
	return p
}

func (*VariableDeclarationStatementContext) IsVariableDeclarationStatementContext() {}

func NewVariableDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement

	return p
}

func (s *VariableDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *VariableDeclarationStatementContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationStatementContext) VariableDeclarationTuple() IVariableDeclarationTupleContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationTupleContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationTupleContext)
}

func (s *VariableDeclarationStatementContext) Assign() antlr.TerminalNode {
	return s.GetToken(SolidityParserAssign, 0)
}

func (s *VariableDeclarationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VariableDeclarationStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterVariableDeclarationStatement(s)
	}
}

func (s *VariableDeclarationStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitVariableDeclarationStatement(s)
	}
}

func (s *VariableDeclarationStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitVariableDeclarationStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) VariableDeclarationStatement() (localctx IVariableDeclarationStatementContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SolidityParserRULE_variableDeclarationStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1111)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 117, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(1102)
			p.VariableDeclaration()
		}
		p.SetState(1105)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserAssign {
			{
				p.SetState(1103)
				p.Match(SolidityParserAssign)
			}
			{
				p.SetState(1104)
				p.expression(0)
			}

		}

	case 2:
		{
			p.SetState(1107)
			p.VariableDeclarationTuple()
		}
		{
			p.SetState(1108)
			p.Match(SolidityParserAssign)
		}
		{
			p.SetState(1109)
			p.expression(0)
		}

	}
	{
		p.SetState(1113)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) Semicolon() antlr.TerminalNode {
	return s.GetToken(SolidityParserSemicolon, 0)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExpressionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitExpressionStatement(s)
	}
}

func (s *ExpressionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitExpressionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	this := p
	_ = this

	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SolidityParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1115)
		p.expression(0)
	}
	{
		p.SetState(1116)
		p.Match(SolidityParserSemicolon)
	}

	return localctx
}

// IMappingTypeContext is an interface to support dynamic dispatch.
type IMappingTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetKey returns the key rule contexts.
	GetKey() IMappingKeyTypeContext

	// GetValue returns the value rule contexts.
	GetValue() ITypeNameContext

	// SetKey sets the key rule contexts.
	SetKey(IMappingKeyTypeContext)

	// SetValue sets the value rule contexts.
	SetValue(ITypeNameContext)

	// IsMappingTypeContext differentiates from other interfaces.
	IsMappingTypeContext()
}

type MappingTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	key    IMappingKeyTypeContext
	value  ITypeNameContext
}

func NewEmptyMappingTypeContext() *MappingTypeContext {
	var p = new(MappingTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_mappingType
	return p
}

func (*MappingTypeContext) IsMappingTypeContext() {}

func NewMappingTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MappingTypeContext {
	var p = new(MappingTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_mappingType

	return p
}

func (s *MappingTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MappingTypeContext) GetKey() IMappingKeyTypeContext { return s.key }

func (s *MappingTypeContext) GetValue() ITypeNameContext { return s.value }

func (s *MappingTypeContext) SetKey(v IMappingKeyTypeContext) { s.key = v }

func (s *MappingTypeContext) SetValue(v ITypeNameContext) { s.value = v }

func (s *MappingTypeContext) Mapping() antlr.TerminalNode {
	return s.GetToken(SolidityParserMapping, 0)
}

func (s *MappingTypeContext) LParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserLParen, 0)
}

func (s *MappingTypeContext) DoubleArrow() antlr.TerminalNode {
	return s.GetToken(SolidityParserDoubleArrow, 0)
}

func (s *MappingTypeContext) RParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserRParen, 0)
}

func (s *MappingTypeContext) MappingKeyType() IMappingKeyTypeContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMappingKeyTypeContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMappingKeyTypeContext)
}

func (s *MappingTypeContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MappingTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MappingTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MappingTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterMappingType(s)
	}
}

func (s *MappingTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitMappingType(s)
	}
}

func (s *MappingTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitMappingType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) MappingType() (localctx IMappingTypeContext) {
	this := p
	_ = this

	localctx = NewMappingTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SolidityParserRULE_mappingType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1118)
		p.Match(SolidityParserMapping)
	}
	{
		p.SetState(1119)
		p.Match(SolidityParserLParen)
	}
	{
		p.SetState(1120)

		var _x = p.MappingKeyType()

		localctx.(*MappingTypeContext).key = _x
	}
	{
		p.SetState(1121)
		p.Match(SolidityParserDoubleArrow)
	}
	{
		p.SetState(1122)

		var _x = p.typeName(0)

		localctx.(*MappingTypeContext).value = _x
	}
	{
		p.SetState(1123)
		p.Match(SolidityParserRParen)
	}

	return localctx
}

// IMappingKeyTypeContext is an interface to support dynamic dispatch.
type IMappingKeyTypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMappingKeyTypeContext differentiates from other interfaces.
	IsMappingKeyTypeContext()
}

type MappingKeyTypeContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMappingKeyTypeContext() *MappingKeyTypeContext {
	var p = new(MappingKeyTypeContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_mappingKeyType
	return p
}

func (*MappingKeyTypeContext) IsMappingKeyTypeContext() {}

func NewMappingKeyTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MappingKeyTypeContext {
	var p = new(MappingKeyTypeContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_mappingKeyType

	return p
}

func (s *MappingKeyTypeContext) GetParser() antlr.Parser { return s.parser }

func (s *MappingKeyTypeContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *MappingKeyTypeContext) IdentifierPath() IIdentifierPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierPathContext)
}

func (s *MappingKeyTypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MappingKeyTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MappingKeyTypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterMappingKeyType(s)
	}
}

func (s *MappingKeyTypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitMappingKeyType(s)
	}
}

func (s *MappingKeyTypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitMappingKeyType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) MappingKeyType() (localctx IMappingKeyTypeContext) {
	this := p
	_ = this

	localctx = NewMappingKeyTypeContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SolidityParserRULE_mappingKeyType)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1127)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 118, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1125)
			p.ElementaryTypeName(false)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1126)
			p.IdentifierPath()
		}

	}

	return localctx
}

// IYulStatementContext is an interface to support dynamic dispatch.
type IYulStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulStatementContext differentiates from other interfaces.
	IsYulStatementContext()
}

type YulStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulStatementContext() *YulStatementContext {
	var p = new(YulStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulStatement
	return p
}

func (*YulStatementContext) IsYulStatementContext() {}

func NewYulStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulStatementContext {
	var p = new(YulStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulStatement

	return p
}

func (s *YulStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YulStatementContext) YulBlock() IYulBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulBlockContext)
}

func (s *YulStatementContext) YulVariableDeclaration() IYulVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulVariableDeclarationContext)
}

func (s *YulStatementContext) YulAssignment() IYulAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulAssignmentContext)
}

func (s *YulStatementContext) YulFunctionCall() IYulFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulFunctionCallContext)
}

func (s *YulStatementContext) YulIfStatement() IYulIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulIfStatementContext)
}

func (s *YulStatementContext) YulForStatement() IYulForStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulForStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulForStatementContext)
}

func (s *YulStatementContext) YulSwitchStatement() IYulSwitchStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulSwitchStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulSwitchStatementContext)
}

func (s *YulStatementContext) YulLeave() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulLeave, 0)
}

func (s *YulStatementContext) YulBreak() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulBreak, 0)
}

func (s *YulStatementContext) YulContinue() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulContinue, 0)
}

func (s *YulStatementContext) YulFunctionDefinition() IYulFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulFunctionDefinitionContext)
}

func (s *YulStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulStatement(s)
	}
}

func (s *YulStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulStatement(s)
	}
}

func (s *YulStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulStatement() (localctx IYulStatementContext) {
	this := p
	_ = this

	localctx = NewYulStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SolidityParserRULE_yulStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1140)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 119, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1129)
			p.YulBlock()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1130)
			p.YulVariableDeclaration()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1131)
			p.YulAssignment()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1132)
			p.YulFunctionCall()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1133)
			p.YulIfStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(1134)
			p.YulForStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(1135)
			p.YulSwitchStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(1136)
			p.Match(SolidityParserYulLeave)
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(1137)
			p.Match(SolidityParserYulBreak)
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(1138)
			p.Match(SolidityParserYulContinue)
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(1139)
			p.YulFunctionDefinition()
		}

	}

	return localctx
}

// IYulBlockContext is an interface to support dynamic dispatch.
type IYulBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulBlockContext differentiates from other interfaces.
	IsYulBlockContext()
}

type YulBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulBlockContext() *YulBlockContext {
	var p = new(YulBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulBlock
	return p
}

func (*YulBlockContext) IsYulBlockContext() {}

func NewYulBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulBlockContext {
	var p = new(YulBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulBlock

	return p
}

func (s *YulBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *YulBlockContext) YulLBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulLBrace, 0)
}

func (s *YulBlockContext) YulRBrace() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulRBrace, 0)
}

func (s *YulBlockContext) AllYulStatement() []IYulStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IYulStatementContext)(nil)).Elem())
	var tst = make([]IYulStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IYulStatementContext)
		}
	}

	return tst
}

func (s *YulBlockContext) YulStatement(i int) IYulStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IYulStatementContext)
}

func (s *YulBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulBlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulBlock(s)
	}
}

func (s *YulBlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulBlock(s)
	}
}

func (s *YulBlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulBlock() (localctx IYulBlockContext) {
	this := p
	_ = this

	localctx = NewYulBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SolidityParserRULE_yulBlock)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1142)
		p.Match(SolidityParserYulLBrace)
	}
	p.SetState(1146)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for ((_la-140)&-(0x1f+1)) == 0 && ((1<<uint(_la-140))&((1<<(SolidityParserYulBreak-140))|(1<<(SolidityParserYulContinue-140))|(1<<(SolidityParserYulFor-140))|(1<<(SolidityParserYulFunction-140))|(1<<(SolidityParserYulIf-140))|(1<<(SolidityParserYulLeave-140))|(1<<(SolidityParserYulLet-140))|(1<<(SolidityParserYulSwitch-140))|(1<<(SolidityParserYulEVMBuiltin-140))|(1<<(SolidityParserYulLBrace-140))|(1<<(SolidityParserYulIdentifier-140)))) != 0 {
		{
			p.SetState(1143)
			p.YulStatement()
		}

		p.SetState(1148)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(1149)
		p.Match(SolidityParserYulRBrace)
	}

	return localctx
}

// IYulVariableDeclarationContext is an interface to support dynamic dispatch.
type IYulVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_YulIdentifier returns the _YulIdentifier token.
	Get_YulIdentifier() antlr.Token

	// Set_YulIdentifier sets the _YulIdentifier token.
	Set_YulIdentifier(antlr.Token)

	// GetVariables returns the variables token list.
	GetVariables() []antlr.Token

	// SetVariables sets the variables token list.
	SetVariables([]antlr.Token)

	// IsYulVariableDeclarationContext differentiates from other interfaces.
	IsYulVariableDeclarationContext()
}

type YulVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser         antlr.Parser
	_YulIdentifier antlr.Token
	variables      []antlr.Token
}

func NewEmptyYulVariableDeclarationContext() *YulVariableDeclarationContext {
	var p = new(YulVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulVariableDeclaration
	return p
}

func (*YulVariableDeclarationContext) IsYulVariableDeclarationContext() {}

func NewYulVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulVariableDeclarationContext {
	var p = new(YulVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulVariableDeclaration

	return p
}

func (s *YulVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *YulVariableDeclarationContext) Get_YulIdentifier() antlr.Token { return s._YulIdentifier }

func (s *YulVariableDeclarationContext) Set_YulIdentifier(v antlr.Token) { s._YulIdentifier = v }

func (s *YulVariableDeclarationContext) GetVariables() []antlr.Token { return s.variables }

func (s *YulVariableDeclarationContext) SetVariables(v []antlr.Token) { s.variables = v }

func (s *YulVariableDeclarationContext) YulLet() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulLet, 0)
}

func (s *YulVariableDeclarationContext) AllYulIdentifier() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulIdentifier)
}

func (s *YulVariableDeclarationContext) YulIdentifier(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulIdentifier, i)
}

func (s *YulVariableDeclarationContext) YulAssign() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulAssign, 0)
}

func (s *YulVariableDeclarationContext) YulExpression() IYulExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulExpressionContext)
}

func (s *YulVariableDeclarationContext) AllYulComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulComma)
}

func (s *YulVariableDeclarationContext) YulComma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulComma, i)
}

func (s *YulVariableDeclarationContext) YulFunctionCall() IYulFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulFunctionCallContext)
}

func (s *YulVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulVariableDeclarationContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulVariableDeclaration(s)
	}
}

func (s *YulVariableDeclarationContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulVariableDeclaration(s)
	}
}

func (s *YulVariableDeclarationContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulVariableDeclaration(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulVariableDeclaration() (localctx IYulVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewYulVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SolidityParserRULE_yulVariableDeclaration)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1170)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 124, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1151)
			p.Match(SolidityParserYulLet)
		}
		{
			p.SetState(1152)

			var _m = p.Match(SolidityParserYulIdentifier)

			localctx.(*YulVariableDeclarationContext)._YulIdentifier = _m
		}
		localctx.(*YulVariableDeclarationContext).variables = append(localctx.(*YulVariableDeclarationContext).variables, localctx.(*YulVariableDeclarationContext)._YulIdentifier)
		p.SetState(1155)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserYulAssign {
			{
				p.SetState(1153)
				p.Match(SolidityParserYulAssign)
			}
			{
				p.SetState(1154)
				p.YulExpression()
			}

		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1157)
			p.Match(SolidityParserYulLet)
		}
		{
			p.SetState(1158)

			var _m = p.Match(SolidityParserYulIdentifier)

			localctx.(*YulVariableDeclarationContext)._YulIdentifier = _m
		}
		localctx.(*YulVariableDeclarationContext).variables = append(localctx.(*YulVariableDeclarationContext).variables, localctx.(*YulVariableDeclarationContext)._YulIdentifier)
		p.SetState(1163)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserYulComma {
			{
				p.SetState(1159)
				p.Match(SolidityParserYulComma)
			}
			{
				p.SetState(1160)

				var _m = p.Match(SolidityParserYulIdentifier)

				localctx.(*YulVariableDeclarationContext)._YulIdentifier = _m
			}
			localctx.(*YulVariableDeclarationContext).variables = append(localctx.(*YulVariableDeclarationContext).variables, localctx.(*YulVariableDeclarationContext)._YulIdentifier)

			p.SetState(1165)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1168)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserYulAssign {
			{
				p.SetState(1166)
				p.Match(SolidityParserYulAssign)
			}
			{
				p.SetState(1167)
				p.YulFunctionCall()
			}

		}

	}

	return localctx
}

// IYulAssignmentContext is an interface to support dynamic dispatch.
type IYulAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulAssignmentContext differentiates from other interfaces.
	IsYulAssignmentContext()
}

type YulAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulAssignmentContext() *YulAssignmentContext {
	var p = new(YulAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulAssignment
	return p
}

func (*YulAssignmentContext) IsYulAssignmentContext() {}

func NewYulAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulAssignmentContext {
	var p = new(YulAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulAssignment

	return p
}

func (s *YulAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *YulAssignmentContext) AllYulPath() []IYulPathContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IYulPathContext)(nil)).Elem())
	var tst = make([]IYulPathContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IYulPathContext)
		}
	}

	return tst
}

func (s *YulAssignmentContext) YulPath(i int) IYulPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulPathContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IYulPathContext)
}

func (s *YulAssignmentContext) YulAssign() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulAssign, 0)
}

func (s *YulAssignmentContext) YulExpression() IYulExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulExpressionContext)
}

func (s *YulAssignmentContext) YulFunctionCall() IYulFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulFunctionCallContext)
}

func (s *YulAssignmentContext) AllYulComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulComma)
}

func (s *YulAssignmentContext) YulComma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulComma, i)
}

func (s *YulAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulAssignmentContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulAssignment(s)
	}
}

func (s *YulAssignmentContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulAssignment(s)
	}
}

func (s *YulAssignmentContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulAssignment(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulAssignment() (localctx IYulAssignmentContext) {
	this := p
	_ = this

	localctx = NewYulAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SolidityParserRULE_yulAssignment)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1186)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 126, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1172)
			p.YulPath()
		}
		{
			p.SetState(1173)
			p.Match(SolidityParserYulAssign)
		}
		{
			p.SetState(1174)
			p.YulExpression()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1176)
			p.YulPath()
		}
		p.SetState(1179)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SolidityParserYulComma {
			{
				p.SetState(1177)
				p.Match(SolidityParserYulComma)
			}
			{
				p.SetState(1178)
				p.YulPath()
			}

			p.SetState(1181)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(1183)
			p.Match(SolidityParserYulAssign)
		}
		{
			p.SetState(1184)
			p.YulFunctionCall()
		}

	}

	return localctx
}

// IYulIfStatementContext is an interface to support dynamic dispatch.
type IYulIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetCond returns the cond rule contexts.
	GetCond() IYulExpressionContext

	// GetBody returns the body rule contexts.
	GetBody() IYulBlockContext

	// SetCond sets the cond rule contexts.
	SetCond(IYulExpressionContext)

	// SetBody sets the body rule contexts.
	SetBody(IYulBlockContext)

	// IsYulIfStatementContext differentiates from other interfaces.
	IsYulIfStatementContext()
}

type YulIfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	cond   IYulExpressionContext
	body   IYulBlockContext
}

func NewEmptyYulIfStatementContext() *YulIfStatementContext {
	var p = new(YulIfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulIfStatement
	return p
}

func (*YulIfStatementContext) IsYulIfStatementContext() {}

func NewYulIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulIfStatementContext {
	var p = new(YulIfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulIfStatement

	return p
}

func (s *YulIfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YulIfStatementContext) GetCond() IYulExpressionContext { return s.cond }

func (s *YulIfStatementContext) GetBody() IYulBlockContext { return s.body }

func (s *YulIfStatementContext) SetCond(v IYulExpressionContext) { s.cond = v }

func (s *YulIfStatementContext) SetBody(v IYulBlockContext) { s.body = v }

func (s *YulIfStatementContext) YulIf() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulIf, 0)
}

func (s *YulIfStatementContext) YulExpression() IYulExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulExpressionContext)
}

func (s *YulIfStatementContext) YulBlock() IYulBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulBlockContext)
}

func (s *YulIfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulIfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulIfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulIfStatement(s)
	}
}

func (s *YulIfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulIfStatement(s)
	}
}

func (s *YulIfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulIfStatement() (localctx IYulIfStatementContext) {
	this := p
	_ = this

	localctx = NewYulIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SolidityParserRULE_yulIfStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1188)
		p.Match(SolidityParserYulIf)
	}
	{
		p.SetState(1189)

		var _x = p.YulExpression()

		localctx.(*YulIfStatementContext).cond = _x
	}
	{
		p.SetState(1190)

		var _x = p.YulBlock()

		localctx.(*YulIfStatementContext).body = _x
	}

	return localctx
}

// IYulForStatementContext is an interface to support dynamic dispatch.
type IYulForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// GetInit returns the init rule contexts.
	GetInit() IYulBlockContext

	// GetCond returns the cond rule contexts.
	GetCond() IYulExpressionContext

	// GetPost returns the post rule contexts.
	GetPost() IYulBlockContext

	// GetBody returns the body rule contexts.
	GetBody() IYulBlockContext

	// SetInit sets the init rule contexts.
	SetInit(IYulBlockContext)

	// SetCond sets the cond rule contexts.
	SetCond(IYulExpressionContext)

	// SetPost sets the post rule contexts.
	SetPost(IYulBlockContext)

	// SetBody sets the body rule contexts.
	SetBody(IYulBlockContext)

	// IsYulForStatementContext differentiates from other interfaces.
	IsYulForStatementContext()
}

type YulForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
	init   IYulBlockContext
	cond   IYulExpressionContext
	post   IYulBlockContext
	body   IYulBlockContext
}

func NewEmptyYulForStatementContext() *YulForStatementContext {
	var p = new(YulForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulForStatement
	return p
}

func (*YulForStatementContext) IsYulForStatementContext() {}

func NewYulForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulForStatementContext {
	var p = new(YulForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulForStatement

	return p
}

func (s *YulForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YulForStatementContext) GetInit() IYulBlockContext { return s.init }

func (s *YulForStatementContext) GetCond() IYulExpressionContext { return s.cond }

func (s *YulForStatementContext) GetPost() IYulBlockContext { return s.post }

func (s *YulForStatementContext) GetBody() IYulBlockContext { return s.body }

func (s *YulForStatementContext) SetInit(v IYulBlockContext) { s.init = v }

func (s *YulForStatementContext) SetCond(v IYulExpressionContext) { s.cond = v }

func (s *YulForStatementContext) SetPost(v IYulBlockContext) { s.post = v }

func (s *YulForStatementContext) SetBody(v IYulBlockContext) { s.body = v }

func (s *YulForStatementContext) YulFor() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulFor, 0)
}

func (s *YulForStatementContext) AllYulBlock() []IYulBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IYulBlockContext)(nil)).Elem())
	var tst = make([]IYulBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IYulBlockContext)
		}
	}

	return tst
}

func (s *YulForStatementContext) YulBlock(i int) IYulBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IYulBlockContext)
}

func (s *YulForStatementContext) YulExpression() IYulExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulExpressionContext)
}

func (s *YulForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulForStatement(s)
	}
}

func (s *YulForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulForStatement(s)
	}
}

func (s *YulForStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulForStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulForStatement() (localctx IYulForStatementContext) {
	this := p
	_ = this

	localctx = NewYulForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SolidityParserRULE_yulForStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1192)
		p.Match(SolidityParserYulFor)
	}
	{
		p.SetState(1193)

		var _x = p.YulBlock()

		localctx.(*YulForStatementContext).init = _x
	}
	{
		p.SetState(1194)

		var _x = p.YulExpression()

		localctx.(*YulForStatementContext).cond = _x
	}
	{
		p.SetState(1195)

		var _x = p.YulBlock()

		localctx.(*YulForStatementContext).post = _x
	}
	{
		p.SetState(1196)

		var _x = p.YulBlock()

		localctx.(*YulForStatementContext).body = _x
	}

	return localctx
}

// IYulSwitchCaseContext is an interface to support dynamic dispatch.
type IYulSwitchCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulSwitchCaseContext differentiates from other interfaces.
	IsYulSwitchCaseContext()
}

type YulSwitchCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulSwitchCaseContext() *YulSwitchCaseContext {
	var p = new(YulSwitchCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulSwitchCase
	return p
}

func (*YulSwitchCaseContext) IsYulSwitchCaseContext() {}

func NewYulSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulSwitchCaseContext {
	var p = new(YulSwitchCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulSwitchCase

	return p
}

func (s *YulSwitchCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *YulSwitchCaseContext) YulCase() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulCase, 0)
}

func (s *YulSwitchCaseContext) YulLiteral() IYulLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulLiteralContext)
}

func (s *YulSwitchCaseContext) YulBlock() IYulBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulBlockContext)
}

func (s *YulSwitchCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulSwitchCase(s)
	}
}

func (s *YulSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulSwitchCase(s)
	}
}

func (s *YulSwitchCaseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulSwitchCase(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulSwitchCase() (localctx IYulSwitchCaseContext) {
	this := p
	_ = this

	localctx = NewYulSwitchCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SolidityParserRULE_yulSwitchCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1198)
		p.Match(SolidityParserYulCase)
	}
	{
		p.SetState(1199)
		p.YulLiteral()
	}
	{
		p.SetState(1200)
		p.YulBlock()
	}

	return localctx
}

// IYulSwitchStatementContext is an interface to support dynamic dispatch.
type IYulSwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulSwitchStatementContext differentiates from other interfaces.
	IsYulSwitchStatementContext()
}

type YulSwitchStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulSwitchStatementContext() *YulSwitchStatementContext {
	var p = new(YulSwitchStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulSwitchStatement
	return p
}

func (*YulSwitchStatementContext) IsYulSwitchStatementContext() {}

func NewYulSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulSwitchStatementContext {
	var p = new(YulSwitchStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulSwitchStatement

	return p
}

func (s *YulSwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *YulSwitchStatementContext) YulSwitch() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulSwitch, 0)
}

func (s *YulSwitchStatementContext) YulExpression() IYulExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulExpressionContext)
}

func (s *YulSwitchStatementContext) YulDefault() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulDefault, 0)
}

func (s *YulSwitchStatementContext) YulBlock() IYulBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulBlockContext)
}

func (s *YulSwitchStatementContext) AllYulSwitchCase() []IYulSwitchCaseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IYulSwitchCaseContext)(nil)).Elem())
	var tst = make([]IYulSwitchCaseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IYulSwitchCaseContext)
		}
	}

	return tst
}

func (s *YulSwitchStatementContext) YulSwitchCase(i int) IYulSwitchCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulSwitchCaseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IYulSwitchCaseContext)
}

func (s *YulSwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulSwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulSwitchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulSwitchStatement(s)
	}
}

func (s *YulSwitchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulSwitchStatement(s)
	}
}

func (s *YulSwitchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulSwitchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulSwitchStatement() (localctx IYulSwitchStatementContext) {
	this := p
	_ = this

	localctx = NewYulSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SolidityParserRULE_yulSwitchStatement)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1202)
		p.Match(SolidityParserYulSwitch)
	}
	{
		p.SetState(1203)
		p.YulExpression()
	}
	p.SetState(1215)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserYulCase:
		p.SetState(1205)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for ok := true; ok; ok = _la == SolidityParserYulCase {
			{
				p.SetState(1204)
				p.YulSwitchCase()
			}

			p.SetState(1207)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		p.SetState(1211)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		if _la == SolidityParserYulDefault {
			{
				p.SetState(1209)
				p.Match(SolidityParserYulDefault)
			}
			{
				p.SetState(1210)
				p.YulBlock()
			}

		}

	case SolidityParserYulDefault:
		{
			p.SetState(1213)
			p.Match(SolidityParserYulDefault)
		}
		{
			p.SetState(1214)
			p.YulBlock()
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IYulFunctionDefinitionContext is an interface to support dynamic dispatch.
type IYulFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Get_YulIdentifier returns the _YulIdentifier token.
	Get_YulIdentifier() antlr.Token

	// Set_YulIdentifier sets the _YulIdentifier token.
	Set_YulIdentifier(antlr.Token)

	// GetArguments returns the arguments token list.
	GetArguments() []antlr.Token

	// GetReturnParameters returns the returnParameters token list.
	GetReturnParameters() []antlr.Token

	// SetArguments sets the arguments token list.
	SetArguments([]antlr.Token)

	// SetReturnParameters sets the returnParameters token list.
	SetReturnParameters([]antlr.Token)

	// GetBody returns the body rule contexts.
	GetBody() IYulBlockContext

	// SetBody sets the body rule contexts.
	SetBody(IYulBlockContext)

	// IsYulFunctionDefinitionContext differentiates from other interfaces.
	IsYulFunctionDefinitionContext()
}

type YulFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser           antlr.Parser
	_YulIdentifier   antlr.Token
	arguments        []antlr.Token
	returnParameters []antlr.Token
	body             IYulBlockContext
}

func NewEmptyYulFunctionDefinitionContext() *YulFunctionDefinitionContext {
	var p = new(YulFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulFunctionDefinition
	return p
}

func (*YulFunctionDefinitionContext) IsYulFunctionDefinitionContext() {}

func NewYulFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulFunctionDefinitionContext {
	var p = new(YulFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulFunctionDefinition

	return p
}

func (s *YulFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *YulFunctionDefinitionContext) Get_YulIdentifier() antlr.Token { return s._YulIdentifier }

func (s *YulFunctionDefinitionContext) Set_YulIdentifier(v antlr.Token) { s._YulIdentifier = v }

func (s *YulFunctionDefinitionContext) GetArguments() []antlr.Token { return s.arguments }

func (s *YulFunctionDefinitionContext) GetReturnParameters() []antlr.Token { return s.returnParameters }

func (s *YulFunctionDefinitionContext) SetArguments(v []antlr.Token) { s.arguments = v }

func (s *YulFunctionDefinitionContext) SetReturnParameters(v []antlr.Token) { s.returnParameters = v }

func (s *YulFunctionDefinitionContext) GetBody() IYulBlockContext { return s.body }

func (s *YulFunctionDefinitionContext) SetBody(v IYulBlockContext) { s.body = v }

func (s *YulFunctionDefinitionContext) YulFunction() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulFunction, 0)
}

func (s *YulFunctionDefinitionContext) AllYulIdentifier() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulIdentifier)
}

func (s *YulFunctionDefinitionContext) YulIdentifier(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulIdentifier, i)
}

func (s *YulFunctionDefinitionContext) YulLParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulLParen, 0)
}

func (s *YulFunctionDefinitionContext) YulRParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulRParen, 0)
}

func (s *YulFunctionDefinitionContext) YulBlock() IYulBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulBlockContext)
}

func (s *YulFunctionDefinitionContext) YulArrow() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulArrow, 0)
}

func (s *YulFunctionDefinitionContext) AllYulComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulComma)
}

func (s *YulFunctionDefinitionContext) YulComma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulComma, i)
}

func (s *YulFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulFunctionDefinitionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulFunctionDefinition(s)
	}
}

func (s *YulFunctionDefinitionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulFunctionDefinition(s)
	}
}

func (s *YulFunctionDefinitionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulFunctionDefinition(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulFunctionDefinition() (localctx IYulFunctionDefinitionContext) {
	this := p
	_ = this

	localctx = NewYulFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SolidityParserRULE_yulFunctionDefinition)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1217)
		p.Match(SolidityParserYulFunction)
	}
	{
		p.SetState(1218)
		p.Match(SolidityParserYulIdentifier)
	}
	{
		p.SetState(1219)
		p.Match(SolidityParserYulLParen)
	}
	p.SetState(1228)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserYulIdentifier {
		{
			p.SetState(1220)

			var _m = p.Match(SolidityParserYulIdentifier)

			localctx.(*YulFunctionDefinitionContext)._YulIdentifier = _m
		}
		localctx.(*YulFunctionDefinitionContext).arguments = append(localctx.(*YulFunctionDefinitionContext).arguments, localctx.(*YulFunctionDefinitionContext)._YulIdentifier)
		p.SetState(1225)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserYulComma {
			{
				p.SetState(1221)
				p.Match(SolidityParserYulComma)
			}
			{
				p.SetState(1222)

				var _m = p.Match(SolidityParserYulIdentifier)

				localctx.(*YulFunctionDefinitionContext)._YulIdentifier = _m
			}
			localctx.(*YulFunctionDefinitionContext).arguments = append(localctx.(*YulFunctionDefinitionContext).arguments, localctx.(*YulFunctionDefinitionContext)._YulIdentifier)

			p.SetState(1227)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1230)
		p.Match(SolidityParserYulRParen)
	}
	p.SetState(1240)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if _la == SolidityParserYulArrow {
		{
			p.SetState(1231)
			p.Match(SolidityParserYulArrow)
		}
		{
			p.SetState(1232)

			var _m = p.Match(SolidityParserYulIdentifier)

			localctx.(*YulFunctionDefinitionContext)._YulIdentifier = _m
		}
		localctx.(*YulFunctionDefinitionContext).returnParameters = append(localctx.(*YulFunctionDefinitionContext).returnParameters, localctx.(*YulFunctionDefinitionContext)._YulIdentifier)
		p.SetState(1237)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserYulComma {
			{
				p.SetState(1233)
				p.Match(SolidityParserYulComma)
			}
			{
				p.SetState(1234)

				var _m = p.Match(SolidityParserYulIdentifier)

				localctx.(*YulFunctionDefinitionContext)._YulIdentifier = _m
			}
			localctx.(*YulFunctionDefinitionContext).returnParameters = append(localctx.(*YulFunctionDefinitionContext).returnParameters, localctx.(*YulFunctionDefinitionContext)._YulIdentifier)

			p.SetState(1239)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1242)

		var _x = p.YulBlock()

		localctx.(*YulFunctionDefinitionContext).body = _x
	}

	return localctx
}

// IYulPathContext is an interface to support dynamic dispatch.
type IYulPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulPathContext differentiates from other interfaces.
	IsYulPathContext()
}

type YulPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulPathContext() *YulPathContext {
	var p = new(YulPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulPath
	return p
}

func (*YulPathContext) IsYulPathContext() {}

func NewYulPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulPathContext {
	var p = new(YulPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulPath

	return p
}

func (s *YulPathContext) GetParser() antlr.Parser { return s.parser }

func (s *YulPathContext) AllYulIdentifier() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulIdentifier)
}

func (s *YulPathContext) YulIdentifier(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulIdentifier, i)
}

func (s *YulPathContext) AllYulPeriod() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulPeriod)
}

func (s *YulPathContext) YulPeriod(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulPeriod, i)
}

func (s *YulPathContext) AllYulEVMBuiltin() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulEVMBuiltin)
}

func (s *YulPathContext) YulEVMBuiltin(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulEVMBuiltin, i)
}

func (s *YulPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulPath(s)
	}
}

func (s *YulPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulPath(s)
	}
}

func (s *YulPathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulPath() (localctx IYulPathContext) {
	this := p
	_ = this

	localctx = NewYulPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SolidityParserRULE_yulPath)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1244)
		p.Match(SolidityParserYulIdentifier)
	}
	p.SetState(1249)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	for _la == SolidityParserYulPeriod {
		{
			p.SetState(1245)
			p.Match(SolidityParserYulPeriod)
		}
		{
			p.SetState(1246)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserYulEVMBuiltin || _la == SolidityParserYulIdentifier) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}

		p.SetState(1251)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}

	return localctx
}

// IYulFunctionCallContext is an interface to support dynamic dispatch.
type IYulFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulFunctionCallContext differentiates from other interfaces.
	IsYulFunctionCallContext()
}

type YulFunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulFunctionCallContext() *YulFunctionCallContext {
	var p = new(YulFunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulFunctionCall
	return p
}

func (*YulFunctionCallContext) IsYulFunctionCallContext() {}

func NewYulFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulFunctionCallContext {
	var p = new(YulFunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulFunctionCall

	return p
}

func (s *YulFunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *YulFunctionCallContext) YulLParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulLParen, 0)
}

func (s *YulFunctionCallContext) YulRParen() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulRParen, 0)
}

func (s *YulFunctionCallContext) YulIdentifier() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulIdentifier, 0)
}

func (s *YulFunctionCallContext) YulEVMBuiltin() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulEVMBuiltin, 0)
}

func (s *YulFunctionCallContext) AllYulExpression() []IYulExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem())
	var tst = make([]IYulExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IYulExpressionContext)
		}
	}

	return tst
}

func (s *YulFunctionCallContext) YulExpression(i int) IYulExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IYulExpressionContext)
}

func (s *YulFunctionCallContext) AllYulComma() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserYulComma)
}

func (s *YulFunctionCallContext) YulComma(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserYulComma, i)
}

func (s *YulFunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulFunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulFunctionCallContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulFunctionCall(s)
	}
}

func (s *YulFunctionCallContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulFunctionCall(s)
	}
}

func (s *YulFunctionCallContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulFunctionCall(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulFunctionCall() (localctx IYulFunctionCallContext) {
	this := p
	_ = this

	localctx = NewYulFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SolidityParserRULE_yulFunctionCall)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1252)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserYulEVMBuiltin || _la == SolidityParserYulIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(1253)
		p.Match(SolidityParserYulLParen)
	}
	p.SetState(1262)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)

	if ((_la-144)&-(0x1f+1)) == 0 && ((1<<uint(_la-144))&((1<<(SolidityParserYulFalse-144))|(1<<(SolidityParserYulTrue-144))|(1<<(SolidityParserYulEVMBuiltin-144))|(1<<(SolidityParserYulIdentifier-144))|(1<<(SolidityParserYulHexNumber-144))|(1<<(SolidityParserYulDecimalNumber-144))|(1<<(SolidityParserYulStringLiteral-144))|(1<<(SolidityParserYulHexStringLiteral-144)))) != 0 {
		{
			p.SetState(1254)
			p.YulExpression()
		}
		p.SetState(1259)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)

		for _la == SolidityParserYulComma {
			{
				p.SetState(1255)
				p.Match(SolidityParserYulComma)
			}
			{
				p.SetState(1256)
				p.YulExpression()
			}

			p.SetState(1261)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(1264)
		p.Match(SolidityParserYulRParen)
	}

	return localctx
}

// IYulBooleanContext is an interface to support dynamic dispatch.
type IYulBooleanContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulBooleanContext differentiates from other interfaces.
	IsYulBooleanContext()
}

type YulBooleanContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulBooleanContext() *YulBooleanContext {
	var p = new(YulBooleanContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulBoolean
	return p
}

func (*YulBooleanContext) IsYulBooleanContext() {}

func NewYulBooleanContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulBooleanContext {
	var p = new(YulBooleanContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulBoolean

	return p
}

func (s *YulBooleanContext) GetParser() antlr.Parser { return s.parser }

func (s *YulBooleanContext) YulTrue() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulTrue, 0)
}

func (s *YulBooleanContext) YulFalse() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulFalse, 0)
}

func (s *YulBooleanContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulBooleanContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulBooleanContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulBoolean(s)
	}
}

func (s *YulBooleanContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulBoolean(s)
	}
}

func (s *YulBooleanContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulBoolean(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulBoolean() (localctx IYulBooleanContext) {
	this := p
	_ = this

	localctx = NewYulBooleanContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SolidityParserRULE_yulBoolean)
	var _la int

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1266)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserYulFalse || _la == SolidityParserYulTrue) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

	return localctx
}

// IYulLiteralContext is an interface to support dynamic dispatch.
type IYulLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulLiteralContext differentiates from other interfaces.
	IsYulLiteralContext()
}

type YulLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulLiteralContext() *YulLiteralContext {
	var p = new(YulLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulLiteral
	return p
}

func (*YulLiteralContext) IsYulLiteralContext() {}

func NewYulLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulLiteralContext {
	var p = new(YulLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulLiteral

	return p
}

func (s *YulLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *YulLiteralContext) YulDecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulDecimalNumber, 0)
}

func (s *YulLiteralContext) YulStringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulStringLiteral, 0)
}

func (s *YulLiteralContext) YulHexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulHexNumber, 0)
}

func (s *YulLiteralContext) YulBoolean() IYulBooleanContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulBooleanContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulBooleanContext)
}

func (s *YulLiteralContext) YulHexStringLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserYulHexStringLiteral, 0)
}

func (s *YulLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulLiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulLiteral(s)
	}
}

func (s *YulLiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulLiteral(s)
	}
}

func (s *YulLiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulLiteral() (localctx IYulLiteralContext) {
	this := p
	_ = this

	localctx = NewYulLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SolidityParserRULE_yulLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1273)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserYulDecimalNumber:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1268)
			p.Match(SolidityParserYulDecimalNumber)
		}

	case SolidityParserYulStringLiteral:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1269)
			p.Match(SolidityParserYulStringLiteral)
		}

	case SolidityParserYulHexNumber:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1270)
			p.Match(SolidityParserYulHexNumber)
		}

	case SolidityParserYulFalse, SolidityParserYulTrue:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1271)
			p.YulBoolean()
		}

	case SolidityParserYulHexStringLiteral:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(1272)
			p.Match(SolidityParserYulHexStringLiteral)
		}

	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}

	return localctx
}

// IYulExpressionContext is an interface to support dynamic dispatch.
type IYulExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsYulExpressionContext differentiates from other interfaces.
	IsYulExpressionContext()
}

type YulExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyYulExpressionContext() *YulExpressionContext {
	var p = new(YulExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_yulExpression
	return p
}

func (*YulExpressionContext) IsYulExpressionContext() {}

func NewYulExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *YulExpressionContext {
	var p = new(YulExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_yulExpression

	return p
}

func (s *YulExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *YulExpressionContext) YulPath() IYulPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulPathContext)
}

func (s *YulExpressionContext) YulFunctionCall() IYulFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulFunctionCallContext)
}

func (s *YulExpressionContext) YulLiteral() IYulLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IYulLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IYulLiteralContext)
}

func (s *YulExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *YulExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *YulExpressionContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.EnterYulExpression(s)
	}
}

func (s *YulExpressionContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(SolidityParserListener); ok {
		listenerT.ExitYulExpression(s)
	}
}

func (s *YulExpressionContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case SolidityParserVisitor:
		return t.VisitYulExpression(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *SolidityParser) YulExpression() (localctx IYulExpressionContext) {
	this := p
	_ = this

	localctx = NewYulExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SolidityParserRULE_yulExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1278)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 138, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1275)
			p.YulPath()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1276)
			p.YulFunctionCall()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1277)
			p.YulLiteral()
		}

	}

	return localctx
}

func (p *SolidityParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 19:
		var t *ConstructorDefinitionContext = nil
		if localctx != nil {
			t = localctx.(*ConstructorDefinitionContext)
		}
		return p.ConstructorDefinition_Sempred(t, predIndex)

	case 22:
		var t *FunctionDefinitionContext = nil
		if localctx != nil {
			t = localctx.(*FunctionDefinitionContext)
		}
		return p.FunctionDefinition_Sempred(t, predIndex)

	case 23:
		var t *ModifierDefinitionContext = nil
		if localctx != nil {
			t = localctx.(*ModifierDefinitionContext)
		}
		return p.ModifierDefinition_Sempred(t, predIndex)

	case 24:
		var t *FallbackFunctionDefinitionContext = nil
		if localctx != nil {
			t = localctx.(*FallbackFunctionDefinitionContext)
		}
		return p.FallbackFunctionDefinition_Sempred(t, predIndex)

	case 25:
		var t *ReceiveFunctionDefinitionContext = nil
		if localctx != nil {
			t = localctx.(*ReceiveFunctionDefinitionContext)
		}
		return p.ReceiveFunctionDefinition_Sempred(t, predIndex)

	case 30:
		var t *StateVariableDeclarationContext = nil
		if localctx != nil {
			t = localctx.(*StateVariableDeclarationContext)
		}
		return p.StateVariableDeclaration_Sempred(t, predIndex)

	case 37:
		var t *TypeNameContext = nil
		if localctx != nil {
			t = localctx.(*TypeNameContext)
		}
		return p.TypeName_Sempred(t, predIndex)

	case 38:
		var t *ElementaryTypeNameContext = nil
		if localctx != nil {
			t = localctx.(*ElementaryTypeNameContext)
		}
		return p.ElementaryTypeName_Sempred(t, predIndex)

	case 39:
		var t *FunctionTypeNameContext = nil
		if localctx != nil {
			t = localctx.(*FunctionTypeNameContext)
		}
		return p.FunctionTypeName_Sempred(t, predIndex)

	case 42:
		var t *ExpressionContext = nil
		if localctx != nil {
			t = localctx.(*ExpressionContext)
		}
		return p.Expression_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SolidityParser) ConstructorDefinition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
		return !localctx.(*ConstructorDefinitionContext).payableSet

	case 1:
		return !localctx.(*ConstructorDefinitionContext).visibilitySet

	case 2:
		return !localctx.(*ConstructorDefinitionContext).visibilitySet

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) FunctionDefinition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 3:
		return !localctx.(*FunctionDefinitionContext).visibilitySet

	case 4:
		return !localctx.(*FunctionDefinitionContext).mutabilitySet

	case 5:
		return !localctx.(*FunctionDefinitionContext).virtualSet

	case 6:
		return !localctx.(*FunctionDefinitionContext).overrideSpecifierSet

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) ModifierDefinition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 7:
		return !localctx.(*ModifierDefinitionContext).virtualSet

	case 8:
		return !localctx.(*ModifierDefinitionContext).overrideSpecifierSet

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) FallbackFunctionDefinition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 9:
		return !localctx.(*FallbackFunctionDefinitionContext).visibilitySet

	case 10:
		return !localctx.(*FallbackFunctionDefinitionContext).mutabilitySet

	case 11:
		return !localctx.(*FallbackFunctionDefinitionContext).virtualSet

	case 12:
		return !localctx.(*FallbackFunctionDefinitionContext).overrideSpecifierSet

	case 13:
		return localctx.(*FallbackFunctionDefinitionContext).hasParameters

	case 14:
		return !localctx.(*FallbackFunctionDefinitionContext).hasParameters

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) ReceiveFunctionDefinition_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 15:
		return !localctx.(*ReceiveFunctionDefinitionContext).visibilitySet

	case 16:
		return !localctx.(*ReceiveFunctionDefinitionContext).mutabilitySet

	case 17:
		return !localctx.(*ReceiveFunctionDefinitionContext).virtualSet

	case 18:
		return !localctx.(*ReceiveFunctionDefinitionContext).overrideSpecifierSet

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) StateVariableDeclaration_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 19:
		return !localctx.(*StateVariableDeclarationContext).visibilitySet

	case 20:
		return !localctx.(*StateVariableDeclarationContext).visibilitySet

	case 21:
		return !localctx.(*StateVariableDeclarationContext).visibilitySet

	case 22:
		return !localctx.(*StateVariableDeclarationContext).constantnessSet

	case 23:
		return !localctx.(*StateVariableDeclarationContext).overrideSpecifierSet

	case 24:
		return !localctx.(*StateVariableDeclarationContext).constantnessSet

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) TypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 25:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) ElementaryTypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 26:
		return localctx.(*ElementaryTypeNameContext).allowAddressPayable

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) FunctionTypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 27:
		return !localctx.(*FunctionTypeNameContext).visibilitySet

	case 28:
		return !localctx.(*FunctionTypeNameContext).mutabilitySet

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 29:
		return p.Precpred(p.GetParserRuleContext(), 17)

	case 30:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 31:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 32:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 33:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 34:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 35:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 36:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 37:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 38:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 39:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 40:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 41:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 42:
		return p.Precpred(p.GetParserRuleContext(), 26)

	case 43:
		return p.Precpred(p.GetParserRuleContext(), 25)

	case 44:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 45:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 46:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 47:
		return p.Precpred(p.GetParserRuleContext(), 18)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
